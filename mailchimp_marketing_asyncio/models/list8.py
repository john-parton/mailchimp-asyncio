# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class List8(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'static_segment': 'list[str]',
        'options': 'Conditions1'
    }

    attribute_map = {
        'name': 'name',
        'static_segment': 'static_segment',
        'options': 'options'
    }

    def __init__(self, name=None, static_segment=None, options=None):  # noqa: E501
        """List8 - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._static_segment = None
        self._options = None
        self.discriminator = None

        self.name = name
        if static_segment is not None:
            self.static_segment = static_segment
        if options is not None:
            self.options = options

    @property
    def name(self):
        """Gets the name of this List8.  # noqa: E501

        The name of the segment.  # noqa: E501

        :return: The name of this List8.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this List8.

        The name of the segment.  # noqa: E501

        :param name: The name of this List8.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def static_segment(self):
        """Gets the static_segment of this List8.  # noqa: E501

        An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. Passing an empty array will create a static segment without any subscribers. This field cannot be provided with the options field.  # noqa: E501

        :return: The static_segment of this List8.  # noqa: E501
        :rtype: list[str]
        """
        return self._static_segment

    @static_segment.setter
    def static_segment(self, static_segment):
        """Sets the static_segment of this List8.

        An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. Passing an empty array will create a static segment without any subscribers. This field cannot be provided with the options field.  # noqa: E501

        :param static_segment: The static_segment of this List8.  # noqa: E501
        :type: list[str]
        """

        self._static_segment = static_segment

    @property
    def options(self):
        """Gets the options of this List8.  # noqa: E501


        :return: The options of this List8.  # noqa: E501
        :rtype: Conditions1
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this List8.


        :param options: The options of this List8.  # noqa: E501
        :type: Conditions1
        """

        self._options = options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(List8, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, List8):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
