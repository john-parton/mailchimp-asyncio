# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2009Audience(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'source_type': 'str',
        'email_source': 'InlineResponse2009AudienceEmailSource',
        'include_source_in_target': 'bool',
        'lookalike_country_code': 'str',
        'targeting_specs': 'InlineResponse2009AudienceTargetingSpecs'
    }

    attribute_map = {
        'type': 'type',
        'source_type': 'source_type',
        'email_source': 'email_source',
        'include_source_in_target': 'include_source_in_target',
        'lookalike_country_code': 'lookalike_country_code',
        'targeting_specs': 'targeting_specs'
    }

    def __init__(self, type=None, source_type=None, email_source=None, include_source_in_target=None, lookalike_country_code=None, targeting_specs=None):  # noqa: E501
        """InlineResponse2009Audience - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._source_type = None
        self._email_source = None
        self._include_source_in_target = None
        self._lookalike_country_code = None
        self._targeting_specs = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if source_type is not None:
            self.source_type = source_type
        if email_source is not None:
            self.email_source = email_source
        if include_source_in_target is not None:
            self.include_source_in_target = include_source_in_target
        if lookalike_country_code is not None:
            self.lookalike_country_code = lookalike_country_code
        if targeting_specs is not None:
            self.targeting_specs = targeting_specs

    @property
    def type(self):
        """Gets the type of this InlineResponse2009Audience.  # noqa: E501

        Type of the audience  # noqa: E501

        :return: The type of this InlineResponse2009Audience.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse2009Audience.

        Type of the audience  # noqa: E501

        :param type: The type of this InlineResponse2009Audience.  # noqa: E501
        :type: str
        """
        allowed_values = ["Custom Audience", "Lookalike Audience", "Interest-based Audience"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def source_type(self):
        """Gets the source_type of this InlineResponse2009Audience.  # noqa: E501

        List or Facebook based audience  # noqa: E501

        :return: The source_type of this InlineResponse2009Audience.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this InlineResponse2009Audience.

        List or Facebook based audience  # noqa: E501

        :param source_type: The source_type of this InlineResponse2009Audience.  # noqa: E501
        :type: str
        """
        allowed_values = ["facebook", "list"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"  # noqa: E501
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def email_source(self):
        """Gets the email_source of this InlineResponse2009Audience.  # noqa: E501


        :return: The email_source of this InlineResponse2009Audience.  # noqa: E501
        :rtype: InlineResponse2009AudienceEmailSource
        """
        return self._email_source

    @email_source.setter
    def email_source(self, email_source):
        """Sets the email_source of this InlineResponse2009Audience.


        :param email_source: The email_source of this InlineResponse2009Audience.  # noqa: E501
        :type: InlineResponse2009AudienceEmailSource
        """

        self._email_source = email_source

    @property
    def include_source_in_target(self):
        """Gets the include_source_in_target of this InlineResponse2009Audience.  # noqa: E501

        To include list contacts as part of audience  # noqa: E501

        :return: The include_source_in_target of this InlineResponse2009Audience.  # noqa: E501
        :rtype: bool
        """
        return self._include_source_in_target

    @include_source_in_target.setter
    def include_source_in_target(self, include_source_in_target):
        """Sets the include_source_in_target of this InlineResponse2009Audience.

        To include list contacts as part of audience  # noqa: E501

        :param include_source_in_target: The include_source_in_target of this InlineResponse2009Audience.  # noqa: E501
        :type: bool
        """

        self._include_source_in_target = include_source_in_target

    @property
    def lookalike_country_code(self):
        """Gets the lookalike_country_code of this InlineResponse2009Audience.  # noqa: E501

        To find similar audience in given country  # noqa: E501

        :return: The lookalike_country_code of this InlineResponse2009Audience.  # noqa: E501
        :rtype: str
        """
        return self._lookalike_country_code

    @lookalike_country_code.setter
    def lookalike_country_code(self, lookalike_country_code):
        """Sets the lookalike_country_code of this InlineResponse2009Audience.

        To find similar audience in given country  # noqa: E501

        :param lookalike_country_code: The lookalike_country_code of this InlineResponse2009Audience.  # noqa: E501
        :type: str
        """

        self._lookalike_country_code = lookalike_country_code

    @property
    def targeting_specs(self):
        """Gets the targeting_specs of this InlineResponse2009Audience.  # noqa: E501


        :return: The targeting_specs of this InlineResponse2009Audience.  # noqa: E501
        :rtype: InlineResponse2009AudienceTargetingSpecs
        """
        return self._targeting_specs

    @targeting_specs.setter
    def targeting_specs(self, targeting_specs):
        """Sets the targeting_specs of this InlineResponse2009Audience.


        :param targeting_specs: The targeting_specs of this InlineResponse2009Audience.  # noqa: E501
        :type: InlineResponse2009AudienceTargetingSpecs
        """

        self._targeting_specs = targeting_specs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2009Audience, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2009Audience):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
