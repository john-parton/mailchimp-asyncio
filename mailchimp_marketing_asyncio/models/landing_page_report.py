# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LandingPageReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'title': 'str',
        'url': 'str',
        'published_at': 'datetime',
        'unpublished_at': 'datetime',
        'status': 'str',
        'list_id': 'str',
        'visits': 'int',
        'unique_visits': 'int',
        'subscribes': 'int',
        'clicks': 'int',
        'conversion_rate': 'float',
        'timeseries': 'LandingPageReportTimeseries',
        'ecommerce': 'LandingPageReportEcommerce',
        'web_id': 'int',
        'list_name': 'str',
        'signup_tags': 'list[Tag]',
        'links': 'list[ResourceLink]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'title': 'title',
        'url': 'url',
        'published_at': 'published_at',
        'unpublished_at': 'unpublished_at',
        'status': 'status',
        'list_id': 'list_id',
        'visits': 'visits',
        'unique_visits': 'unique_visits',
        'subscribes': 'subscribes',
        'clicks': 'clicks',
        'conversion_rate': 'conversion_rate',
        'timeseries': 'timeseries',
        'ecommerce': 'ecommerce',
        'web_id': 'web_id',
        'list_name': 'list_name',
        'signup_tags': 'signup_tags',
        'links': '_links'
    }

    def __init__(self, id=None, name=None, title=None, url=None, published_at=None, unpublished_at=None, status=None, list_id=None, visits=None, unique_visits=None, subscribes=None, clicks=None, conversion_rate=None, timeseries=None, ecommerce=None, web_id=None, list_name=None, signup_tags=None, links=None):  # noqa: E501
        """LandingPageReport - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._title = None
        self._url = None
        self._published_at = None
        self._unpublished_at = None
        self._status = None
        self._list_id = None
        self._visits = None
        self._unique_visits = None
        self._subscribes = None
        self._clicks = None
        self._conversion_rate = None
        self._timeseries = None
        self._ecommerce = None
        self._web_id = None
        self._list_name = None
        self._signup_tags = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if title is not None:
            self.title = title
        if url is not None:
            self.url = url
        if published_at is not None:
            self.published_at = published_at
        if unpublished_at is not None:
            self.unpublished_at = unpublished_at
        if status is not None:
            self.status = status
        if list_id is not None:
            self.list_id = list_id
        if visits is not None:
            self.visits = visits
        if unique_visits is not None:
            self.unique_visits = unique_visits
        if subscribes is not None:
            self.subscribes = subscribes
        if clicks is not None:
            self.clicks = clicks
        if conversion_rate is not None:
            self.conversion_rate = conversion_rate
        if timeseries is not None:
            self.timeseries = timeseries
        if ecommerce is not None:
            self.ecommerce = ecommerce
        if web_id is not None:
            self.web_id = web_id
        if list_name is not None:
            self.list_name = list_name
        if signup_tags is not None:
            self.signup_tags = signup_tags
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this LandingPageReport.  # noqa: E501

        A string that uniquely identifies this landing page.  # noqa: E501

        :return: The id of this LandingPageReport.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LandingPageReport.

        A string that uniquely identifies this landing page.  # noqa: E501

        :param id: The id of this LandingPageReport.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this LandingPageReport.  # noqa: E501

        The name of this landing page the user will see.  # noqa: E501

        :return: The name of this LandingPageReport.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LandingPageReport.

        The name of this landing page the user will see.  # noqa: E501

        :param name: The name of this LandingPageReport.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def title(self):
        """Gets the title of this LandingPageReport.  # noqa: E501

        The name of the landing page the user's customers will see.  # noqa: E501

        :return: The title of this LandingPageReport.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LandingPageReport.

        The name of the landing page the user's customers will see.  # noqa: E501

        :param title: The title of this LandingPageReport.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this LandingPageReport.  # noqa: E501

        The landing page url.  # noqa: E501

        :return: The url of this LandingPageReport.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this LandingPageReport.

        The landing page url.  # noqa: E501

        :param url: The url of this LandingPageReport.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def published_at(self):
        """Gets the published_at of this LandingPageReport.  # noqa: E501

        The time this landing page was published.  # noqa: E501

        :return: The published_at of this LandingPageReport.  # noqa: E501
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this LandingPageReport.

        The time this landing page was published.  # noqa: E501

        :param published_at: The published_at of this LandingPageReport.  # noqa: E501
        :type: datetime
        """

        self._published_at = published_at

    @property
    def unpublished_at(self):
        """Gets the unpublished_at of this LandingPageReport.  # noqa: E501

        The time this landing page was unpublished.  # noqa: E501

        :return: The unpublished_at of this LandingPageReport.  # noqa: E501
        :rtype: datetime
        """
        return self._unpublished_at

    @unpublished_at.setter
    def unpublished_at(self, unpublished_at):
        """Sets the unpublished_at of this LandingPageReport.

        The time this landing page was unpublished.  # noqa: E501

        :param unpublished_at: The unpublished_at of this LandingPageReport.  # noqa: E501
        :type: datetime
        """

        self._unpublished_at = unpublished_at

    @property
    def status(self):
        """Gets the status of this LandingPageReport.  # noqa: E501

        The status of the landing page.  # noqa: E501

        :return: The status of this LandingPageReport.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LandingPageReport.

        The status of the landing page.  # noqa: E501

        :param status: The status of this LandingPageReport.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def list_id(self):
        """Gets the list_id of this LandingPageReport.  # noqa: E501

        The list id connected to this landing page.  # noqa: E501

        :return: The list_id of this LandingPageReport.  # noqa: E501
        :rtype: str
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this LandingPageReport.

        The list id connected to this landing page.  # noqa: E501

        :param list_id: The list_id of this LandingPageReport.  # noqa: E501
        :type: str
        """

        self._list_id = list_id

    @property
    def visits(self):
        """Gets the visits of this LandingPageReport.  # noqa: E501

        The number of visits to this landing pages.  # noqa: E501

        :return: The visits of this LandingPageReport.  # noqa: E501
        :rtype: int
        """
        return self._visits

    @visits.setter
    def visits(self, visits):
        """Sets the visits of this LandingPageReport.

        The number of visits to this landing pages.  # noqa: E501

        :param visits: The visits of this LandingPageReport.  # noqa: E501
        :type: int
        """

        self._visits = visits

    @property
    def unique_visits(self):
        """Gets the unique_visits of this LandingPageReport.  # noqa: E501

        The number of unique visits to this landing pages.  # noqa: E501

        :return: The unique_visits of this LandingPageReport.  # noqa: E501
        :rtype: int
        """
        return self._unique_visits

    @unique_visits.setter
    def unique_visits(self, unique_visits):
        """Sets the unique_visits of this LandingPageReport.

        The number of unique visits to this landing pages.  # noqa: E501

        :param unique_visits: The unique_visits of this LandingPageReport.  # noqa: E501
        :type: int
        """

        self._unique_visits = unique_visits

    @property
    def subscribes(self):
        """Gets the subscribes of this LandingPageReport.  # noqa: E501

        The number of subscribes to this landing pages.  # noqa: E501

        :return: The subscribes of this LandingPageReport.  # noqa: E501
        :rtype: int
        """
        return self._subscribes

    @subscribes.setter
    def subscribes(self, subscribes):
        """Sets the subscribes of this LandingPageReport.

        The number of subscribes to this landing pages.  # noqa: E501

        :param subscribes: The subscribes of this LandingPageReport.  # noqa: E501
        :type: int
        """

        self._subscribes = subscribes

    @property
    def clicks(self):
        """Gets the clicks of this LandingPageReport.  # noqa: E501

        The number of clicks to this landing pages.  # noqa: E501

        :return: The clicks of this LandingPageReport.  # noqa: E501
        :rtype: int
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this LandingPageReport.

        The number of clicks to this landing pages.  # noqa: E501

        :param clicks: The clicks of this LandingPageReport.  # noqa: E501
        :type: int
        """

        self._clicks = clicks

    @property
    def conversion_rate(self):
        """Gets the conversion_rate of this LandingPageReport.  # noqa: E501

        The percentage of people who visited your landing page and were added to your list.  # noqa: E501

        :return: The conversion_rate of this LandingPageReport.  # noqa: E501
        :rtype: float
        """
        return self._conversion_rate

    @conversion_rate.setter
    def conversion_rate(self, conversion_rate):
        """Sets the conversion_rate of this LandingPageReport.

        The percentage of people who visited your landing page and were added to your list.  # noqa: E501

        :param conversion_rate: The conversion_rate of this LandingPageReport.  # noqa: E501
        :type: float
        """

        self._conversion_rate = conversion_rate

    @property
    def timeseries(self):
        """Gets the timeseries of this LandingPageReport.  # noqa: E501


        :return: The timeseries of this LandingPageReport.  # noqa: E501
        :rtype: LandingPageReportTimeseries
        """
        return self._timeseries

    @timeseries.setter
    def timeseries(self, timeseries):
        """Sets the timeseries of this LandingPageReport.


        :param timeseries: The timeseries of this LandingPageReport.  # noqa: E501
        :type: LandingPageReportTimeseries
        """

        self._timeseries = timeseries

    @property
    def ecommerce(self):
        """Gets the ecommerce of this LandingPageReport.  # noqa: E501


        :return: The ecommerce of this LandingPageReport.  # noqa: E501
        :rtype: LandingPageReportEcommerce
        """
        return self._ecommerce

    @ecommerce.setter
    def ecommerce(self, ecommerce):
        """Sets the ecommerce of this LandingPageReport.


        :param ecommerce: The ecommerce of this LandingPageReport.  # noqa: E501
        :type: LandingPageReportEcommerce
        """

        self._ecommerce = ecommerce

    @property
    def web_id(self):
        """Gets the web_id of this LandingPageReport.  # noqa: E501

        The ID used in the Mailchimp web application.  # noqa: E501

        :return: The web_id of this LandingPageReport.  # noqa: E501
        :rtype: int
        """
        return self._web_id

    @web_id.setter
    def web_id(self, web_id):
        """Sets the web_id of this LandingPageReport.

        The ID used in the Mailchimp web application.  # noqa: E501

        :param web_id: The web_id of this LandingPageReport.  # noqa: E501
        :type: int
        """

        self._web_id = web_id

    @property
    def list_name(self):
        """Gets the list_name of this LandingPageReport.  # noqa: E501

        List Name  # noqa: E501

        :return: The list_name of this LandingPageReport.  # noqa: E501
        :rtype: str
        """
        return self._list_name

    @list_name.setter
    def list_name(self, list_name):
        """Sets the list_name of this LandingPageReport.

        List Name  # noqa: E501

        :param list_name: The list_name of this LandingPageReport.  # noqa: E501
        :type: str
        """

        self._list_name = list_name

    @property
    def signup_tags(self):
        """Gets the signup_tags of this LandingPageReport.  # noqa: E501

        A list of tags associated to the landing page.  # noqa: E501

        :return: The signup_tags of this LandingPageReport.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._signup_tags

    @signup_tags.setter
    def signup_tags(self, signup_tags):
        """Sets the signup_tags of this LandingPageReport.

        A list of tags associated to the landing page.  # noqa: E501

        :param signup_tags: The signup_tags of this LandingPageReport.  # noqa: E501
        :type: list[Tag]
        """

        self._signup_tags = signup_tags

    @property
    def links(self):
        """Gets the links of this LandingPageReport.  # noqa: E501

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :return: The links of this LandingPageReport.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this LandingPageReport.

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :param links: The links of this LandingPageReport.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LandingPageReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LandingPageReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
