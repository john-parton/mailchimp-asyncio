# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class List(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'list_id': 'str',
        'list_is_active': 'bool',
        'list_name': 'str',
        'segment_opts': 'SegmentOptions',
        'store_id': 'str'
    }

    attribute_map = {
        'list_id': 'list_id',
        'list_is_active': 'list_is_active',
        'list_name': 'list_name',
        'segment_opts': 'segment_opts',
        'store_id': 'store_id'
    }

    def __init__(self, list_id=None, list_is_active=None, list_name=None, segment_opts=None, store_id=None):  # noqa: E501
        """List - a model defined in Swagger"""  # noqa: E501

        self._list_id = None
        self._list_is_active = None
        self._list_name = None
        self._segment_opts = None
        self._store_id = None
        self.discriminator = None

        if list_id is not None:
            self.list_id = list_id
        if list_is_active is not None:
            self.list_is_active = list_is_active
        if list_name is not None:
            self.list_name = list_name
        if segment_opts is not None:
            self.segment_opts = segment_opts
        if store_id is not None:
            self.store_id = store_id

    @property
    def list_id(self):
        """Gets the list_id of this List.  # noqa: E501

        The unique list id.  # noqa: E501

        :return: The list_id of this List.  # noqa: E501
        :rtype: str
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this List.

        The unique list id.  # noqa: E501

        :param list_id: The list_id of this List.  # noqa: E501
        :type: str
        """

        self._list_id = list_id

    @property
    def list_is_active(self):
        """Gets the list_is_active of this List.  # noqa: E501

        The status of the list used, namely if it's deleted or disabled.  # noqa: E501

        :return: The list_is_active of this List.  # noqa: E501
        :rtype: bool
        """
        return self._list_is_active

    @list_is_active.setter
    def list_is_active(self, list_is_active):
        """Sets the list_is_active of this List.

        The status of the list used, namely if it's deleted or disabled.  # noqa: E501

        :param list_is_active: The list_is_active of this List.  # noqa: E501
        :type: bool
        """

        self._list_is_active = list_is_active

    @property
    def list_name(self):
        """Gets the list_name of this List.  # noqa: E501

        List Name.  # noqa: E501

        :return: The list_name of this List.  # noqa: E501
        :rtype: str
        """
        return self._list_name

    @list_name.setter
    def list_name(self, list_name):
        """Sets the list_name of this List.

        List Name.  # noqa: E501

        :param list_name: The list_name of this List.  # noqa: E501
        :type: str
        """

        self._list_name = list_name

    @property
    def segment_opts(self):
        """Gets the segment_opts of this List.  # noqa: E501


        :return: The segment_opts of this List.  # noqa: E501
        :rtype: SegmentOptions
        """
        return self._segment_opts

    @segment_opts.setter
    def segment_opts(self, segment_opts):
        """Sets the segment_opts of this List.


        :param segment_opts: The segment_opts of this List.  # noqa: E501
        :type: SegmentOptions
        """

        self._segment_opts = segment_opts

    @property
    def store_id(self):
        """Gets the store_id of this List.  # noqa: E501

        The id of the store.  # noqa: E501

        :return: The store_id of this List.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this List.

        The id of the store.  # noqa: E501

        :param store_id: The store_id of this List.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(List, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, List):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
