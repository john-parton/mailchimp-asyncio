# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Clicks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'clicks_total': 'int',
        'unique_clicks': 'int',
        'unique_subscriber_clicks': 'int',
        'click_rate': 'float',
        'last_click': 'datetime'
    }

    attribute_map = {
        'clicks_total': 'clicks_total',
        'unique_clicks': 'unique_clicks',
        'unique_subscriber_clicks': 'unique_subscriber_clicks',
        'click_rate': 'click_rate',
        'last_click': 'last_click'
    }

    def __init__(self, clicks_total=None, unique_clicks=None, unique_subscriber_clicks=None, click_rate=None, last_click=None):  # noqa: E501
        """Clicks - a model defined in Swagger"""  # noqa: E501

        self._clicks_total = None
        self._unique_clicks = None
        self._unique_subscriber_clicks = None
        self._click_rate = None
        self._last_click = None
        self.discriminator = None

        if clicks_total is not None:
            self.clicks_total = clicks_total
        if unique_clicks is not None:
            self.unique_clicks = unique_clicks
        if unique_subscriber_clicks is not None:
            self.unique_subscriber_clicks = unique_subscriber_clicks
        if click_rate is not None:
            self.click_rate = click_rate
        if last_click is not None:
            self.last_click = last_click

    @property
    def clicks_total(self):
        """Gets the clicks_total of this Clicks.  # noqa: E501

        The total number of clicks for the campaign.  # noqa: E501

        :return: The clicks_total of this Clicks.  # noqa: E501
        :rtype: int
        """
        return self._clicks_total

    @clicks_total.setter
    def clicks_total(self, clicks_total):
        """Sets the clicks_total of this Clicks.

        The total number of clicks for the campaign.  # noqa: E501

        :param clicks_total: The clicks_total of this Clicks.  # noqa: E501
        :type: int
        """

        self._clicks_total = clicks_total

    @property
    def unique_clicks(self):
        """Gets the unique_clicks of this Clicks.  # noqa: E501

        The total number of unique clicks for links across a campaign.  # noqa: E501

        :return: The unique_clicks of this Clicks.  # noqa: E501
        :rtype: int
        """
        return self._unique_clicks

    @unique_clicks.setter
    def unique_clicks(self, unique_clicks):
        """Sets the unique_clicks of this Clicks.

        The total number of unique clicks for links across a campaign.  # noqa: E501

        :param unique_clicks: The unique_clicks of this Clicks.  # noqa: E501
        :type: int
        """

        self._unique_clicks = unique_clicks

    @property
    def unique_subscriber_clicks(self):
        """Gets the unique_subscriber_clicks of this Clicks.  # noqa: E501

        The total number of subscribers who clicked on a campaign.  # noqa: E501

        :return: The unique_subscriber_clicks of this Clicks.  # noqa: E501
        :rtype: int
        """
        return self._unique_subscriber_clicks

    @unique_subscriber_clicks.setter
    def unique_subscriber_clicks(self, unique_subscriber_clicks):
        """Sets the unique_subscriber_clicks of this Clicks.

        The total number of subscribers who clicked on a campaign.  # noqa: E501

        :param unique_subscriber_clicks: The unique_subscriber_clicks of this Clicks.  # noqa: E501
        :type: int
        """

        self._unique_subscriber_clicks = unique_subscriber_clicks

    @property
    def click_rate(self):
        """Gets the click_rate of this Clicks.  # noqa: E501

        The number of unique clicks divided by the total number of successful deliveries.  # noqa: E501

        :return: The click_rate of this Clicks.  # noqa: E501
        :rtype: float
        """
        return self._click_rate

    @click_rate.setter
    def click_rate(self, click_rate):
        """Sets the click_rate of this Clicks.

        The number of unique clicks divided by the total number of successful deliveries.  # noqa: E501

        :param click_rate: The click_rate of this Clicks.  # noqa: E501
        :type: float
        """

        self._click_rate = click_rate

    @property
    def last_click(self):
        """Gets the last_click of this Clicks.  # noqa: E501

        The date and time of the last recorded click for the campaign in ISO 8601 format.  # noqa: E501

        :return: The last_click of this Clicks.  # noqa: E501
        :rtype: datetime
        """
        return self._last_click

    @last_click.setter
    def last_click(self, last_click):
        """Sets the last_click of this Clicks.

        The date and time of the last recorded click for the campaign in ISO 8601 format.  # noqa: E501

        :param last_click: The last_click of this Clicks.  # noqa: E501
        :type: datetime
        """

        self._last_click = last_click

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Clicks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Clicks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
