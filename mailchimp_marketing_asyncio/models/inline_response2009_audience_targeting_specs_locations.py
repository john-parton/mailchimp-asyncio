# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2009AudienceTargetingSpecsLocations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'countries': 'list[str]',
        'regions': 'list[str]',
        'cities': 'list[str]',
        'zips': 'list[str]'
    }

    attribute_map = {
        'countries': 'countries',
        'regions': 'regions',
        'cities': 'cities',
        'zips': 'zips'
    }

    def __init__(self, countries=None, regions=None, cities=None, zips=None):  # noqa: E501
        """InlineResponse2009AudienceTargetingSpecsLocations - a model defined in Swagger"""  # noqa: E501

        self._countries = None
        self._regions = None
        self._cities = None
        self._zips = None
        self.discriminator = None

        if countries is not None:
            self.countries = countries
        if regions is not None:
            self.regions = regions
        if cities is not None:
            self.cities = cities
        if zips is not None:
            self.zips = zips

    @property
    def countries(self):
        """Gets the countries of this InlineResponse2009AudienceTargetingSpecsLocations.  # noqa: E501


        :return: The countries of this InlineResponse2009AudienceTargetingSpecsLocations.  # noqa: E501
        :rtype: list[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this InlineResponse2009AudienceTargetingSpecsLocations.


        :param countries: The countries of this InlineResponse2009AudienceTargetingSpecsLocations.  # noqa: E501
        :type: list[str]
        """

        self._countries = countries

    @property
    def regions(self):
        """Gets the regions of this InlineResponse2009AudienceTargetingSpecsLocations.  # noqa: E501


        :return: The regions of this InlineResponse2009AudienceTargetingSpecsLocations.  # noqa: E501
        :rtype: list[str]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this InlineResponse2009AudienceTargetingSpecsLocations.


        :param regions: The regions of this InlineResponse2009AudienceTargetingSpecsLocations.  # noqa: E501
        :type: list[str]
        """

        self._regions = regions

    @property
    def cities(self):
        """Gets the cities of this InlineResponse2009AudienceTargetingSpecsLocations.  # noqa: E501


        :return: The cities of this InlineResponse2009AudienceTargetingSpecsLocations.  # noqa: E501
        :rtype: list[str]
        """
        return self._cities

    @cities.setter
    def cities(self, cities):
        """Sets the cities of this InlineResponse2009AudienceTargetingSpecsLocations.


        :param cities: The cities of this InlineResponse2009AudienceTargetingSpecsLocations.  # noqa: E501
        :type: list[str]
        """

        self._cities = cities

    @property
    def zips(self):
        """Gets the zips of this InlineResponse2009AudienceTargetingSpecsLocations.  # noqa: E501


        :return: The zips of this InlineResponse2009AudienceTargetingSpecsLocations.  # noqa: E501
        :rtype: list[str]
        """
        return self._zips

    @zips.setter
    def zips(self, zips):
        """Sets the zips of this InlineResponse2009AudienceTargetingSpecsLocations.


        :param zips: The zips of this InlineResponse2009AudienceTargetingSpecsLocations.  # noqa: E501
        :type: list[str]
        """

        self._zips = zips

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2009AudienceTargetingSpecsLocations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2009AudienceTargetingSpecsLocations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
