# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TwitterStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'screen_name': 'str',
        'status_id': 'str',
        '_datetime': 'datetime',
        'is_retweet': 'bool'
    }

    attribute_map = {
        'status': 'status',
        'screen_name': 'screen_name',
        'status_id': 'status_id',
        '_datetime': 'datetime',
        'is_retweet': 'is_retweet'
    }

    def __init__(self, status=None, screen_name=None, status_id=None, _datetime=None, is_retweet=None):  # noqa: E501
        """TwitterStatus - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._screen_name = None
        self._status_id = None
        self.__datetime = None
        self._is_retweet = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if screen_name is not None:
            self.screen_name = screen_name
        if status_id is not None:
            self.status_id = status_id
        if _datetime is not None:
            self._datetime = _datetime
        if is_retweet is not None:
            self.is_retweet = is_retweet

    @property
    def status(self):
        """Gets the status of this TwitterStatus.  # noqa: E501

        The body of the tweet.  # noqa: E501

        :return: The status of this TwitterStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TwitterStatus.

        The body of the tweet.  # noqa: E501

        :param status: The status of this TwitterStatus.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def screen_name(self):
        """Gets the screen_name of this TwitterStatus.  # noqa: E501

        The Twitter handle for the author of the tweet.  # noqa: E501

        :return: The screen_name of this TwitterStatus.  # noqa: E501
        :rtype: str
        """
        return self._screen_name

    @screen_name.setter
    def screen_name(self, screen_name):
        """Sets the screen_name of this TwitterStatus.

        The Twitter handle for the author of the tweet.  # noqa: E501

        :param screen_name: The screen_name of this TwitterStatus.  # noqa: E501
        :type: str
        """

        self._screen_name = screen_name

    @property
    def status_id(self):
        """Gets the status_id of this TwitterStatus.  # noqa: E501

        The individual id for the tweet.  # noqa: E501

        :return: The status_id of this TwitterStatus.  # noqa: E501
        :rtype: str
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this TwitterStatus.

        The individual id for the tweet.  # noqa: E501

        :param status_id: The status_id of this TwitterStatus.  # noqa: E501
        :type: str
        """

        self._status_id = status_id

    @property
    def _datetime(self):
        """Gets the _datetime of this TwitterStatus.  # noqa: E501

        A timestamp for the tweet.  # noqa: E501

        :return: The _datetime of this TwitterStatus.  # noqa: E501
        :rtype: datetime
        """
        return self.__datetime

    @_datetime.setter
    def _datetime(self, _datetime):
        """Sets the _datetime of this TwitterStatus.

        A timestamp for the tweet.  # noqa: E501

        :param _datetime: The _datetime of this TwitterStatus.  # noqa: E501
        :type: datetime
        """

        self.__datetime = _datetime

    @property
    def is_retweet(self):
        """Gets the is_retweet of this TwitterStatus.  # noqa: E501

        A 'true' or 'false' status of whether the tweet is a retweet.  # noqa: E501

        :return: The is_retweet of this TwitterStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_retweet

    @is_retweet.setter
    def is_retweet(self, is_retweet):
        """Sets the is_retweet of this TwitterStatus.

        A 'true' or 'false' status of whether the tweet is a retweet.  # noqa: E501

        :param is_retweet: The is_retweet of this TwitterStatus.  # noqa: E501
        :type: bool
        """

        self._is_retweet = is_retweet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TwitterStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TwitterStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
