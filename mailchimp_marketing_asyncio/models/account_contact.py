# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company': 'str',
        'addr1': 'str',
        'addr2': 'str',
        'city': 'str',
        'state': 'str',
        'zip': 'str',
        'country': 'str'
    }

    attribute_map = {
        'company': 'company',
        'addr1': 'addr1',
        'addr2': 'addr2',
        'city': 'city',
        'state': 'state',
        'zip': 'zip',
        'country': 'country'
    }

    def __init__(self, company=None, addr1=None, addr2=None, city=None, state=None, zip=None, country=None):  # noqa: E501
        """AccountContact - a model defined in Swagger"""  # noqa: E501

        self._company = None
        self._addr1 = None
        self._addr2 = None
        self._city = None
        self._state = None
        self._zip = None
        self._country = None
        self.discriminator = None

        if company is not None:
            self.company = company
        if addr1 is not None:
            self.addr1 = addr1
        if addr2 is not None:
            self.addr2 = addr2
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if zip is not None:
            self.zip = zip
        if country is not None:
            self.country = country

    @property
    def company(self):
        """Gets the company of this AccountContact.  # noqa: E501

        The company name for the account.  # noqa: E501

        :return: The company of this AccountContact.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this AccountContact.

        The company name for the account.  # noqa: E501

        :param company: The company of this AccountContact.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def addr1(self):
        """Gets the addr1 of this AccountContact.  # noqa: E501

        The street address for the account contact.  # noqa: E501

        :return: The addr1 of this AccountContact.  # noqa: E501
        :rtype: str
        """
        return self._addr1

    @addr1.setter
    def addr1(self, addr1):
        """Sets the addr1 of this AccountContact.

        The street address for the account contact.  # noqa: E501

        :param addr1: The addr1 of this AccountContact.  # noqa: E501
        :type: str
        """

        self._addr1 = addr1

    @property
    def addr2(self):
        """Gets the addr2 of this AccountContact.  # noqa: E501

        The street address for the account contact.  # noqa: E501

        :return: The addr2 of this AccountContact.  # noqa: E501
        :rtype: str
        """
        return self._addr2

    @addr2.setter
    def addr2(self, addr2):
        """Sets the addr2 of this AccountContact.

        The street address for the account contact.  # noqa: E501

        :param addr2: The addr2 of this AccountContact.  # noqa: E501
        :type: str
        """

        self._addr2 = addr2

    @property
    def city(self):
        """Gets the city of this AccountContact.  # noqa: E501

        The city for the account contact.  # noqa: E501

        :return: The city of this AccountContact.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AccountContact.

        The city for the account contact.  # noqa: E501

        :param city: The city of this AccountContact.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this AccountContact.  # noqa: E501

        The state for the account contact.  # noqa: E501

        :return: The state of this AccountContact.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AccountContact.

        The state for the account contact.  # noqa: E501

        :param state: The state of this AccountContact.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def zip(self):
        """Gets the zip of this AccountContact.  # noqa: E501

        The zip code for the account contact.  # noqa: E501

        :return: The zip of this AccountContact.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this AccountContact.

        The zip code for the account contact.  # noqa: E501

        :param zip: The zip of this AccountContact.  # noqa: E501
        :type: str
        """

        self._zip = zip

    @property
    def country(self):
        """Gets the country of this AccountContact.  # noqa: E501

        The country for the account contact.  # noqa: E501

        :return: The country of this AccountContact.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AccountContact.

        The country for the account contact.  # noqa: E501

        :param country: The country of this AccountContact.  # noqa: E501
        :type: str
        """

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountContact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
