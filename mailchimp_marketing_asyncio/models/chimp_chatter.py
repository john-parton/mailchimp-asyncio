# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ChimpChatter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'message': 'str',
        'type': 'str',
        'update_time': 'datetime',
        'url': 'str',
        'list_id': 'str',
        'campaign_id': 'str'
    }

    attribute_map = {
        'title': 'title',
        'message': 'message',
        'type': 'type',
        'update_time': 'update_time',
        'url': 'url',
        'list_id': 'list_id',
        'campaign_id': 'campaign_id'
    }

    def __init__(self, title=None, message=None, type=None, update_time=None, url=None, list_id=None, campaign_id=None):  # noqa: E501
        """ChimpChatter - a model defined in Swagger"""  # noqa: E501

        self._title = None
        self._message = None
        self._type = None
        self._update_time = None
        self._url = None
        self._list_id = None
        self._campaign_id = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if message is not None:
            self.message = message
        if type is not None:
            self.type = type
        if update_time is not None:
            self.update_time = update_time
        if url is not None:
            self.url = url
        if list_id is not None:
            self.list_id = list_id
        if campaign_id is not None:
            self.campaign_id = campaign_id

    @property
    def title(self):
        """Gets the title of this ChimpChatter.  # noqa: E501


        :return: The title of this ChimpChatter.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ChimpChatter.


        :param title: The title of this ChimpChatter.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def message(self):
        """Gets the message of this ChimpChatter.  # noqa: E501


        :return: The message of this ChimpChatter.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ChimpChatter.


        :param message: The message of this ChimpChatter.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def type(self):
        """Gets the type of this ChimpChatter.  # noqa: E501

        The type of activity  # noqa: E501

        :return: The type of this ChimpChatter.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ChimpChatter.

        The type of activity  # noqa: E501

        :param type: The type of this ChimpChatter.  # noqa: E501
        :type: str
        """
        allowed_values = ["lists:new-subscriber", "lists:unsubscribes", "lists:profile-updates", "campaigns:facebook-likes", "campaigns:forward-to-friend", "lists:imports"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def update_time(self):
        """Gets the update_time of this ChimpChatter.  # noqa: E501

        The date and time this activity was updated.  # noqa: E501

        :return: The update_time of this ChimpChatter.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ChimpChatter.

        The date and time this activity was updated.  # noqa: E501

        :param update_time: The update_time of this ChimpChatter.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    @property
    def url(self):
        """Gets the url of this ChimpChatter.  # noqa: E501

        URL to a report that includes this activity  # noqa: E501

        :return: The url of this ChimpChatter.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ChimpChatter.

        URL to a report that includes this activity  # noqa: E501

        :param url: The url of this ChimpChatter.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def list_id(self):
        """Gets the list_id of this ChimpChatter.  # noqa: E501

        If it exists, list ID for the associated list  # noqa: E501

        :return: The list_id of this ChimpChatter.  # noqa: E501
        :rtype: str
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this ChimpChatter.

        If it exists, list ID for the associated list  # noqa: E501

        :param list_id: The list_id of this ChimpChatter.  # noqa: E501
        :type: str
        """

        self._list_id = list_id

    @property
    def campaign_id(self):
        """Gets the campaign_id of this ChimpChatter.  # noqa: E501

        If it exists, campaign ID for the associated campaign  # noqa: E501

        :return: The campaign_id of this ChimpChatter.  # noqa: E501
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this ChimpChatter.

        If it exists, campaign ID for the associated campaign  # noqa: E501

        :param campaign_id: The campaign_id of this ChimpChatter.  # noqa: E501
        :type: str
        """

        self._campaign_id = campaign_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChimpChatter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChimpChatter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
