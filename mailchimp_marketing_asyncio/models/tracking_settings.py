# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TrackingSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'track_with_mailchimp': 'bool',
        'enable_restricted_data_processing': 'bool'
    }

    attribute_map = {
        'track_with_mailchimp': 'track_with_mailchimp',
        'enable_restricted_data_processing': 'enable_restricted_data_processing'
    }

    def __init__(self, track_with_mailchimp=None, enable_restricted_data_processing=None):  # noqa: E501
        """TrackingSettings - a model defined in Swagger"""  # noqa: E501

        self._track_with_mailchimp = None
        self._enable_restricted_data_processing = None
        self.discriminator = None

        if track_with_mailchimp is not None:
            self.track_with_mailchimp = track_with_mailchimp
        if enable_restricted_data_processing is not None:
            self.enable_restricted_data_processing = enable_restricted_data_processing

    @property
    def track_with_mailchimp(self):
        """Gets the track_with_mailchimp of this TrackingSettings.  # noqa: E501

        Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/).  # noqa: E501

        :return: The track_with_mailchimp of this TrackingSettings.  # noqa: E501
        :rtype: bool
        """
        return self._track_with_mailchimp

    @track_with_mailchimp.setter
    def track_with_mailchimp(self, track_with_mailchimp):
        """Sets the track_with_mailchimp of this TrackingSettings.

        Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/).  # noqa: E501

        :param track_with_mailchimp: The track_with_mailchimp of this TrackingSettings.  # noqa: E501
        :type: bool
        """

        self._track_with_mailchimp = track_with_mailchimp

    @property
    def enable_restricted_data_processing(self):
        """Gets the enable_restricted_data_processing of this TrackingSettings.  # noqa: E501

        Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/).  # noqa: E501

        :return: The enable_restricted_data_processing of this TrackingSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_restricted_data_processing

    @enable_restricted_data_processing.setter
    def enable_restricted_data_processing(self, enable_restricted_data_processing):
        """Sets the enable_restricted_data_processing of this TrackingSettings.

        Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/).  # noqa: E501

        :param enable_restricted_data_processing: The enable_restricted_data_processing of this TrackingSettings.  # noqa: E501
        :type: bool
        """

        self._enable_restricted_data_processing = enable_restricted_data_processing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackingSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackingSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
