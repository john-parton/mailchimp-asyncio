# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AutomationTrigger(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'workflow_type': 'str',
        'workflow_title': 'str',
        'runtime': 'AutomationWorkflowRuntimeSettings',
        'workflow_emails_count': 'int'
    }

    attribute_map = {
        'workflow_type': 'workflow_type',
        'workflow_title': 'workflow_title',
        'runtime': 'runtime',
        'workflow_emails_count': 'workflow_emails_count'
    }

    def __init__(self, workflow_type=None, workflow_title=None, runtime=None, workflow_emails_count=None):  # noqa: E501
        """AutomationTrigger - a model defined in Swagger"""  # noqa: E501

        self._workflow_type = None
        self._workflow_title = None
        self._runtime = None
        self._workflow_emails_count = None
        self.discriminator = None

        self.workflow_type = workflow_type
        if workflow_title is not None:
            self.workflow_title = workflow_title
        if runtime is not None:
            self.runtime = runtime
        if workflow_emails_count is not None:
            self.workflow_emails_count = workflow_emails_count

    @property
    def workflow_type(self):
        """Gets the workflow_type of this AutomationTrigger.  # noqa: E501

        The type of Automation workflow.  # noqa: E501

        :return: The workflow_type of this AutomationTrigger.  # noqa: E501
        :rtype: str
        """
        return self._workflow_type

    @workflow_type.setter
    def workflow_type(self, workflow_type):
        """Sets the workflow_type of this AutomationTrigger.

        The type of Automation workflow.  # noqa: E501

        :param workflow_type: The workflow_type of this AutomationTrigger.  # noqa: E501
        :type: str
        """
        if workflow_type is None:
            raise ValueError("Invalid value for `workflow_type`, must not be `None`")  # noqa: E501
        allowed_values = ["abandonedBrowse", "abandonedCart", "api", "bestCustomers", "categoryFollowup", "dateAdded", "emailFollowup", "emailSeries", "groupAdd", "groupRemove", "mandrill", "productFollowup", "purchaseFollowup", "recurringEvent", "specialEvent", "visitUrl", "welcomeSeries"]  # noqa: E501
        if workflow_type not in allowed_values:
            raise ValueError(
                "Invalid value for `workflow_type` ({0}), must be one of {1}"  # noqa: E501
                .format(workflow_type, allowed_values)
            )

        self._workflow_type = workflow_type

    @property
    def workflow_title(self):
        """Gets the workflow_title of this AutomationTrigger.  # noqa: E501

        The title of the workflow type.  # noqa: E501

        :return: The workflow_title of this AutomationTrigger.  # noqa: E501
        :rtype: str
        """
        return self._workflow_title

    @workflow_title.setter
    def workflow_title(self, workflow_title):
        """Sets the workflow_title of this AutomationTrigger.

        The title of the workflow type.  # noqa: E501

        :param workflow_title: The workflow_title of this AutomationTrigger.  # noqa: E501
        :type: str
        """

        self._workflow_title = workflow_title

    @property
    def runtime(self):
        """Gets the runtime of this AutomationTrigger.  # noqa: E501


        :return: The runtime of this AutomationTrigger.  # noqa: E501
        :rtype: AutomationWorkflowRuntimeSettings
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this AutomationTrigger.


        :param runtime: The runtime of this AutomationTrigger.  # noqa: E501
        :type: AutomationWorkflowRuntimeSettings
        """

        self._runtime = runtime

    @property
    def workflow_emails_count(self):
        """Gets the workflow_emails_count of this AutomationTrigger.  # noqa: E501

        The number of emails in the Automation workflow.  # noqa: E501

        :return: The workflow_emails_count of this AutomationTrigger.  # noqa: E501
        :rtype: int
        """
        return self._workflow_emails_count

    @workflow_emails_count.setter
    def workflow_emails_count(self, workflow_emails_count):
        """Sets the workflow_emails_count of this AutomationTrigger.

        The number of emails in the Automation workflow.  # noqa: E501

        :param workflow_emails_count: The workflow_emails_count of this AutomationTrigger.  # noqa: E501
        :type: int
        """

        self._workflow_emails_count = workflow_emails_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutomationTrigger, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutomationTrigger):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
