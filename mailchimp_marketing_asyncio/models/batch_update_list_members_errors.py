# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BatchUpdateListMembersErrors(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_address': 'str',
        'error': 'str',
        'error_code': 'str'
    }

    attribute_map = {
        'email_address': 'email_address',
        'error': 'error',
        'error_code': 'error_code'
    }

    def __init__(self, email_address=None, error=None, error_code=None):  # noqa: E501
        """BatchUpdateListMembersErrors - a model defined in Swagger"""  # noqa: E501

        self._email_address = None
        self._error = None
        self._error_code = None
        self.discriminator = None

        if email_address is not None:
            self.email_address = email_address
        if error is not None:
            self.error = error
        if error_code is not None:
            self.error_code = error_code

    @property
    def email_address(self):
        """Gets the email_address of this BatchUpdateListMembersErrors.  # noqa: E501

        The email address that could not be added or updated.  # noqa: E501

        :return: The email_address of this BatchUpdateListMembersErrors.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this BatchUpdateListMembersErrors.

        The email address that could not be added or updated.  # noqa: E501

        :param email_address: The email_address of this BatchUpdateListMembersErrors.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def error(self):
        """Gets the error of this BatchUpdateListMembersErrors.  # noqa: E501

        The error message indicating why the email address could not be added or updated.  # noqa: E501

        :return: The error of this BatchUpdateListMembersErrors.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this BatchUpdateListMembersErrors.

        The error message indicating why the email address could not be added or updated.  # noqa: E501

        :param error: The error of this BatchUpdateListMembersErrors.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def error_code(self):
        """Gets the error_code of this BatchUpdateListMembersErrors.  # noqa: E501

        A unique code that identifies this specifc error.  # noqa: E501

        :return: The error_code of this BatchUpdateListMembersErrors.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this BatchUpdateListMembersErrors.

        A unique code that identifies this specifc error.  # noqa: E501

        :param error_code: The error_code of this BatchUpdateListMembersErrors.  # noqa: E501
        :type: str
        """
        allowed_values = ["ERROR_CONTACT_EXISTS", "ERROR_GENERIC"]  # noqa: E501
        if error_code not in allowed_values:
            raise ValueError(
                "Invalid value for `error_code` ({0}), must be one of {1}"  # noqa: E501
                .format(error_code, allowed_values)
            )

        self._error_code = error_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchUpdateListMembersErrors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchUpdateListMembersErrors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
