# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BatchAddremoveListMembersTofromStaticSegment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'members_added': 'list[ListMembers]',
        'members_removed': 'list[ListMembers]',
        'errors': 'list[BatchAddremoveListMembersTofromStaticSegmentErrors]',
        'total_added': 'int',
        'total_removed': 'int',
        'error_count': 'int',
        'links': 'list[ResourceLink]'
    }

    attribute_map = {
        'members_added': 'members_added',
        'members_removed': 'members_removed',
        'errors': 'errors',
        'total_added': 'total_added',
        'total_removed': 'total_removed',
        'error_count': 'error_count',
        'links': '_links'
    }

    def __init__(self, members_added=None, members_removed=None, errors=None, total_added=None, total_removed=None, error_count=None, links=None):  # noqa: E501
        """BatchAddremoveListMembersTofromStaticSegment - a model defined in Swagger"""  # noqa: E501

        self._members_added = None
        self._members_removed = None
        self._errors = None
        self._total_added = None
        self._total_removed = None
        self._error_count = None
        self._links = None
        self.discriminator = None

        if members_added is not None:
            self.members_added = members_added
        if members_removed is not None:
            self.members_removed = members_removed
        if errors is not None:
            self.errors = errors
        if total_added is not None:
            self.total_added = total_added
        if total_removed is not None:
            self.total_removed = total_removed
        if error_count is not None:
            self.error_count = error_count
        if links is not None:
            self.links = links

    @property
    def members_added(self):
        """Gets the members_added of this BatchAddremoveListMembersTofromStaticSegment.  # noqa: E501

        An array of objects, each representing a new member that was added to the static segment.  # noqa: E501

        :return: The members_added of this BatchAddremoveListMembersTofromStaticSegment.  # noqa: E501
        :rtype: list[ListMembers]
        """
        return self._members_added

    @members_added.setter
    def members_added(self, members_added):
        """Sets the members_added of this BatchAddremoveListMembersTofromStaticSegment.

        An array of objects, each representing a new member that was added to the static segment.  # noqa: E501

        :param members_added: The members_added of this BatchAddremoveListMembersTofromStaticSegment.  # noqa: E501
        :type: list[ListMembers]
        """

        self._members_added = members_added

    @property
    def members_removed(self):
        """Gets the members_removed of this BatchAddremoveListMembersTofromStaticSegment.  # noqa: E501

        An array of objects, each representing an existing list member that got deleted from the static segment.  # noqa: E501

        :return: The members_removed of this BatchAddremoveListMembersTofromStaticSegment.  # noqa: E501
        :rtype: list[ListMembers]
        """
        return self._members_removed

    @members_removed.setter
    def members_removed(self, members_removed):
        """Sets the members_removed of this BatchAddremoveListMembersTofromStaticSegment.

        An array of objects, each representing an existing list member that got deleted from the static segment.  # noqa: E501

        :param members_removed: The members_removed of this BatchAddremoveListMembersTofromStaticSegment.  # noqa: E501
        :type: list[ListMembers]
        """

        self._members_removed = members_removed

    @property
    def errors(self):
        """Gets the errors of this BatchAddremoveListMembersTofromStaticSegment.  # noqa: E501

        An array of objects, each representing an array of email addresses that could not be added to the segment or removed and an error message providing more details.  # noqa: E501

        :return: The errors of this BatchAddremoveListMembersTofromStaticSegment.  # noqa: E501
        :rtype: list[BatchAddremoveListMembersTofromStaticSegmentErrors]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this BatchAddremoveListMembersTofromStaticSegment.

        An array of objects, each representing an array of email addresses that could not be added to the segment or removed and an error message providing more details.  # noqa: E501

        :param errors: The errors of this BatchAddremoveListMembersTofromStaticSegment.  # noqa: E501
        :type: list[BatchAddremoveListMembersTofromStaticSegmentErrors]
        """

        self._errors = errors

    @property
    def total_added(self):
        """Gets the total_added of this BatchAddremoveListMembersTofromStaticSegment.  # noqa: E501

        The total number of items matching the query, irrespective of pagination.  # noqa: E501

        :return: The total_added of this BatchAddremoveListMembersTofromStaticSegment.  # noqa: E501
        :rtype: int
        """
        return self._total_added

    @total_added.setter
    def total_added(self, total_added):
        """Sets the total_added of this BatchAddremoveListMembersTofromStaticSegment.

        The total number of items matching the query, irrespective of pagination.  # noqa: E501

        :param total_added: The total_added of this BatchAddremoveListMembersTofromStaticSegment.  # noqa: E501
        :type: int
        """

        self._total_added = total_added

    @property
    def total_removed(self):
        """Gets the total_removed of this BatchAddremoveListMembersTofromStaticSegment.  # noqa: E501

        The total number of items matching the query, irrespective of pagination.  # noqa: E501

        :return: The total_removed of this BatchAddremoveListMembersTofromStaticSegment.  # noqa: E501
        :rtype: int
        """
        return self._total_removed

    @total_removed.setter
    def total_removed(self, total_removed):
        """Sets the total_removed of this BatchAddremoveListMembersTofromStaticSegment.

        The total number of items matching the query, irrespective of pagination.  # noqa: E501

        :param total_removed: The total_removed of this BatchAddremoveListMembersTofromStaticSegment.  # noqa: E501
        :type: int
        """

        self._total_removed = total_removed

    @property
    def error_count(self):
        """Gets the error_count of this BatchAddremoveListMembersTofromStaticSegment.  # noqa: E501

        The total number of items matching the query, irrespective of pagination.  # noqa: E501

        :return: The error_count of this BatchAddremoveListMembersTofromStaticSegment.  # noqa: E501
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this BatchAddremoveListMembersTofromStaticSegment.

        The total number of items matching the query, irrespective of pagination.  # noqa: E501

        :param error_count: The error_count of this BatchAddremoveListMembersTofromStaticSegment.  # noqa: E501
        :type: int
        """

        self._error_count = error_count

    @property
    def links(self):
        """Gets the links of this BatchAddremoveListMembersTofromStaticSegment.  # noqa: E501

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :return: The links of this BatchAddremoveListMembersTofromStaticSegment.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this BatchAddremoveListMembersTofromStaticSegment.

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :param links: The links of this BatchAddremoveListMembersTofromStaticSegment.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchAddremoveListMembersTofromStaticSegment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchAddremoveListMembersTofromStaticSegment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
