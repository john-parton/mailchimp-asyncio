# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Body1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schedule_time': 'datetime',
        'timewarp': 'bool',
        'batch_delivery': 'BatchDelivery'
    }

    attribute_map = {
        'schedule_time': 'schedule_time',
        'timewarp': 'timewarp',
        'batch_delivery': 'batch_delivery'
    }

    def __init__(self, schedule_time=None, timewarp=None, batch_delivery=None):  # noqa: E501
        """Body1 - a model defined in Swagger"""  # noqa: E501

        self._schedule_time = None
        self._timewarp = None
        self._batch_delivery = None
        self.discriminator = None

        self.schedule_time = schedule_time
        if timewarp is not None:
            self.timewarp = timewarp
        if batch_delivery is not None:
            self.batch_delivery = batch_delivery

    @property
    def schedule_time(self):
        """Gets the schedule_time of this Body1.  # noqa: E501

        The UTC date and time to schedule the campaign for delivery in ISO 8601 format. Campaigns may only be scheduled to send on the quarter-hour (:00, :15, :30, :45).  # noqa: E501

        :return: The schedule_time of this Body1.  # noqa: E501
        :rtype: datetime
        """
        return self._schedule_time

    @schedule_time.setter
    def schedule_time(self, schedule_time):
        """Sets the schedule_time of this Body1.

        The UTC date and time to schedule the campaign for delivery in ISO 8601 format. Campaigns may only be scheduled to send on the quarter-hour (:00, :15, :30, :45).  # noqa: E501

        :param schedule_time: The schedule_time of this Body1.  # noqa: E501
        :type: datetime
        """
        if schedule_time is None:
            raise ValueError("Invalid value for `schedule_time`, must not be `None`")  # noqa: E501

        self._schedule_time = schedule_time

    @property
    def timewarp(self):
        """Gets the timewarp of this Body1.  # noqa: E501

        Choose whether the campaign should use [Timewarp](https://mailchimp.com/help/use-timewarp/) when sending. Campaigns scheduled with Timewarp are localized based on the recipients' time zones. For example, a Timewarp campaign with a `schedule_time` of 13:00 will be sent to each recipient at 1:00pm in their local time. Cannot be set to `true` for campaigns using [Batch Delivery](https://mailchimp.com/help/schedule-batch-delivery/).  # noqa: E501

        :return: The timewarp of this Body1.  # noqa: E501
        :rtype: bool
        """
        return self._timewarp

    @timewarp.setter
    def timewarp(self, timewarp):
        """Sets the timewarp of this Body1.

        Choose whether the campaign should use [Timewarp](https://mailchimp.com/help/use-timewarp/) when sending. Campaigns scheduled with Timewarp are localized based on the recipients' time zones. For example, a Timewarp campaign with a `schedule_time` of 13:00 will be sent to each recipient at 1:00pm in their local time. Cannot be set to `true` for campaigns using [Batch Delivery](https://mailchimp.com/help/schedule-batch-delivery/).  # noqa: E501

        :param timewarp: The timewarp of this Body1.  # noqa: E501
        :type: bool
        """

        self._timewarp = timewarp

    @property
    def batch_delivery(self):
        """Gets the batch_delivery of this Body1.  # noqa: E501


        :return: The batch_delivery of this Body1.  # noqa: E501
        :rtype: BatchDelivery
        """
        return self._batch_delivery

    @batch_delivery.setter
    def batch_delivery(self, batch_delivery):
        """Sets the batch_delivery of this Body1.


        :param batch_delivery: The batch_delivery of this Body1.  # noqa: E501
        :type: BatchDelivery
        """

        self._batch_delivery = batch_delivery

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
