# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SubscriberList2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'contact': 'ListContact2',
        'permission_reminder': 'str',
        'use_archive_bar': 'bool',
        'campaign_defaults': 'CampaignDefaults1',
        'notify_on_subscribe': 'str',
        'notify_on_unsubscribe': 'str',
        'email_type_option': 'bool',
        'double_optin': 'bool',
        'marketing_permissions': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'contact': 'contact',
        'permission_reminder': 'permission_reminder',
        'use_archive_bar': 'use_archive_bar',
        'campaign_defaults': 'campaign_defaults',
        'notify_on_subscribe': 'notify_on_subscribe',
        'notify_on_unsubscribe': 'notify_on_unsubscribe',
        'email_type_option': 'email_type_option',
        'double_optin': 'double_optin',
        'marketing_permissions': 'marketing_permissions'
    }

    def __init__(self, name=None, contact=None, permission_reminder=None, use_archive_bar=False, campaign_defaults=None, notify_on_subscribe='false', notify_on_unsubscribe='false', email_type_option=None, double_optin=False, marketing_permissions=False):  # noqa: E501
        """SubscriberList2 - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._contact = None
        self._permission_reminder = None
        self._use_archive_bar = None
        self._campaign_defaults = None
        self._notify_on_subscribe = None
        self._notify_on_unsubscribe = None
        self._email_type_option = None
        self._double_optin = None
        self._marketing_permissions = None
        self.discriminator = None

        self.name = name
        self.contact = contact
        self.permission_reminder = permission_reminder
        if use_archive_bar is not None:
            self.use_archive_bar = use_archive_bar
        self.campaign_defaults = campaign_defaults
        if notify_on_subscribe is not None:
            self.notify_on_subscribe = notify_on_subscribe
        if notify_on_unsubscribe is not None:
            self.notify_on_unsubscribe = notify_on_unsubscribe
        self.email_type_option = email_type_option
        if double_optin is not None:
            self.double_optin = double_optin
        if marketing_permissions is not None:
            self.marketing_permissions = marketing_permissions

    @property
    def name(self):
        """Gets the name of this SubscriberList2.  # noqa: E501

        The name of the list.  # noqa: E501

        :return: The name of this SubscriberList2.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubscriberList2.

        The name of the list.  # noqa: E501

        :param name: The name of this SubscriberList2.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def contact(self):
        """Gets the contact of this SubscriberList2.  # noqa: E501


        :return: The contact of this SubscriberList2.  # noqa: E501
        :rtype: ListContact2
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this SubscriberList2.


        :param contact: The contact of this SubscriberList2.  # noqa: E501
        :type: ListContact2
        """
        if contact is None:
            raise ValueError("Invalid value for `contact`, must not be `None`")  # noqa: E501

        self._contact = contact

    @property
    def permission_reminder(self):
        """Gets the permission_reminder of this SubscriberList2.  # noqa: E501

        The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list.  # noqa: E501

        :return: The permission_reminder of this SubscriberList2.  # noqa: E501
        :rtype: str
        """
        return self._permission_reminder

    @permission_reminder.setter
    def permission_reminder(self, permission_reminder):
        """Sets the permission_reminder of this SubscriberList2.

        The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list.  # noqa: E501

        :param permission_reminder: The permission_reminder of this SubscriberList2.  # noqa: E501
        :type: str
        """
        if permission_reminder is None:
            raise ValueError("Invalid value for `permission_reminder`, must not be `None`")  # noqa: E501

        self._permission_reminder = permission_reminder

    @property
    def use_archive_bar(self):
        """Gets the use_archive_bar of this SubscriberList2.  # noqa: E501

        Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default.  # noqa: E501

        :return: The use_archive_bar of this SubscriberList2.  # noqa: E501
        :rtype: bool
        """
        return self._use_archive_bar

    @use_archive_bar.setter
    def use_archive_bar(self, use_archive_bar):
        """Sets the use_archive_bar of this SubscriberList2.

        Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default.  # noqa: E501

        :param use_archive_bar: The use_archive_bar of this SubscriberList2.  # noqa: E501
        :type: bool
        """

        self._use_archive_bar = use_archive_bar

    @property
    def campaign_defaults(self):
        """Gets the campaign_defaults of this SubscriberList2.  # noqa: E501


        :return: The campaign_defaults of this SubscriberList2.  # noqa: E501
        :rtype: CampaignDefaults1
        """
        return self._campaign_defaults

    @campaign_defaults.setter
    def campaign_defaults(self, campaign_defaults):
        """Sets the campaign_defaults of this SubscriberList2.


        :param campaign_defaults: The campaign_defaults of this SubscriberList2.  # noqa: E501
        :type: CampaignDefaults1
        """
        if campaign_defaults is None:
            raise ValueError("Invalid value for `campaign_defaults`, must not be `None`")  # noqa: E501

        self._campaign_defaults = campaign_defaults

    @property
    def notify_on_subscribe(self):
        """Gets the notify_on_subscribe of this SubscriberList2.  # noqa: E501

        The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.  # noqa: E501

        :return: The notify_on_subscribe of this SubscriberList2.  # noqa: E501
        :rtype: str
        """
        return self._notify_on_subscribe

    @notify_on_subscribe.setter
    def notify_on_subscribe(self, notify_on_subscribe):
        """Sets the notify_on_subscribe of this SubscriberList2.

        The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.  # noqa: E501

        :param notify_on_subscribe: The notify_on_subscribe of this SubscriberList2.  # noqa: E501
        :type: str
        """

        self._notify_on_subscribe = notify_on_subscribe

    @property
    def notify_on_unsubscribe(self):
        """Gets the notify_on_unsubscribe of this SubscriberList2.  # noqa: E501

        The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.  # noqa: E501

        :return: The notify_on_unsubscribe of this SubscriberList2.  # noqa: E501
        :rtype: str
        """
        return self._notify_on_unsubscribe

    @notify_on_unsubscribe.setter
    def notify_on_unsubscribe(self, notify_on_unsubscribe):
        """Sets the notify_on_unsubscribe of this SubscriberList2.

        The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.  # noqa: E501

        :param notify_on_unsubscribe: The notify_on_unsubscribe of this SubscriberList2.  # noqa: E501
        :type: str
        """

        self._notify_on_unsubscribe = notify_on_unsubscribe

    @property
    def email_type_option(self):
        """Gets the email_type_option of this SubscriberList2.  # noqa: E501

        Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup.  # noqa: E501

        :return: The email_type_option of this SubscriberList2.  # noqa: E501
        :rtype: bool
        """
        return self._email_type_option

    @email_type_option.setter
    def email_type_option(self, email_type_option):
        """Sets the email_type_option of this SubscriberList2.

        Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup.  # noqa: E501

        :param email_type_option: The email_type_option of this SubscriberList2.  # noqa: E501
        :type: bool
        """
        if email_type_option is None:
            raise ValueError("Invalid value for `email_type_option`, must not be `None`")  # noqa: E501

        self._email_type_option = email_type_option

    @property
    def double_optin(self):
        """Gets the double_optin of this SubscriberList2.  # noqa: E501

        Whether or not to require the subscriber to confirm subscription via email.  # noqa: E501

        :return: The double_optin of this SubscriberList2.  # noqa: E501
        :rtype: bool
        """
        return self._double_optin

    @double_optin.setter
    def double_optin(self, double_optin):
        """Sets the double_optin of this SubscriberList2.

        Whether or not to require the subscriber to confirm subscription via email.  # noqa: E501

        :param double_optin: The double_optin of this SubscriberList2.  # noqa: E501
        :type: bool
        """

        self._double_optin = double_optin

    @property
    def marketing_permissions(self):
        """Gets the marketing_permissions of this SubscriberList2.  # noqa: E501

        Whether or not the list has marketing permissions (eg. GDPR) enabled.  # noqa: E501

        :return: The marketing_permissions of this SubscriberList2.  # noqa: E501
        :rtype: bool
        """
        return self._marketing_permissions

    @marketing_permissions.setter
    def marketing_permissions(self, marketing_permissions):
        """Sets the marketing_permissions of this SubscriberList2.

        Whether or not the list has marketing permissions (eg. GDPR) enabled.  # noqa: E501

        :param marketing_permissions: The marketing_permissions of this SubscriberList2.  # noqa: E501
        :type: bool
        """

        self._marketing_permissions = marketing_permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriberList2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriberList2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
