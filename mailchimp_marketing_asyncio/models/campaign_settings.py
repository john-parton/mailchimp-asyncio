# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CampaignSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject_line': 'str',
        'preview_text': 'str',
        'title': 'str',
        'from_name': 'str',
        'reply_to': 'str',
        'authenticate': 'bool',
        'auto_footer': 'bool',
        'inline_css': 'bool',
        'auto_tweet': 'bool',
        'auto_fb_post': 'list[str]',
        'fb_comments': 'bool',
        'template_id': 'int',
        'drag_and_drop': 'bool'
    }

    attribute_map = {
        'subject_line': 'subject_line',
        'preview_text': 'preview_text',
        'title': 'title',
        'from_name': 'from_name',
        'reply_to': 'reply_to',
        'authenticate': 'authenticate',
        'auto_footer': 'auto_footer',
        'inline_css': 'inline_css',
        'auto_tweet': 'auto_tweet',
        'auto_fb_post': 'auto_fb_post',
        'fb_comments': 'fb_comments',
        'template_id': 'template_id',
        'drag_and_drop': 'drag_and_drop'
    }

    def __init__(self, subject_line=None, preview_text=None, title=None, from_name=None, reply_to=None, authenticate=None, auto_footer=None, inline_css=None, auto_tweet=None, auto_fb_post=None, fb_comments=None, template_id=None, drag_and_drop=None):  # noqa: E501
        """CampaignSettings - a model defined in Swagger"""  # noqa: E501

        self._subject_line = None
        self._preview_text = None
        self._title = None
        self._from_name = None
        self._reply_to = None
        self._authenticate = None
        self._auto_footer = None
        self._inline_css = None
        self._auto_tweet = None
        self._auto_fb_post = None
        self._fb_comments = None
        self._template_id = None
        self._drag_and_drop = None
        self.discriminator = None

        if subject_line is not None:
            self.subject_line = subject_line
        if preview_text is not None:
            self.preview_text = preview_text
        if title is not None:
            self.title = title
        if from_name is not None:
            self.from_name = from_name
        if reply_to is not None:
            self.reply_to = reply_to
        if authenticate is not None:
            self.authenticate = authenticate
        if auto_footer is not None:
            self.auto_footer = auto_footer
        if inline_css is not None:
            self.inline_css = inline_css
        if auto_tweet is not None:
            self.auto_tweet = auto_tweet
        if auto_fb_post is not None:
            self.auto_fb_post = auto_fb_post
        if fb_comments is not None:
            self.fb_comments = fb_comments
        if template_id is not None:
            self.template_id = template_id
        if drag_and_drop is not None:
            self.drag_and_drop = drag_and_drop

    @property
    def subject_line(self):
        """Gets the subject_line of this CampaignSettings.  # noqa: E501

        The subject line for the campaign.  # noqa: E501

        :return: The subject_line of this CampaignSettings.  # noqa: E501
        :rtype: str
        """
        return self._subject_line

    @subject_line.setter
    def subject_line(self, subject_line):
        """Sets the subject_line of this CampaignSettings.

        The subject line for the campaign.  # noqa: E501

        :param subject_line: The subject_line of this CampaignSettings.  # noqa: E501
        :type: str
        """

        self._subject_line = subject_line

    @property
    def preview_text(self):
        """Gets the preview_text of this CampaignSettings.  # noqa: E501

        The preview text for the campaign.  # noqa: E501

        :return: The preview_text of this CampaignSettings.  # noqa: E501
        :rtype: str
        """
        return self._preview_text

    @preview_text.setter
    def preview_text(self, preview_text):
        """Sets the preview_text of this CampaignSettings.

        The preview text for the campaign.  # noqa: E501

        :param preview_text: The preview_text of this CampaignSettings.  # noqa: E501
        :type: str
        """

        self._preview_text = preview_text

    @property
    def title(self):
        """Gets the title of this CampaignSettings.  # noqa: E501

        The title of the campaign.  # noqa: E501

        :return: The title of this CampaignSettings.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CampaignSettings.

        The title of the campaign.  # noqa: E501

        :param title: The title of this CampaignSettings.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def from_name(self):
        """Gets the from_name of this CampaignSettings.  # noqa: E501

        The 'from' name on the campaign (not an email address).  # noqa: E501

        :return: The from_name of this CampaignSettings.  # noqa: E501
        :rtype: str
        """
        return self._from_name

    @from_name.setter
    def from_name(self, from_name):
        """Sets the from_name of this CampaignSettings.

        The 'from' name on the campaign (not an email address).  # noqa: E501

        :param from_name: The from_name of this CampaignSettings.  # noqa: E501
        :type: str
        """

        self._from_name = from_name

    @property
    def reply_to(self):
        """Gets the reply_to of this CampaignSettings.  # noqa: E501

        The reply-to email address for the campaign.  # noqa: E501

        :return: The reply_to of this CampaignSettings.  # noqa: E501
        :rtype: str
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this CampaignSettings.

        The reply-to email address for the campaign.  # noqa: E501

        :param reply_to: The reply_to of this CampaignSettings.  # noqa: E501
        :type: str
        """

        self._reply_to = reply_to

    @property
    def authenticate(self):
        """Gets the authenticate of this CampaignSettings.  # noqa: E501

        Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`.  # noqa: E501

        :return: The authenticate of this CampaignSettings.  # noqa: E501
        :rtype: bool
        """
        return self._authenticate

    @authenticate.setter
    def authenticate(self, authenticate):
        """Sets the authenticate of this CampaignSettings.

        Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`.  # noqa: E501

        :param authenticate: The authenticate of this CampaignSettings.  # noqa: E501
        :type: bool
        """

        self._authenticate = authenticate

    @property
    def auto_footer(self):
        """Gets the auto_footer of this CampaignSettings.  # noqa: E501

        Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign.  # noqa: E501

        :return: The auto_footer of this CampaignSettings.  # noqa: E501
        :rtype: bool
        """
        return self._auto_footer

    @auto_footer.setter
    def auto_footer(self, auto_footer):
        """Sets the auto_footer of this CampaignSettings.

        Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign.  # noqa: E501

        :param auto_footer: The auto_footer of this CampaignSettings.  # noqa: E501
        :type: bool
        """

        self._auto_footer = auto_footer

    @property
    def inline_css(self):
        """Gets the inline_css of this CampaignSettings.  # noqa: E501

        Automatically inline the CSS included with the campaign content.  # noqa: E501

        :return: The inline_css of this CampaignSettings.  # noqa: E501
        :rtype: bool
        """
        return self._inline_css

    @inline_css.setter
    def inline_css(self, inline_css):
        """Sets the inline_css of this CampaignSettings.

        Automatically inline the CSS included with the campaign content.  # noqa: E501

        :param inline_css: The inline_css of this CampaignSettings.  # noqa: E501
        :type: bool
        """

        self._inline_css = inline_css

    @property
    def auto_tweet(self):
        """Gets the auto_tweet of this CampaignSettings.  # noqa: E501

        Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent.  # noqa: E501

        :return: The auto_tweet of this CampaignSettings.  # noqa: E501
        :rtype: bool
        """
        return self._auto_tweet

    @auto_tweet.setter
    def auto_tweet(self, auto_tweet):
        """Sets the auto_tweet of this CampaignSettings.

        Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent.  # noqa: E501

        :param auto_tweet: The auto_tweet of this CampaignSettings.  # noqa: E501
        :type: bool
        """

        self._auto_tweet = auto_tweet

    @property
    def auto_fb_post(self):
        """Gets the auto_fb_post of this CampaignSettings.  # noqa: E501

        An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to.  # noqa: E501

        :return: The auto_fb_post of this CampaignSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._auto_fb_post

    @auto_fb_post.setter
    def auto_fb_post(self, auto_fb_post):
        """Sets the auto_fb_post of this CampaignSettings.

        An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to.  # noqa: E501

        :param auto_fb_post: The auto_fb_post of this CampaignSettings.  # noqa: E501
        :type: list[str]
        """

        self._auto_fb_post = auto_fb_post

    @property
    def fb_comments(self):
        """Gets the fb_comments of this CampaignSettings.  # noqa: E501

        Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`.  # noqa: E501

        :return: The fb_comments of this CampaignSettings.  # noqa: E501
        :rtype: bool
        """
        return self._fb_comments

    @fb_comments.setter
    def fb_comments(self, fb_comments):
        """Sets the fb_comments of this CampaignSettings.

        Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`.  # noqa: E501

        :param fb_comments: The fb_comments of this CampaignSettings.  # noqa: E501
        :type: bool
        """

        self._fb_comments = fb_comments

    @property
    def template_id(self):
        """Gets the template_id of this CampaignSettings.  # noqa: E501

        The id for the template used in this campaign.  # noqa: E501

        :return: The template_id of this CampaignSettings.  # noqa: E501
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this CampaignSettings.

        The id for the template used in this campaign.  # noqa: E501

        :param template_id: The template_id of this CampaignSettings.  # noqa: E501
        :type: int
        """

        self._template_id = template_id

    @property
    def drag_and_drop(self):
        """Gets the drag_and_drop of this CampaignSettings.  # noqa: E501

        Whether the campaign uses the drag-and-drop editor.  # noqa: E501

        :return: The drag_and_drop of this CampaignSettings.  # noqa: E501
        :rtype: bool
        """
        return self._drag_and_drop

    @drag_and_drop.setter
    def drag_and_drop(self, drag_and_drop):
        """Sets the drag_and_drop of this CampaignSettings.

        Whether the campaign uses the drag-and-drop editor.  # noqa: E501

        :param drag_and_drop: The drag_and_drop of this CampaignSettings.  # noqa: E501
        :type: bool
        """

        self._drag_and_drop = drag_and_drop

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CampaignSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
