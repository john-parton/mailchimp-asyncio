# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CampaignReportSummary2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'opens': 'int',
        'unique_opens': 'int',
        'open_rate': 'float',
        'clicks': 'int',
        'subscriber_clicks': 'int',
        'click_rate': 'float',
        'ecommerce': 'ECommerceReport'
    }

    attribute_map = {
        'opens': 'opens',
        'unique_opens': 'unique_opens',
        'open_rate': 'open_rate',
        'clicks': 'clicks',
        'subscriber_clicks': 'subscriber_clicks',
        'click_rate': 'click_rate',
        'ecommerce': 'ecommerce'
    }

    def __init__(self, opens=None, unique_opens=None, open_rate=None, clicks=None, subscriber_clicks=None, click_rate=None, ecommerce=None):  # noqa: E501
        """CampaignReportSummary2 - a model defined in Swagger"""  # noqa: E501

        self._opens = None
        self._unique_opens = None
        self._open_rate = None
        self._clicks = None
        self._subscriber_clicks = None
        self._click_rate = None
        self._ecommerce = None
        self.discriminator = None

        if opens is not None:
            self.opens = opens
        if unique_opens is not None:
            self.unique_opens = unique_opens
        if open_rate is not None:
            self.open_rate = open_rate
        if clicks is not None:
            self.clicks = clicks
        if subscriber_clicks is not None:
            self.subscriber_clicks = subscriber_clicks
        if click_rate is not None:
            self.click_rate = click_rate
        if ecommerce is not None:
            self.ecommerce = ecommerce

    @property
    def opens(self):
        """Gets the opens of this CampaignReportSummary2.  # noqa: E501

        The total number of opens for a campaign.  # noqa: E501

        :return: The opens of this CampaignReportSummary2.  # noqa: E501
        :rtype: int
        """
        return self._opens

    @opens.setter
    def opens(self, opens):
        """Sets the opens of this CampaignReportSummary2.

        The total number of opens for a campaign.  # noqa: E501

        :param opens: The opens of this CampaignReportSummary2.  # noqa: E501
        :type: int
        """

        self._opens = opens

    @property
    def unique_opens(self):
        """Gets the unique_opens of this CampaignReportSummary2.  # noqa: E501

        The number of unique opens.  # noqa: E501

        :return: The unique_opens of this CampaignReportSummary2.  # noqa: E501
        :rtype: int
        """
        return self._unique_opens

    @unique_opens.setter
    def unique_opens(self, unique_opens):
        """Sets the unique_opens of this CampaignReportSummary2.

        The number of unique opens.  # noqa: E501

        :param unique_opens: The unique_opens of this CampaignReportSummary2.  # noqa: E501
        :type: int
        """

        self._unique_opens = unique_opens

    @property
    def open_rate(self):
        """Gets the open_rate of this CampaignReportSummary2.  # noqa: E501

        The number of unique opens divided by the total number of successful deliveries.  # noqa: E501

        :return: The open_rate of this CampaignReportSummary2.  # noqa: E501
        :rtype: float
        """
        return self._open_rate

    @open_rate.setter
    def open_rate(self, open_rate):
        """Sets the open_rate of this CampaignReportSummary2.

        The number of unique opens divided by the total number of successful deliveries.  # noqa: E501

        :param open_rate: The open_rate of this CampaignReportSummary2.  # noqa: E501
        :type: float
        """

        self._open_rate = open_rate

    @property
    def clicks(self):
        """Gets the clicks of this CampaignReportSummary2.  # noqa: E501

        The total number of clicks for an campaign.  # noqa: E501

        :return: The clicks of this CampaignReportSummary2.  # noqa: E501
        :rtype: int
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this CampaignReportSummary2.

        The total number of clicks for an campaign.  # noqa: E501

        :param clicks: The clicks of this CampaignReportSummary2.  # noqa: E501
        :type: int
        """

        self._clicks = clicks

    @property
    def subscriber_clicks(self):
        """Gets the subscriber_clicks of this CampaignReportSummary2.  # noqa: E501

        The number of unique clicks.  # noqa: E501

        :return: The subscriber_clicks of this CampaignReportSummary2.  # noqa: E501
        :rtype: int
        """
        return self._subscriber_clicks

    @subscriber_clicks.setter
    def subscriber_clicks(self, subscriber_clicks):
        """Sets the subscriber_clicks of this CampaignReportSummary2.

        The number of unique clicks.  # noqa: E501

        :param subscriber_clicks: The subscriber_clicks of this CampaignReportSummary2.  # noqa: E501
        :type: int
        """

        self._subscriber_clicks = subscriber_clicks

    @property
    def click_rate(self):
        """Gets the click_rate of this CampaignReportSummary2.  # noqa: E501

        The number of unique clicks divided by the total number of successful deliveries.  # noqa: E501

        :return: The click_rate of this CampaignReportSummary2.  # noqa: E501
        :rtype: float
        """
        return self._click_rate

    @click_rate.setter
    def click_rate(self, click_rate):
        """Sets the click_rate of this CampaignReportSummary2.

        The number of unique clicks divided by the total number of successful deliveries.  # noqa: E501

        :param click_rate: The click_rate of this CampaignReportSummary2.  # noqa: E501
        :type: float
        """

        self._click_rate = click_rate

    @property
    def ecommerce(self):
        """Gets the ecommerce of this CampaignReportSummary2.  # noqa: E501


        :return: The ecommerce of this CampaignReportSummary2.  # noqa: E501
        :rtype: ECommerceReport
        """
        return self._ecommerce

    @ecommerce.setter
    def ecommerce(self, ecommerce):
        """Sets the ecommerce of this CampaignReportSummary2.


        :param ecommerce: The ecommerce of this CampaignReportSummary2.  # noqa: E501
        :type: ECommerceReport
        """

        self._ecommerce = ecommerce

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CampaignReportSummary2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignReportSummary2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
