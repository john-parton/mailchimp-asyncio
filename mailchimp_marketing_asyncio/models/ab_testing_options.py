# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ABTestingOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'split_test': 'str',
        'pick_winner': 'str',
        'wait_units': 'str',
        'wait_time': 'int',
        'split_size': 'int',
        'from_name_a': 'str',
        'from_name_b': 'str',
        'reply_email_a': 'str',
        'reply_email_b': 'str',
        'subject_a': 'str',
        'subject_b': 'str',
        'send_time_a': 'datetime',
        'send_time_b': 'datetime',
        'send_time_winner': 'str'
    }

    attribute_map = {
        'split_test': 'split_test',
        'pick_winner': 'pick_winner',
        'wait_units': 'wait_units',
        'wait_time': 'wait_time',
        'split_size': 'split_size',
        'from_name_a': 'from_name_a',
        'from_name_b': 'from_name_b',
        'reply_email_a': 'reply_email_a',
        'reply_email_b': 'reply_email_b',
        'subject_a': 'subject_a',
        'subject_b': 'subject_b',
        'send_time_a': 'send_time_a',
        'send_time_b': 'send_time_b',
        'send_time_winner': 'send_time_winner'
    }

    def __init__(self, split_test=None, pick_winner=None, wait_units=None, wait_time=None, split_size=None, from_name_a=None, from_name_b=None, reply_email_a=None, reply_email_b=None, subject_a=None, subject_b=None, send_time_a=None, send_time_b=None, send_time_winner=None):  # noqa: E501
        """ABTestingOptions - a model defined in Swagger"""  # noqa: E501

        self._split_test = None
        self._pick_winner = None
        self._wait_units = None
        self._wait_time = None
        self._split_size = None
        self._from_name_a = None
        self._from_name_b = None
        self._reply_email_a = None
        self._reply_email_b = None
        self._subject_a = None
        self._subject_b = None
        self._send_time_a = None
        self._send_time_b = None
        self._send_time_winner = None
        self.discriminator = None

        if split_test is not None:
            self.split_test = split_test
        if pick_winner is not None:
            self.pick_winner = pick_winner
        if wait_units is not None:
            self.wait_units = wait_units
        if wait_time is not None:
            self.wait_time = wait_time
        if split_size is not None:
            self.split_size = split_size
        if from_name_a is not None:
            self.from_name_a = from_name_a
        if from_name_b is not None:
            self.from_name_b = from_name_b
        if reply_email_a is not None:
            self.reply_email_a = reply_email_a
        if reply_email_b is not None:
            self.reply_email_b = reply_email_b
        if subject_a is not None:
            self.subject_a = subject_a
        if subject_b is not None:
            self.subject_b = subject_b
        if send_time_a is not None:
            self.send_time_a = send_time_a
        if send_time_b is not None:
            self.send_time_b = send_time_b
        if send_time_winner is not None:
            self.send_time_winner = send_time_winner

    @property
    def split_test(self):
        """Gets the split_test of this ABTestingOptions.  # noqa: E501

        The type of AB split to run.  # noqa: E501

        :return: The split_test of this ABTestingOptions.  # noqa: E501
        :rtype: str
        """
        return self._split_test

    @split_test.setter
    def split_test(self, split_test):
        """Sets the split_test of this ABTestingOptions.

        The type of AB split to run.  # noqa: E501

        :param split_test: The split_test of this ABTestingOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["subject", "from_name", "schedule"]  # noqa: E501
        if split_test not in allowed_values:
            raise ValueError(
                "Invalid value for `split_test` ({0}), must be one of {1}"  # noqa: E501
                .format(split_test, allowed_values)
            )

        self._split_test = split_test

    @property
    def pick_winner(self):
        """Gets the pick_winner of this ABTestingOptions.  # noqa: E501

        How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'.  # noqa: E501

        :return: The pick_winner of this ABTestingOptions.  # noqa: E501
        :rtype: str
        """
        return self._pick_winner

    @pick_winner.setter
    def pick_winner(self, pick_winner):
        """Sets the pick_winner of this ABTestingOptions.

        How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'.  # noqa: E501

        :param pick_winner: The pick_winner of this ABTestingOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["opens", "clicks", "manual"]  # noqa: E501
        if pick_winner not in allowed_values:
            raise ValueError(
                "Invalid value for `pick_winner` ({0}), must be one of {1}"  # noqa: E501
                .format(pick_winner, allowed_values)
            )

        self._pick_winner = pick_winner

    @property
    def wait_units(self):
        """Gets the wait_units of this ABTestingOptions.  # noqa: E501

        How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent.  # noqa: E501

        :return: The wait_units of this ABTestingOptions.  # noqa: E501
        :rtype: str
        """
        return self._wait_units

    @wait_units.setter
    def wait_units(self, wait_units):
        """Sets the wait_units of this ABTestingOptions.

        How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent.  # noqa: E501

        :param wait_units: The wait_units of this ABTestingOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["hours", "days"]  # noqa: E501
        if wait_units not in allowed_values:
            raise ValueError(
                "Invalid value for `wait_units` ({0}), must be one of {1}"  # noqa: E501
                .format(wait_units, allowed_values)
            )

        self._wait_units = wait_units

    @property
    def wait_time(self):
        """Gets the wait_time of this ABTestingOptions.  # noqa: E501

        The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent.  # noqa: E501

        :return: The wait_time of this ABTestingOptions.  # noqa: E501
        :rtype: int
        """
        return self._wait_time

    @wait_time.setter
    def wait_time(self, wait_time):
        """Sets the wait_time of this ABTestingOptions.

        The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent.  # noqa: E501

        :param wait_time: The wait_time of this ABTestingOptions.  # noqa: E501
        :type: int
        """

        self._wait_time = wait_time

    @property
    def split_size(self):
        """Gets the split_size of this ABTestingOptions.  # noqa: E501

        The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.  # noqa: E501

        :return: The split_size of this ABTestingOptions.  # noqa: E501
        :rtype: int
        """
        return self._split_size

    @split_size.setter
    def split_size(self, split_size):
        """Sets the split_size of this ABTestingOptions.

        The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.  # noqa: E501

        :param split_size: The split_size of this ABTestingOptions.  # noqa: E501
        :type: int
        """
        if split_size is not None and split_size > 50:  # noqa: E501
            raise ValueError("Invalid value for `split_size`, must be a value less than or equal to `50`")  # noqa: E501
        if split_size is not None and split_size < 1:  # noqa: E501
            raise ValueError("Invalid value for `split_size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._split_size = split_size

    @property
    def from_name_a(self):
        """Gets the from_name_a of this ABTestingOptions.  # noqa: E501

        For campaigns split on 'From Name', the name for Group A.  # noqa: E501

        :return: The from_name_a of this ABTestingOptions.  # noqa: E501
        :rtype: str
        """
        return self._from_name_a

    @from_name_a.setter
    def from_name_a(self, from_name_a):
        """Sets the from_name_a of this ABTestingOptions.

        For campaigns split on 'From Name', the name for Group A.  # noqa: E501

        :param from_name_a: The from_name_a of this ABTestingOptions.  # noqa: E501
        :type: str
        """

        self._from_name_a = from_name_a

    @property
    def from_name_b(self):
        """Gets the from_name_b of this ABTestingOptions.  # noqa: E501

        For campaigns split on 'From Name', the name for Group B.  # noqa: E501

        :return: The from_name_b of this ABTestingOptions.  # noqa: E501
        :rtype: str
        """
        return self._from_name_b

    @from_name_b.setter
    def from_name_b(self, from_name_b):
        """Sets the from_name_b of this ABTestingOptions.

        For campaigns split on 'From Name', the name for Group B.  # noqa: E501

        :param from_name_b: The from_name_b of this ABTestingOptions.  # noqa: E501
        :type: str
        """

        self._from_name_b = from_name_b

    @property
    def reply_email_a(self):
        """Gets the reply_email_a of this ABTestingOptions.  # noqa: E501

        For campaigns split on 'From Name', the reply-to address for Group A.  # noqa: E501

        :return: The reply_email_a of this ABTestingOptions.  # noqa: E501
        :rtype: str
        """
        return self._reply_email_a

    @reply_email_a.setter
    def reply_email_a(self, reply_email_a):
        """Sets the reply_email_a of this ABTestingOptions.

        For campaigns split on 'From Name', the reply-to address for Group A.  # noqa: E501

        :param reply_email_a: The reply_email_a of this ABTestingOptions.  # noqa: E501
        :type: str
        """

        self._reply_email_a = reply_email_a

    @property
    def reply_email_b(self):
        """Gets the reply_email_b of this ABTestingOptions.  # noqa: E501

        For campaigns split on 'From Name', the reply-to address for Group B.  # noqa: E501

        :return: The reply_email_b of this ABTestingOptions.  # noqa: E501
        :rtype: str
        """
        return self._reply_email_b

    @reply_email_b.setter
    def reply_email_b(self, reply_email_b):
        """Sets the reply_email_b of this ABTestingOptions.

        For campaigns split on 'From Name', the reply-to address for Group B.  # noqa: E501

        :param reply_email_b: The reply_email_b of this ABTestingOptions.  # noqa: E501
        :type: str
        """

        self._reply_email_b = reply_email_b

    @property
    def subject_a(self):
        """Gets the subject_a of this ABTestingOptions.  # noqa: E501

        For campaigns split on 'Subject Line', the subject line for Group A.  # noqa: E501

        :return: The subject_a of this ABTestingOptions.  # noqa: E501
        :rtype: str
        """
        return self._subject_a

    @subject_a.setter
    def subject_a(self, subject_a):
        """Sets the subject_a of this ABTestingOptions.

        For campaigns split on 'Subject Line', the subject line for Group A.  # noqa: E501

        :param subject_a: The subject_a of this ABTestingOptions.  # noqa: E501
        :type: str
        """

        self._subject_a = subject_a

    @property
    def subject_b(self):
        """Gets the subject_b of this ABTestingOptions.  # noqa: E501

        For campaigns split on 'Subject Line', the subject line for Group B.  # noqa: E501

        :return: The subject_b of this ABTestingOptions.  # noqa: E501
        :rtype: str
        """
        return self._subject_b

    @subject_b.setter
    def subject_b(self, subject_b):
        """Sets the subject_b of this ABTestingOptions.

        For campaigns split on 'Subject Line', the subject line for Group B.  # noqa: E501

        :param subject_b: The subject_b of this ABTestingOptions.  # noqa: E501
        :type: str
        """

        self._subject_b = subject_b

    @property
    def send_time_a(self):
        """Gets the send_time_a of this ABTestingOptions.  # noqa: E501

        The send time for Group A.  # noqa: E501

        :return: The send_time_a of this ABTestingOptions.  # noqa: E501
        :rtype: datetime
        """
        return self._send_time_a

    @send_time_a.setter
    def send_time_a(self, send_time_a):
        """Sets the send_time_a of this ABTestingOptions.

        The send time for Group A.  # noqa: E501

        :param send_time_a: The send_time_a of this ABTestingOptions.  # noqa: E501
        :type: datetime
        """

        self._send_time_a = send_time_a

    @property
    def send_time_b(self):
        """Gets the send_time_b of this ABTestingOptions.  # noqa: E501

        The send time for Group B.  # noqa: E501

        :return: The send_time_b of this ABTestingOptions.  # noqa: E501
        :rtype: datetime
        """
        return self._send_time_b

    @send_time_b.setter
    def send_time_b(self, send_time_b):
        """Sets the send_time_b of this ABTestingOptions.

        The send time for Group B.  # noqa: E501

        :param send_time_b: The send_time_b of this ABTestingOptions.  # noqa: E501
        :type: datetime
        """

        self._send_time_b = send_time_b

    @property
    def send_time_winner(self):
        """Gets the send_time_winner of this ABTestingOptions.  # noqa: E501

        The send time for the winning version.  # noqa: E501

        :return: The send_time_winner of this ABTestingOptions.  # noqa: E501
        :rtype: str
        """
        return self._send_time_winner

    @send_time_winner.setter
    def send_time_winner(self, send_time_winner):
        """Sets the send_time_winner of this ABTestingOptions.

        The send time for the winning version.  # noqa: E501

        :param send_time_winner: The send_time_winner of this ABTestingOptions.  # noqa: E501
        :type: str
        """

        self._send_time_winner = send_time_winner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ABTestingOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ABTestingOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
