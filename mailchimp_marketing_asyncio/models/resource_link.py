# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ResourceLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rel': 'str',
        'href': 'str',
        'method': 'str',
        'target_schema': 'str',
        'schema': 'str'
    }

    attribute_map = {
        'rel': 'rel',
        'href': 'href',
        'method': 'method',
        'target_schema': 'targetSchema',
        'schema': 'schema'
    }

    def __init__(self, rel=None, href=None, method=None, target_schema=None, schema=None):  # noqa: E501
        """ResourceLink - a model defined in Swagger"""  # noqa: E501

        self._rel = None
        self._href = None
        self._method = None
        self._target_schema = None
        self._schema = None
        self.discriminator = None

        if rel is not None:
            self.rel = rel
        if href is not None:
            self.href = href
        if method is not None:
            self.method = method
        if target_schema is not None:
            self.target_schema = target_schema
        if schema is not None:
            self.schema = schema

    @property
    def rel(self):
        """Gets the rel of this ResourceLink.  # noqa: E501

        As with an HTML 'rel' attribute, this describes the type of link.  # noqa: E501

        :return: The rel of this ResourceLink.  # noqa: E501
        :rtype: str
        """
        return self._rel

    @rel.setter
    def rel(self, rel):
        """Sets the rel of this ResourceLink.

        As with an HTML 'rel' attribute, this describes the type of link.  # noqa: E501

        :param rel: The rel of this ResourceLink.  # noqa: E501
        :type: str
        """

        self._rel = rel

    @property
    def href(self):
        """Gets the href of this ResourceLink.  # noqa: E501

        This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.  # noqa: E501

        :return: The href of this ResourceLink.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ResourceLink.

        This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.  # noqa: E501

        :param href: The href of this ResourceLink.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def method(self):
        """Gets the method of this ResourceLink.  # noqa: E501

        The HTTP method that should be used when accessing the URL defined in 'href'.  # noqa: E501

        :return: The method of this ResourceLink.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ResourceLink.

        The HTTP method that should be used when accessing the URL defined in 'href'.  # noqa: E501

        :param method: The method of this ResourceLink.  # noqa: E501
        :type: str
        """
        allowed_values = ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS", "HEAD"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def target_schema(self):
        """Gets the target_schema of this ResourceLink.  # noqa: E501

        For GETs, this is a URL representing the schema that the response should conform to.  # noqa: E501

        :return: The target_schema of this ResourceLink.  # noqa: E501
        :rtype: str
        """
        return self._target_schema

    @target_schema.setter
    def target_schema(self, target_schema):
        """Sets the target_schema of this ResourceLink.

        For GETs, this is a URL representing the schema that the response should conform to.  # noqa: E501

        :param target_schema: The target_schema of this ResourceLink.  # noqa: E501
        :type: str
        """

        self._target_schema = target_schema

    @property
    def schema(self):
        """Gets the schema of this ResourceLink.  # noqa: E501

        For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.  # noqa: E501

        :return: The schema of this ResourceLink.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this ResourceLink.

        For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.  # noqa: E501

        :param schema: The schema of this ResourceLink.  # noqa: E501
        :type: str
        """

        self._schema = schema

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceLink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceLink):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
