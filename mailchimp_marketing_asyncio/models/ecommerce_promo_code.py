# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EcommercePromoCode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'code': 'str',
        'redemption_url': 'str',
        'usage_count': 'int',
        'enabled': 'bool',
        'created_at_foreign': 'datetime',
        'updated_at_foreign': 'datetime',
        'links': 'list[ResourceLink]'
    }

    attribute_map = {
        'id': 'id',
        'code': 'code',
        'redemption_url': 'redemption_url',
        'usage_count': 'usage_count',
        'enabled': 'enabled',
        'created_at_foreign': 'created_at_foreign',
        'updated_at_foreign': 'updated_at_foreign',
        'links': '_links'
    }

    def __init__(self, id=None, code=None, redemption_url=None, usage_count=None, enabled=None, created_at_foreign=None, updated_at_foreign=None, links=None):  # noqa: E501
        """EcommercePromoCode - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._code = None
        self._redemption_url = None
        self._usage_count = None
        self._enabled = None
        self._created_at_foreign = None
        self._updated_at_foreign = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if code is not None:
            self.code = code
        if redemption_url is not None:
            self.redemption_url = redemption_url
        if usage_count is not None:
            self.usage_count = usage_count
        if enabled is not None:
            self.enabled = enabled
        if created_at_foreign is not None:
            self.created_at_foreign = created_at_foreign
        if updated_at_foreign is not None:
            self.updated_at_foreign = updated_at_foreign
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this EcommercePromoCode.  # noqa: E501

        A unique identifier for the promo Code.  # noqa: E501

        :return: The id of this EcommercePromoCode.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EcommercePromoCode.

        A unique identifier for the promo Code.  # noqa: E501

        :param id: The id of this EcommercePromoCode.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this EcommercePromoCode.  # noqa: E501

        The discount code. Restricted to UTF-8 characters with max length 50.  # noqa: E501

        :return: The code of this EcommercePromoCode.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this EcommercePromoCode.

        The discount code. Restricted to UTF-8 characters with max length 50.  # noqa: E501

        :param code: The code of this EcommercePromoCode.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def redemption_url(self):
        """Gets the redemption_url of this EcommercePromoCode.  # noqa: E501

        The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000.  # noqa: E501

        :return: The redemption_url of this EcommercePromoCode.  # noqa: E501
        :rtype: str
        """
        return self._redemption_url

    @redemption_url.setter
    def redemption_url(self, redemption_url):
        """Sets the redemption_url of this EcommercePromoCode.

        The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000.  # noqa: E501

        :param redemption_url: The redemption_url of this EcommercePromoCode.  # noqa: E501
        :type: str
        """

        self._redemption_url = redemption_url

    @property
    def usage_count(self):
        """Gets the usage_count of this EcommercePromoCode.  # noqa: E501

        Number of times promo code has been used.  # noqa: E501

        :return: The usage_count of this EcommercePromoCode.  # noqa: E501
        :rtype: int
        """
        return self._usage_count

    @usage_count.setter
    def usage_count(self, usage_count):
        """Sets the usage_count of this EcommercePromoCode.

        Number of times promo code has been used.  # noqa: E501

        :param usage_count: The usage_count of this EcommercePromoCode.  # noqa: E501
        :type: int
        """

        self._usage_count = usage_count

    @property
    def enabled(self):
        """Gets the enabled of this EcommercePromoCode.  # noqa: E501

        Whether the promo code is currently enabled.  # noqa: E501

        :return: The enabled of this EcommercePromoCode.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this EcommercePromoCode.

        Whether the promo code is currently enabled.  # noqa: E501

        :param enabled: The enabled of this EcommercePromoCode.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def created_at_foreign(self):
        """Gets the created_at_foreign of this EcommercePromoCode.  # noqa: E501

        The date and time the promotion was created in ISO 8601 format.  # noqa: E501

        :return: The created_at_foreign of this EcommercePromoCode.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at_foreign

    @created_at_foreign.setter
    def created_at_foreign(self, created_at_foreign):
        """Sets the created_at_foreign of this EcommercePromoCode.

        The date and time the promotion was created in ISO 8601 format.  # noqa: E501

        :param created_at_foreign: The created_at_foreign of this EcommercePromoCode.  # noqa: E501
        :type: datetime
        """

        self._created_at_foreign = created_at_foreign

    @property
    def updated_at_foreign(self):
        """Gets the updated_at_foreign of this EcommercePromoCode.  # noqa: E501

        The date and time the promotion was updated in ISO 8601 format.  # noqa: E501

        :return: The updated_at_foreign of this EcommercePromoCode.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at_foreign

    @updated_at_foreign.setter
    def updated_at_foreign(self, updated_at_foreign):
        """Sets the updated_at_foreign of this EcommercePromoCode.

        The date and time the promotion was updated in ISO 8601 format.  # noqa: E501

        :param updated_at_foreign: The updated_at_foreign of this EcommercePromoCode.  # noqa: E501
        :type: datetime
        """

        self._updated_at_foreign = updated_at_foreign

    @property
    def links(self):
        """Gets the links of this EcommercePromoCode.  # noqa: E501

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :return: The links of this EcommercePromoCode.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this EcommercePromoCode.

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :param links: The links of this EcommercePromoCode.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EcommercePromoCode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EcommercePromoCode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
