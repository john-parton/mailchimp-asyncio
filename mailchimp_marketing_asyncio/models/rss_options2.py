# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RSSOptions2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'feed_url': 'str',
        'frequency': 'str',
        'schedule': 'SendingSchedule',
        'constrain_rss_img': 'bool'
    }

    attribute_map = {
        'feed_url': 'feed_url',
        'frequency': 'frequency',
        'schedule': 'schedule',
        'constrain_rss_img': 'constrain_rss_img'
    }

    def __init__(self, feed_url=None, frequency=None, schedule=None, constrain_rss_img=None):  # noqa: E501
        """RSSOptions2 - a model defined in Swagger"""  # noqa: E501

        self._feed_url = None
        self._frequency = None
        self._schedule = None
        self._constrain_rss_img = None
        self.discriminator = None

        self.feed_url = feed_url
        self.frequency = frequency
        if schedule is not None:
            self.schedule = schedule
        if constrain_rss_img is not None:
            self.constrain_rss_img = constrain_rss_img

    @property
    def feed_url(self):
        """Gets the feed_url of this RSSOptions2.  # noqa: E501

        The URL for the RSS feed.  # noqa: E501

        :return: The feed_url of this RSSOptions2.  # noqa: E501
        :rtype: str
        """
        return self._feed_url

    @feed_url.setter
    def feed_url(self, feed_url):
        """Sets the feed_url of this RSSOptions2.

        The URL for the RSS feed.  # noqa: E501

        :param feed_url: The feed_url of this RSSOptions2.  # noqa: E501
        :type: str
        """
        if feed_url is None:
            raise ValueError("Invalid value for `feed_url`, must not be `None`")  # noqa: E501

        self._feed_url = feed_url

    @property
    def frequency(self):
        """Gets the frequency of this RSSOptions2.  # noqa: E501

        The frequency of the RSS Campaign.  # noqa: E501

        :return: The frequency of this RSSOptions2.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this RSSOptions2.

        The frequency of the RSS Campaign.  # noqa: E501

        :param frequency: The frequency of this RSSOptions2.  # noqa: E501
        :type: str
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")  # noqa: E501
        allowed_values = ["daily", "weekly", "monthly"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def schedule(self):
        """Gets the schedule of this RSSOptions2.  # noqa: E501


        :return: The schedule of this RSSOptions2.  # noqa: E501
        :rtype: SendingSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this RSSOptions2.


        :param schedule: The schedule of this RSSOptions2.  # noqa: E501
        :type: SendingSchedule
        """

        self._schedule = schedule

    @property
    def constrain_rss_img(self):
        """Gets the constrain_rss_img of this RSSOptions2.  # noqa: E501

        Whether to add CSS to images in the RSS feed to constrain their width in campaigns.  # noqa: E501

        :return: The constrain_rss_img of this RSSOptions2.  # noqa: E501
        :rtype: bool
        """
        return self._constrain_rss_img

    @constrain_rss_img.setter
    def constrain_rss_img(self, constrain_rss_img):
        """Sets the constrain_rss_img of this RSSOptions2.

        Whether to add CSS to images in the RSS feed to constrain their width in campaigns.  # noqa: E501

        :param constrain_rss_img: The constrain_rss_img of this RSSOptions2.  # noqa: E501
        :type: bool
        """

        self._constrain_rss_img = constrain_rss_img

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RSSOptions2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RSSOptions2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
