# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SignupFormHeaderOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image_url': 'str',
        'text': 'str',
        'image_width': 'str',
        'image_height': 'str',
        'image_alt': 'str',
        'image_link': 'str',
        'image_align': 'str',
        'image_border_width': 'str',
        'image_border_style': 'str',
        'image_border_color': 'str',
        'image_target': 'str'
    }

    attribute_map = {
        'image_url': 'image_url',
        'text': 'text',
        'image_width': 'image_width',
        'image_height': 'image_height',
        'image_alt': 'image_alt',
        'image_link': 'image_link',
        'image_align': 'image_align',
        'image_border_width': 'image_border_width',
        'image_border_style': 'image_border_style',
        'image_border_color': 'image_border_color',
        'image_target': 'image_target'
    }

    def __init__(self, image_url=None, text=None, image_width=None, image_height=None, image_alt=None, image_link=None, image_align=None, image_border_width=None, image_border_style=None, image_border_color=None, image_target=None):  # noqa: E501
        """SignupFormHeaderOptions - a model defined in Swagger"""  # noqa: E501

        self._image_url = None
        self._text = None
        self._image_width = None
        self._image_height = None
        self._image_alt = None
        self._image_link = None
        self._image_align = None
        self._image_border_width = None
        self._image_border_style = None
        self._image_border_color = None
        self._image_target = None
        self.discriminator = None

        if image_url is not None:
            self.image_url = image_url
        if text is not None:
            self.text = text
        if image_width is not None:
            self.image_width = image_width
        if image_height is not None:
            self.image_height = image_height
        if image_alt is not None:
            self.image_alt = image_alt
        if image_link is not None:
            self.image_link = image_link
        if image_align is not None:
            self.image_align = image_align
        if image_border_width is not None:
            self.image_border_width = image_border_width
        if image_border_style is not None:
            self.image_border_style = image_border_style
        if image_border_color is not None:
            self.image_border_color = image_border_color
        if image_target is not None:
            self.image_target = image_target

    @property
    def image_url(self):
        """Gets the image_url of this SignupFormHeaderOptions.  # noqa: E501

        Header image URL.  # noqa: E501

        :return: The image_url of this SignupFormHeaderOptions.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this SignupFormHeaderOptions.

        Header image URL.  # noqa: E501

        :param image_url: The image_url of this SignupFormHeaderOptions.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def text(self):
        """Gets the text of this SignupFormHeaderOptions.  # noqa: E501

        Header text.  # noqa: E501

        :return: The text of this SignupFormHeaderOptions.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SignupFormHeaderOptions.

        Header text.  # noqa: E501

        :param text: The text of this SignupFormHeaderOptions.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def image_width(self):
        """Gets the image_width of this SignupFormHeaderOptions.  # noqa: E501

        Image width, in pixels.  # noqa: E501

        :return: The image_width of this SignupFormHeaderOptions.  # noqa: E501
        :rtype: str
        """
        return self._image_width

    @image_width.setter
    def image_width(self, image_width):
        """Sets the image_width of this SignupFormHeaderOptions.

        Image width, in pixels.  # noqa: E501

        :param image_width: The image_width of this SignupFormHeaderOptions.  # noqa: E501
        :type: str
        """

        self._image_width = image_width

    @property
    def image_height(self):
        """Gets the image_height of this SignupFormHeaderOptions.  # noqa: E501

        Image height, in pixels.  # noqa: E501

        :return: The image_height of this SignupFormHeaderOptions.  # noqa: E501
        :rtype: str
        """
        return self._image_height

    @image_height.setter
    def image_height(self, image_height):
        """Sets the image_height of this SignupFormHeaderOptions.

        Image height, in pixels.  # noqa: E501

        :param image_height: The image_height of this SignupFormHeaderOptions.  # noqa: E501
        :type: str
        """

        self._image_height = image_height

    @property
    def image_alt(self):
        """Gets the image_alt of this SignupFormHeaderOptions.  # noqa: E501

        Alt text for the image.  # noqa: E501

        :return: The image_alt of this SignupFormHeaderOptions.  # noqa: E501
        :rtype: str
        """
        return self._image_alt

    @image_alt.setter
    def image_alt(self, image_alt):
        """Sets the image_alt of this SignupFormHeaderOptions.

        Alt text for the image.  # noqa: E501

        :param image_alt: The image_alt of this SignupFormHeaderOptions.  # noqa: E501
        :type: str
        """

        self._image_alt = image_alt

    @property
    def image_link(self):
        """Gets the image_link of this SignupFormHeaderOptions.  # noqa: E501

        The URL that the header image will link to.  # noqa: E501

        :return: The image_link of this SignupFormHeaderOptions.  # noqa: E501
        :rtype: str
        """
        return self._image_link

    @image_link.setter
    def image_link(self, image_link):
        """Sets the image_link of this SignupFormHeaderOptions.

        The URL that the header image will link to.  # noqa: E501

        :param image_link: The image_link of this SignupFormHeaderOptions.  # noqa: E501
        :type: str
        """

        self._image_link = image_link

    @property
    def image_align(self):
        """Gets the image_align of this SignupFormHeaderOptions.  # noqa: E501

        Image alignment.  # noqa: E501

        :return: The image_align of this SignupFormHeaderOptions.  # noqa: E501
        :rtype: str
        """
        return self._image_align

    @image_align.setter
    def image_align(self, image_align):
        """Sets the image_align of this SignupFormHeaderOptions.

        Image alignment.  # noqa: E501

        :param image_align: The image_align of this SignupFormHeaderOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "left", "center", "right"]  # noqa: E501
        if image_align not in allowed_values:
            raise ValueError(
                "Invalid value for `image_align` ({0}), must be one of {1}"  # noqa: E501
                .format(image_align, allowed_values)
            )

        self._image_align = image_align

    @property
    def image_border_width(self):
        """Gets the image_border_width of this SignupFormHeaderOptions.  # noqa: E501

        Image border width.  # noqa: E501

        :return: The image_border_width of this SignupFormHeaderOptions.  # noqa: E501
        :rtype: str
        """
        return self._image_border_width

    @image_border_width.setter
    def image_border_width(self, image_border_width):
        """Sets the image_border_width of this SignupFormHeaderOptions.

        Image border width.  # noqa: E501

        :param image_border_width: The image_border_width of this SignupFormHeaderOptions.  # noqa: E501
        :type: str
        """

        self._image_border_width = image_border_width

    @property
    def image_border_style(self):
        """Gets the image_border_style of this SignupFormHeaderOptions.  # noqa: E501

        Image border style.  # noqa: E501

        :return: The image_border_style of this SignupFormHeaderOptions.  # noqa: E501
        :rtype: str
        """
        return self._image_border_style

    @image_border_style.setter
    def image_border_style(self, image_border_style):
        """Sets the image_border_style of this SignupFormHeaderOptions.

        Image border style.  # noqa: E501

        :param image_border_style: The image_border_style of this SignupFormHeaderOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "solid", "dotted", "dashed", "double", "groove", "outset", "inset", "ridge"]  # noqa: E501
        if image_border_style not in allowed_values:
            raise ValueError(
                "Invalid value for `image_border_style` ({0}), must be one of {1}"  # noqa: E501
                .format(image_border_style, allowed_values)
            )

        self._image_border_style = image_border_style

    @property
    def image_border_color(self):
        """Gets the image_border_color of this SignupFormHeaderOptions.  # noqa: E501

        Image border color.  # noqa: E501

        :return: The image_border_color of this SignupFormHeaderOptions.  # noqa: E501
        :rtype: str
        """
        return self._image_border_color

    @image_border_color.setter
    def image_border_color(self, image_border_color):
        """Sets the image_border_color of this SignupFormHeaderOptions.

        Image border color.  # noqa: E501

        :param image_border_color: The image_border_color of this SignupFormHeaderOptions.  # noqa: E501
        :type: str
        """

        self._image_border_color = image_border_color

    @property
    def image_target(self):
        """Gets the image_target of this SignupFormHeaderOptions.  # noqa: E501

        Image link target.  # noqa: E501

        :return: The image_target of this SignupFormHeaderOptions.  # noqa: E501
        :rtype: str
        """
        return self._image_target

    @image_target.setter
    def image_target(self, image_target):
        """Sets the image_target of this SignupFormHeaderOptions.

        Image link target.  # noqa: E501

        :param image_target: The image_target of this SignupFormHeaderOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["_blank", "null"]  # noqa: E501
        if image_target not in allowed_values:
            raise ValueError(
                "Invalid value for `image_target` ({0}), must be one of {1}"  # noqa: E501
                .format(image_target, allowed_values)
            )

        self._image_target = image_target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SignupFormHeaderOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SignupFormHeaderOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
