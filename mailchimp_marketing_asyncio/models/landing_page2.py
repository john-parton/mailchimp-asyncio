# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LandingPage2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'title': 'str',
        'description': 'str',
        'store_id': 'str',
        'list_id': 'str',
        'tracking': 'TrackingSettings'
    }

    attribute_map = {
        'name': 'name',
        'title': 'title',
        'description': 'description',
        'store_id': 'store_id',
        'list_id': 'list_id',
        'tracking': 'tracking'
    }

    def __init__(self, name=None, title=None, description=None, store_id=None, list_id=None, tracking=None):  # noqa: E501
        """LandingPage2 - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._title = None
        self._description = None
        self._store_id = None
        self._list_id = None
        self._tracking = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if store_id is not None:
            self.store_id = store_id
        if list_id is not None:
            self.list_id = list_id
        if tracking is not None:
            self.tracking = tracking

    @property
    def name(self):
        """Gets the name of this LandingPage2.  # noqa: E501

        The name of this landing page.  # noqa: E501

        :return: The name of this LandingPage2.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LandingPage2.

        The name of this landing page.  # noqa: E501

        :param name: The name of this LandingPage2.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def title(self):
        """Gets the title of this LandingPage2.  # noqa: E501

        The title of this landing page seen in the browser's title bar.  # noqa: E501

        :return: The title of this LandingPage2.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LandingPage2.

        The title of this landing page seen in the browser's title bar.  # noqa: E501

        :param title: The title of this LandingPage2.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this LandingPage2.  # noqa: E501

        The description of this landing page.  # noqa: E501

        :return: The description of this LandingPage2.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LandingPage2.

        The description of this landing page.  # noqa: E501

        :param description: The description of this LandingPage2.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def store_id(self):
        """Gets the store_id of this LandingPage2.  # noqa: E501

        The ID of the store associated with this landing page.  # noqa: E501

        :return: The store_id of this LandingPage2.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this LandingPage2.

        The ID of the store associated with this landing page.  # noqa: E501

        :param store_id: The store_id of this LandingPage2.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    @property
    def list_id(self):
        """Gets the list_id of this LandingPage2.  # noqa: E501

        The list's ID associated with this landing page.  # noqa: E501

        :return: The list_id of this LandingPage2.  # noqa: E501
        :rtype: str
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this LandingPage2.

        The list's ID associated with this landing page.  # noqa: E501

        :param list_id: The list_id of this LandingPage2.  # noqa: E501
        :type: str
        """

        self._list_id = list_id

    @property
    def tracking(self):
        """Gets the tracking of this LandingPage2.  # noqa: E501


        :return: The tracking of this LandingPage2.  # noqa: E501
        :rtype: TrackingSettings
        """
        return self._tracking

    @tracking.setter
    def tracking(self, tracking):
        """Sets the tracking of this LandingPage2.


        :param tracking: The tracking of this LandingPage2.  # noqa: E501
        :type: TrackingSettings
        """

        self._tracking = tracking

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LandingPage2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LandingPage2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
