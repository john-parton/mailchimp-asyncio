# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TemplateInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'type': 'str',
        'name': 'str',
        'drag_and_drop': 'bool',
        'responsive': 'bool',
        'category': 'str',
        'date_created': 'datetime',
        'date_edited': 'datetime',
        'created_by': 'str',
        'edited_by': 'str',
        'active': 'bool',
        'folder_id': 'str',
        'thumbnail': 'str',
        'share_url': 'str',
        'content_type': 'str',
        'links': 'list[ResourceLink]'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'name': 'name',
        'drag_and_drop': 'drag_and_drop',
        'responsive': 'responsive',
        'category': 'category',
        'date_created': 'date_created',
        'date_edited': 'date_edited',
        'created_by': 'created_by',
        'edited_by': 'edited_by',
        'active': 'active',
        'folder_id': 'folder_id',
        'thumbnail': 'thumbnail',
        'share_url': 'share_url',
        'content_type': 'content_type',
        'links': '_links'
    }

    def __init__(self, id=None, type=None, name=None, drag_and_drop=None, responsive=None, category=None, date_created=None, date_edited=None, created_by=None, edited_by=None, active=None, folder_id=None, thumbnail=None, share_url=None, content_type=None, links=None):  # noqa: E501
        """TemplateInstance - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._type = None
        self._name = None
        self._drag_and_drop = None
        self._responsive = None
        self._category = None
        self._date_created = None
        self._date_edited = None
        self._created_by = None
        self._edited_by = None
        self._active = None
        self._folder_id = None
        self._thumbnail = None
        self._share_url = None
        self._content_type = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if drag_and_drop is not None:
            self.drag_and_drop = drag_and_drop
        if responsive is not None:
            self.responsive = responsive
        if category is not None:
            self.category = category
        if date_created is not None:
            self.date_created = date_created
        if date_edited is not None:
            self.date_edited = date_edited
        if created_by is not None:
            self.created_by = created_by
        if edited_by is not None:
            self.edited_by = edited_by
        if active is not None:
            self.active = active
        if folder_id is not None:
            self.folder_id = folder_id
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if share_url is not None:
            self.share_url = share_url
        if content_type is not None:
            self.content_type = content_type
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this TemplateInstance.  # noqa: E501

        The individual id for the template.  # noqa: E501

        :return: The id of this TemplateInstance.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TemplateInstance.

        The individual id for the template.  # noqa: E501

        :param id: The id of this TemplateInstance.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this TemplateInstance.  # noqa: E501

        The type of template (user, base, or gallery).  # noqa: E501

        :return: The type of this TemplateInstance.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TemplateInstance.

        The type of template (user, base, or gallery).  # noqa: E501

        :param type: The type of this TemplateInstance.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this TemplateInstance.  # noqa: E501

        The name of the template.  # noqa: E501

        :return: The name of this TemplateInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TemplateInstance.

        The name of the template.  # noqa: E501

        :param name: The name of this TemplateInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def drag_and_drop(self):
        """Gets the drag_and_drop of this TemplateInstance.  # noqa: E501

        Whether the template uses the drag and drop editor.  # noqa: E501

        :return: The drag_and_drop of this TemplateInstance.  # noqa: E501
        :rtype: bool
        """
        return self._drag_and_drop

    @drag_and_drop.setter
    def drag_and_drop(self, drag_and_drop):
        """Sets the drag_and_drop of this TemplateInstance.

        Whether the template uses the drag and drop editor.  # noqa: E501

        :param drag_and_drop: The drag_and_drop of this TemplateInstance.  # noqa: E501
        :type: bool
        """

        self._drag_and_drop = drag_and_drop

    @property
    def responsive(self):
        """Gets the responsive of this TemplateInstance.  # noqa: E501

        Whether the template contains media queries to make it responsive.  # noqa: E501

        :return: The responsive of this TemplateInstance.  # noqa: E501
        :rtype: bool
        """
        return self._responsive

    @responsive.setter
    def responsive(self, responsive):
        """Sets the responsive of this TemplateInstance.

        Whether the template contains media queries to make it responsive.  # noqa: E501

        :param responsive: The responsive of this TemplateInstance.  # noqa: E501
        :type: bool
        """

        self._responsive = responsive

    @property
    def category(self):
        """Gets the category of this TemplateInstance.  # noqa: E501

        If available, the category the template is listed in.  # noqa: E501

        :return: The category of this TemplateInstance.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TemplateInstance.

        If available, the category the template is listed in.  # noqa: E501

        :param category: The category of this TemplateInstance.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def date_created(self):
        """Gets the date_created of this TemplateInstance.  # noqa: E501

        The date and time the template was created in ISO 8601 format.  # noqa: E501

        :return: The date_created of this TemplateInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this TemplateInstance.

        The date and time the template was created in ISO 8601 format.  # noqa: E501

        :param date_created: The date_created of this TemplateInstance.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_edited(self):
        """Gets the date_edited of this TemplateInstance.  # noqa: E501

        The date and time the template was edited in ISO 8601 format.  # noqa: E501

        :return: The date_edited of this TemplateInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._date_edited

    @date_edited.setter
    def date_edited(self, date_edited):
        """Sets the date_edited of this TemplateInstance.

        The date and time the template was edited in ISO 8601 format.  # noqa: E501

        :param date_edited: The date_edited of this TemplateInstance.  # noqa: E501
        :type: datetime
        """

        self._date_edited = date_edited

    @property
    def created_by(self):
        """Gets the created_by of this TemplateInstance.  # noqa: E501

        The login name for template's creator.  # noqa: E501

        :return: The created_by of this TemplateInstance.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TemplateInstance.

        The login name for template's creator.  # noqa: E501

        :param created_by: The created_by of this TemplateInstance.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def edited_by(self):
        """Gets the edited_by of this TemplateInstance.  # noqa: E501

        The login name who last edited the template.  # noqa: E501

        :return: The edited_by of this TemplateInstance.  # noqa: E501
        :rtype: str
        """
        return self._edited_by

    @edited_by.setter
    def edited_by(self, edited_by):
        """Sets the edited_by of this TemplateInstance.

        The login name who last edited the template.  # noqa: E501

        :param edited_by: The edited_by of this TemplateInstance.  # noqa: E501
        :type: str
        """

        self._edited_by = edited_by

    @property
    def active(self):
        """Gets the active of this TemplateInstance.  # noqa: E501

        User templates are not 'deleted,' but rather marked as 'inactive.' Returns whether the template is still active.  # noqa: E501

        :return: The active of this TemplateInstance.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this TemplateInstance.

        User templates are not 'deleted,' but rather marked as 'inactive.' Returns whether the template is still active.  # noqa: E501

        :param active: The active of this TemplateInstance.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def folder_id(self):
        """Gets the folder_id of this TemplateInstance.  # noqa: E501

        The id of the folder the template is currently in.  # noqa: E501

        :return: The folder_id of this TemplateInstance.  # noqa: E501
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this TemplateInstance.

        The id of the folder the template is currently in.  # noqa: E501

        :param folder_id: The folder_id of this TemplateInstance.  # noqa: E501
        :type: str
        """

        self._folder_id = folder_id

    @property
    def thumbnail(self):
        """Gets the thumbnail of this TemplateInstance.  # noqa: E501

        If available, the URL for a thumbnail of the template.  # noqa: E501

        :return: The thumbnail of this TemplateInstance.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this TemplateInstance.

        If available, the URL for a thumbnail of the template.  # noqa: E501

        :param thumbnail: The thumbnail of this TemplateInstance.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def share_url(self):
        """Gets the share_url of this TemplateInstance.  # noqa: E501

        The URL used for [template sharing](https://mailchimp.com/help/share-a-template/).  # noqa: E501

        :return: The share_url of this TemplateInstance.  # noqa: E501
        :rtype: str
        """
        return self._share_url

    @share_url.setter
    def share_url(self, share_url):
        """Sets the share_url of this TemplateInstance.

        The URL used for [template sharing](https://mailchimp.com/help/share-a-template/).  # noqa: E501

        :param share_url: The share_url of this TemplateInstance.  # noqa: E501
        :type: str
        """

        self._share_url = share_url

    @property
    def content_type(self):
        """Gets the content_type of this TemplateInstance.  # noqa: E501

        How the template's content is put together.  # noqa: E501

        :return: The content_type of this TemplateInstance.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this TemplateInstance.

        How the template's content is put together.  # noqa: E501

        :param content_type: The content_type of this TemplateInstance.  # noqa: E501
        :type: str
        """
        allowed_values = ["template", "multichannel", "html"]  # noqa: E501
        if content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"  # noqa: E501
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def links(self):
        """Gets the links of this TemplateInstance.  # noqa: E501

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :return: The links of this TemplateInstance.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this TemplateInstance.

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :param links: The links of this TemplateInstance.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TemplateInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplateInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
