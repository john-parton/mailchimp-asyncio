# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CampaignReports1Timeseries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'datetime',
        'emails_sent': 'int',
        'unique_opens': 'int',
        'recipients_clicks': 'int'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'emails_sent': 'emails_sent',
        'unique_opens': 'unique_opens',
        'recipients_clicks': 'recipients_clicks'
    }

    def __init__(self, timestamp=None, emails_sent=None, unique_opens=None, recipients_clicks=None):  # noqa: E501
        """CampaignReports1Timeseries - a model defined in Swagger"""  # noqa: E501

        self._timestamp = None
        self._emails_sent = None
        self._unique_opens = None
        self._recipients_clicks = None
        self.discriminator = None

        if timestamp is not None:
            self.timestamp = timestamp
        if emails_sent is not None:
            self.emails_sent = emails_sent
        if unique_opens is not None:
            self.unique_opens = unique_opens
        if recipients_clicks is not None:
            self.recipients_clicks = recipients_clicks

    @property
    def timestamp(self):
        """Gets the timestamp of this CampaignReports1Timeseries.  # noqa: E501

        The date and time for the series in ISO 8601 format.  # noqa: E501

        :return: The timestamp of this CampaignReports1Timeseries.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this CampaignReports1Timeseries.

        The date and time for the series in ISO 8601 format.  # noqa: E501

        :param timestamp: The timestamp of this CampaignReports1Timeseries.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def emails_sent(self):
        """Gets the emails_sent of this CampaignReports1Timeseries.  # noqa: E501

        The number of emails sent in the timeseries.  # noqa: E501

        :return: The emails_sent of this CampaignReports1Timeseries.  # noqa: E501
        :rtype: int
        """
        return self._emails_sent

    @emails_sent.setter
    def emails_sent(self, emails_sent):
        """Sets the emails_sent of this CampaignReports1Timeseries.

        The number of emails sent in the timeseries.  # noqa: E501

        :param emails_sent: The emails_sent of this CampaignReports1Timeseries.  # noqa: E501
        :type: int
        """

        self._emails_sent = emails_sent

    @property
    def unique_opens(self):
        """Gets the unique_opens of this CampaignReports1Timeseries.  # noqa: E501

        The number of unique opens in the timeseries.  # noqa: E501

        :return: The unique_opens of this CampaignReports1Timeseries.  # noqa: E501
        :rtype: int
        """
        return self._unique_opens

    @unique_opens.setter
    def unique_opens(self, unique_opens):
        """Sets the unique_opens of this CampaignReports1Timeseries.

        The number of unique opens in the timeseries.  # noqa: E501

        :param unique_opens: The unique_opens of this CampaignReports1Timeseries.  # noqa: E501
        :type: int
        """

        self._unique_opens = unique_opens

    @property
    def recipients_clicks(self):
        """Gets the recipients_clicks of this CampaignReports1Timeseries.  # noqa: E501

        The number of clicks in the timeseries.  # noqa: E501

        :return: The recipients_clicks of this CampaignReports1Timeseries.  # noqa: E501
        :rtype: int
        """
        return self._recipients_clicks

    @recipients_clicks.setter
    def recipients_clicks(self, recipients_clicks):
        """Sets the recipients_clicks of this CampaignReports1Timeseries.

        The number of clicks in the timeseries.  # noqa: E501

        :param recipients_clicks: The recipients_clicks of this CampaignReports1Timeseries.  # noqa: E501
        :type: int
        """

        self._recipients_clicks = recipients_clicks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CampaignReports1Timeseries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignReports1Timeseries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
