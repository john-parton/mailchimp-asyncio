# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Bounces(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hard_bounces': 'int',
        'soft_bounces': 'int',
        'syntax_errors': 'int'
    }

    attribute_map = {
        'hard_bounces': 'hard_bounces',
        'soft_bounces': 'soft_bounces',
        'syntax_errors': 'syntax_errors'
    }

    def __init__(self, hard_bounces=None, soft_bounces=None, syntax_errors=None):  # noqa: E501
        """Bounces - a model defined in Swagger"""  # noqa: E501

        self._hard_bounces = None
        self._soft_bounces = None
        self._syntax_errors = None
        self.discriminator = None

        if hard_bounces is not None:
            self.hard_bounces = hard_bounces
        if soft_bounces is not None:
            self.soft_bounces = soft_bounces
        if syntax_errors is not None:
            self.syntax_errors = syntax_errors

    @property
    def hard_bounces(self):
        """Gets the hard_bounces of this Bounces.  # noqa: E501

        The total number of hard bounced email addresses.  # noqa: E501

        :return: The hard_bounces of this Bounces.  # noqa: E501
        :rtype: int
        """
        return self._hard_bounces

    @hard_bounces.setter
    def hard_bounces(self, hard_bounces):
        """Sets the hard_bounces of this Bounces.

        The total number of hard bounced email addresses.  # noqa: E501

        :param hard_bounces: The hard_bounces of this Bounces.  # noqa: E501
        :type: int
        """

        self._hard_bounces = hard_bounces

    @property
    def soft_bounces(self):
        """Gets the soft_bounces of this Bounces.  # noqa: E501

        The total number of soft bounced email addresses.  # noqa: E501

        :return: The soft_bounces of this Bounces.  # noqa: E501
        :rtype: int
        """
        return self._soft_bounces

    @soft_bounces.setter
    def soft_bounces(self, soft_bounces):
        """Sets the soft_bounces of this Bounces.

        The total number of soft bounced email addresses.  # noqa: E501

        :param soft_bounces: The soft_bounces of this Bounces.  # noqa: E501
        :type: int
        """

        self._soft_bounces = soft_bounces

    @property
    def syntax_errors(self):
        """Gets the syntax_errors of this Bounces.  # noqa: E501

        The total number of addresses that were syntax-related bounces.  # noqa: E501

        :return: The syntax_errors of this Bounces.  # noqa: E501
        :rtype: int
        """
        return self._syntax_errors

    @syntax_errors.setter
    def syntax_errors(self, syntax_errors):
        """Sets the syntax_errors of this Bounces.

        The total number of addresses that were syntax-related bounces.  # noqa: E501

        :param syntax_errors: The syntax_errors of this Bounces.  # noqa: E501
        :type: int
        """

        self._syntax_errors = syntax_errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Bounces, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Bounces):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
