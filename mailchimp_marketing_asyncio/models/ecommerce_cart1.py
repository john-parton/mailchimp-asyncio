# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EcommerceCart1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'customer': 'EcommerceCustomer1',
        'campaign_id': 'str',
        'checkout_url': 'str',
        'currency_code': 'str',
        'order_total': 'float',
        'tax_total': 'float',
        'lines': 'list[EcommerceCartLineItem1]'
    }

    attribute_map = {
        'id': 'id',
        'customer': 'customer',
        'campaign_id': 'campaign_id',
        'checkout_url': 'checkout_url',
        'currency_code': 'currency_code',
        'order_total': 'order_total',
        'tax_total': 'tax_total',
        'lines': 'lines'
    }

    def __init__(self, id=None, customer=None, campaign_id=None, checkout_url=None, currency_code=None, order_total=None, tax_total=None, lines=None):  # noqa: E501
        """EcommerceCart1 - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._customer = None
        self._campaign_id = None
        self._checkout_url = None
        self._currency_code = None
        self._order_total = None
        self._tax_total = None
        self._lines = None
        self.discriminator = None

        self.id = id
        self.customer = customer
        if campaign_id is not None:
            self.campaign_id = campaign_id
        if checkout_url is not None:
            self.checkout_url = checkout_url
        self.currency_code = currency_code
        self.order_total = order_total
        if tax_total is not None:
            self.tax_total = tax_total
        self.lines = lines

    @property
    def id(self):
        """Gets the id of this EcommerceCart1.  # noqa: E501

        A unique identifier for the cart.  # noqa: E501

        :return: The id of this EcommerceCart1.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EcommerceCart1.

        A unique identifier for the cart.  # noqa: E501

        :param id: The id of this EcommerceCart1.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def customer(self):
        """Gets the customer of this EcommerceCart1.  # noqa: E501


        :return: The customer of this EcommerceCart1.  # noqa: E501
        :rtype: EcommerceCustomer1
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this EcommerceCart1.


        :param customer: The customer of this EcommerceCart1.  # noqa: E501
        :type: EcommerceCustomer1
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")  # noqa: E501

        self._customer = customer

    @property
    def campaign_id(self):
        """Gets the campaign_id of this EcommerceCart1.  # noqa: E501

        A string that uniquely identifies the campaign for a cart.  # noqa: E501

        :return: The campaign_id of this EcommerceCart1.  # noqa: E501
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this EcommerceCart1.

        A string that uniquely identifies the campaign for a cart.  # noqa: E501

        :param campaign_id: The campaign_id of this EcommerceCart1.  # noqa: E501
        :type: str
        """

        self._campaign_id = campaign_id

    @property
    def checkout_url(self):
        """Gets the checkout_url of this EcommerceCart1.  # noqa: E501

        The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations.  # noqa: E501

        :return: The checkout_url of this EcommerceCart1.  # noqa: E501
        :rtype: str
        """
        return self._checkout_url

    @checkout_url.setter
    def checkout_url(self, checkout_url):
        """Sets the checkout_url of this EcommerceCart1.

        The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations.  # noqa: E501

        :param checkout_url: The checkout_url of this EcommerceCart1.  # noqa: E501
        :type: str
        """

        self._checkout_url = checkout_url

    @property
    def currency_code(self):
        """Gets the currency_code of this EcommerceCart1.  # noqa: E501

        The three-letter ISO 4217 code for the currency that the cart uses.  # noqa: E501

        :return: The currency_code of this EcommerceCart1.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this EcommerceCart1.

        The three-letter ISO 4217 code for the currency that the cart uses.  # noqa: E501

        :param currency_code: The currency_code of this EcommerceCart1.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def order_total(self):
        """Gets the order_total of this EcommerceCart1.  # noqa: E501

        The order total for the cart.  # noqa: E501

        :return: The order_total of this EcommerceCart1.  # noqa: E501
        :rtype: float
        """
        return self._order_total

    @order_total.setter
    def order_total(self, order_total):
        """Sets the order_total of this EcommerceCart1.

        The order total for the cart.  # noqa: E501

        :param order_total: The order_total of this EcommerceCart1.  # noqa: E501
        :type: float
        """
        if order_total is None:
            raise ValueError("Invalid value for `order_total`, must not be `None`")  # noqa: E501

        self._order_total = order_total

    @property
    def tax_total(self):
        """Gets the tax_total of this EcommerceCart1.  # noqa: E501

        The total tax for the cart.  # noqa: E501

        :return: The tax_total of this EcommerceCart1.  # noqa: E501
        :rtype: float
        """
        return self._tax_total

    @tax_total.setter
    def tax_total(self, tax_total):
        """Sets the tax_total of this EcommerceCart1.

        The total tax for the cart.  # noqa: E501

        :param tax_total: The tax_total of this EcommerceCart1.  # noqa: E501
        :type: float
        """

        self._tax_total = tax_total

    @property
    def lines(self):
        """Gets the lines of this EcommerceCart1.  # noqa: E501

        An array of the cart's line items.  # noqa: E501

        :return: The lines of this EcommerceCart1.  # noqa: E501
        :rtype: list[EcommerceCartLineItem1]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this EcommerceCart1.

        An array of the cart's line items.  # noqa: E501

        :param lines: The lines of this EcommerceCart1.  # noqa: E501
        :type: list[EcommerceCartLineItem1]
        """
        if lines is None:
            raise ValueError("Invalid value for `lines`, must not be `None`")  # noqa: E501

        self._lines = lines

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EcommerceCart1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EcommerceCart1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
