# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OpenLocationsLocations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_code': 'str',
        'region': 'str',
        'region_name': 'str',
        'opens': 'int'
    }

    attribute_map = {
        'country_code': 'country_code',
        'region': 'region',
        'region_name': 'region_name',
        'opens': 'opens'
    }

    def __init__(self, country_code=None, region=None, region_name=None, opens=None):  # noqa: E501
        """OpenLocationsLocations - a model defined in Swagger"""  # noqa: E501

        self._country_code = None
        self._region = None
        self._region_name = None
        self._opens = None
        self.discriminator = None

        if country_code is not None:
            self.country_code = country_code
        if region is not None:
            self.region = region
        if region_name is not None:
            self.region_name = region_name
        if opens is not None:
            self.opens = opens

    @property
    def country_code(self):
        """Gets the country_code of this OpenLocationsLocations.  # noqa: E501

        The ISO 3166 2 digit country code.  # noqa: E501

        :return: The country_code of this OpenLocationsLocations.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this OpenLocationsLocations.

        The ISO 3166 2 digit country code.  # noqa: E501

        :param country_code: The country_code of this OpenLocationsLocations.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def region(self):
        """Gets the region of this OpenLocationsLocations.  # noqa: E501

        An internal code for the region representing the more specific location area such as city or state. When this is blank, it indicates we know the country, but not the region.  # noqa: E501

        :return: The region of this OpenLocationsLocations.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this OpenLocationsLocations.

        An internal code for the region representing the more specific location area such as city or state. When this is blank, it indicates we know the country, but not the region.  # noqa: E501

        :param region: The region of this OpenLocationsLocations.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def region_name(self):
        """Gets the region_name of this OpenLocationsLocations.  # noqa: E501

        The name of the region, if we have one. For blank \"region\" values, this will be \"Rest of Country\".  # noqa: E501

        :return: The region_name of this OpenLocationsLocations.  # noqa: E501
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """Sets the region_name of this OpenLocationsLocations.

        The name of the region, if we have one. For blank \"region\" values, this will be \"Rest of Country\".  # noqa: E501

        :param region_name: The region_name of this OpenLocationsLocations.  # noqa: E501
        :type: str
        """

        self._region_name = region_name

    @property
    def opens(self):
        """Gets the opens of this OpenLocationsLocations.  # noqa: E501

        The number of unique campaign opens for a region.  # noqa: E501

        :return: The opens of this OpenLocationsLocations.  # noqa: E501
        :rtype: int
        """
        return self._opens

    @opens.setter
    def opens(self, opens):
        """Sets the opens of this OpenLocationsLocations.

        The number of unique campaign opens for a region.  # noqa: E501

        :param opens: The opens of this OpenLocationsLocations.  # noqa: E501
        :type: int
        """

        self._opens = opens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenLocationsLocations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenLocationsLocations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
