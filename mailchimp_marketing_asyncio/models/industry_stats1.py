# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IndustryStats1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'open_rate': 'float',
        'click_rate': 'float',
        'bounce_rate': 'float',
        'unopen_rate': 'float',
        'unsub_rate': 'float',
        'abuse_rate': 'float'
    }

    attribute_map = {
        'type': 'type',
        'open_rate': 'open_rate',
        'click_rate': 'click_rate',
        'bounce_rate': 'bounce_rate',
        'unopen_rate': 'unopen_rate',
        'unsub_rate': 'unsub_rate',
        'abuse_rate': 'abuse_rate'
    }

    def __init__(self, type=None, open_rate=None, click_rate=None, bounce_rate=None, unopen_rate=None, unsub_rate=None, abuse_rate=None):  # noqa: E501
        """IndustryStats1 - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._open_rate = None
        self._click_rate = None
        self._bounce_rate = None
        self._unopen_rate = None
        self._unsub_rate = None
        self._abuse_rate = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if open_rate is not None:
            self.open_rate = open_rate
        if click_rate is not None:
            self.click_rate = click_rate
        if bounce_rate is not None:
            self.bounce_rate = bounce_rate
        if unopen_rate is not None:
            self.unopen_rate = unopen_rate
        if unsub_rate is not None:
            self.unsub_rate = unsub_rate
        if abuse_rate is not None:
            self.abuse_rate = abuse_rate

    @property
    def type(self):
        """Gets the type of this IndustryStats1.  # noqa: E501

        The type of business industry associated with your account. For example: retail, education, etc.  # noqa: E501

        :return: The type of this IndustryStats1.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IndustryStats1.

        The type of business industry associated with your account. For example: retail, education, etc.  # noqa: E501

        :param type: The type of this IndustryStats1.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def open_rate(self):
        """Gets the open_rate of this IndustryStats1.  # noqa: E501

        The industry open rate.  # noqa: E501

        :return: The open_rate of this IndustryStats1.  # noqa: E501
        :rtype: float
        """
        return self._open_rate

    @open_rate.setter
    def open_rate(self, open_rate):
        """Sets the open_rate of this IndustryStats1.

        The industry open rate.  # noqa: E501

        :param open_rate: The open_rate of this IndustryStats1.  # noqa: E501
        :type: float
        """

        self._open_rate = open_rate

    @property
    def click_rate(self):
        """Gets the click_rate of this IndustryStats1.  # noqa: E501

        The industry click rate.  # noqa: E501

        :return: The click_rate of this IndustryStats1.  # noqa: E501
        :rtype: float
        """
        return self._click_rate

    @click_rate.setter
    def click_rate(self, click_rate):
        """Sets the click_rate of this IndustryStats1.

        The industry click rate.  # noqa: E501

        :param click_rate: The click_rate of this IndustryStats1.  # noqa: E501
        :type: float
        """

        self._click_rate = click_rate

    @property
    def bounce_rate(self):
        """Gets the bounce_rate of this IndustryStats1.  # noqa: E501

        The industry bounce rate.  # noqa: E501

        :return: The bounce_rate of this IndustryStats1.  # noqa: E501
        :rtype: float
        """
        return self._bounce_rate

    @bounce_rate.setter
    def bounce_rate(self, bounce_rate):
        """Sets the bounce_rate of this IndustryStats1.

        The industry bounce rate.  # noqa: E501

        :param bounce_rate: The bounce_rate of this IndustryStats1.  # noqa: E501
        :type: float
        """

        self._bounce_rate = bounce_rate

    @property
    def unopen_rate(self):
        """Gets the unopen_rate of this IndustryStats1.  # noqa: E501

        The industry unopened rate.  # noqa: E501

        :return: The unopen_rate of this IndustryStats1.  # noqa: E501
        :rtype: float
        """
        return self._unopen_rate

    @unopen_rate.setter
    def unopen_rate(self, unopen_rate):
        """Sets the unopen_rate of this IndustryStats1.

        The industry unopened rate.  # noqa: E501

        :param unopen_rate: The unopen_rate of this IndustryStats1.  # noqa: E501
        :type: float
        """

        self._unopen_rate = unopen_rate

    @property
    def unsub_rate(self):
        """Gets the unsub_rate of this IndustryStats1.  # noqa: E501

        The industry unsubscribe rate.  # noqa: E501

        :return: The unsub_rate of this IndustryStats1.  # noqa: E501
        :rtype: float
        """
        return self._unsub_rate

    @unsub_rate.setter
    def unsub_rate(self, unsub_rate):
        """Sets the unsub_rate of this IndustryStats1.

        The industry unsubscribe rate.  # noqa: E501

        :param unsub_rate: The unsub_rate of this IndustryStats1.  # noqa: E501
        :type: float
        """

        self._unsub_rate = unsub_rate

    @property
    def abuse_rate(self):
        """Gets the abuse_rate of this IndustryStats1.  # noqa: E501

        The industry abuse rate.  # noqa: E501

        :return: The abuse_rate of this IndustryStats1.  # noqa: E501
        :rtype: float
        """
        return self._abuse_rate

    @abuse_rate.setter
    def abuse_rate(self, abuse_rate):
        """Sets the abuse_rate of this IndustryStats1.

        The industry abuse rate.  # noqa: E501

        :param abuse_rate: The abuse_rate of this IndustryStats1.  # noqa: E501
        :type: float
        """

        self._abuse_rate = abuse_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IndustryStats1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndustryStats1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
