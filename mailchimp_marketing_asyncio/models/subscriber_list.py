# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SubscriberList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'web_id': 'int',
        'name': 'str',
        'contact': 'ListContact',
        'permission_reminder': 'str',
        'use_archive_bar': 'bool',
        'campaign_defaults': 'CampaignDefaults',
        'notify_on_subscribe': 'str',
        'notify_on_unsubscribe': 'str',
        'date_created': 'datetime',
        'list_rating': 'int',
        'email_type_option': 'bool',
        'subscribe_url_short': 'str',
        'subscribe_url_long': 'str',
        'beamer_address': 'str',
        'visibility': 'str',
        'double_optin': 'bool',
        'has_welcome': 'bool',
        'marketing_permissions': 'bool',
        'modules': 'list[str]',
        'stats': 'Statistics',
        'links': 'list[ResourceLink]'
    }

    attribute_map = {
        'id': 'id',
        'web_id': 'web_id',
        'name': 'name',
        'contact': 'contact',
        'permission_reminder': 'permission_reminder',
        'use_archive_bar': 'use_archive_bar',
        'campaign_defaults': 'campaign_defaults',
        'notify_on_subscribe': 'notify_on_subscribe',
        'notify_on_unsubscribe': 'notify_on_unsubscribe',
        'date_created': 'date_created',
        'list_rating': 'list_rating',
        'email_type_option': 'email_type_option',
        'subscribe_url_short': 'subscribe_url_short',
        'subscribe_url_long': 'subscribe_url_long',
        'beamer_address': 'beamer_address',
        'visibility': 'visibility',
        'double_optin': 'double_optin',
        'has_welcome': 'has_welcome',
        'marketing_permissions': 'marketing_permissions',
        'modules': 'modules',
        'stats': 'stats',
        'links': '_links'
    }

    def __init__(self, id=None, web_id=None, name=None, contact=None, permission_reminder=None, use_archive_bar=False, campaign_defaults=None, notify_on_subscribe='false', notify_on_unsubscribe='false', date_created=None, list_rating=None, email_type_option=None, subscribe_url_short=None, subscribe_url_long=None, beamer_address=None, visibility=None, double_optin=False, has_welcome=False, marketing_permissions=False, modules=None, stats=None, links=None):  # noqa: E501
        """SubscriberList - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._web_id = None
        self._name = None
        self._contact = None
        self._permission_reminder = None
        self._use_archive_bar = None
        self._campaign_defaults = None
        self._notify_on_subscribe = None
        self._notify_on_unsubscribe = None
        self._date_created = None
        self._list_rating = None
        self._email_type_option = None
        self._subscribe_url_short = None
        self._subscribe_url_long = None
        self._beamer_address = None
        self._visibility = None
        self._double_optin = None
        self._has_welcome = None
        self._marketing_permissions = None
        self._modules = None
        self._stats = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if web_id is not None:
            self.web_id = web_id
        if name is not None:
            self.name = name
        if contact is not None:
            self.contact = contact
        if permission_reminder is not None:
            self.permission_reminder = permission_reminder
        if use_archive_bar is not None:
            self.use_archive_bar = use_archive_bar
        if campaign_defaults is not None:
            self.campaign_defaults = campaign_defaults
        if notify_on_subscribe is not None:
            self.notify_on_subscribe = notify_on_subscribe
        if notify_on_unsubscribe is not None:
            self.notify_on_unsubscribe = notify_on_unsubscribe
        if date_created is not None:
            self.date_created = date_created
        if list_rating is not None:
            self.list_rating = list_rating
        if email_type_option is not None:
            self.email_type_option = email_type_option
        if subscribe_url_short is not None:
            self.subscribe_url_short = subscribe_url_short
        if subscribe_url_long is not None:
            self.subscribe_url_long = subscribe_url_long
        if beamer_address is not None:
            self.beamer_address = beamer_address
        if visibility is not None:
            self.visibility = visibility
        if double_optin is not None:
            self.double_optin = double_optin
        if has_welcome is not None:
            self.has_welcome = has_welcome
        if marketing_permissions is not None:
            self.marketing_permissions = marketing_permissions
        if modules is not None:
            self.modules = modules
        if stats is not None:
            self.stats = stats
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this SubscriberList.  # noqa: E501

        A string that uniquely identifies this list.  # noqa: E501

        :return: The id of this SubscriberList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriberList.

        A string that uniquely identifies this list.  # noqa: E501

        :param id: The id of this SubscriberList.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def web_id(self):
        """Gets the web_id of this SubscriberList.  # noqa: E501

        The ID used in the Mailchimp web application. View this list in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/?id={web_id}`.  # noqa: E501

        :return: The web_id of this SubscriberList.  # noqa: E501
        :rtype: int
        """
        return self._web_id

    @web_id.setter
    def web_id(self, web_id):
        """Sets the web_id of this SubscriberList.

        The ID used in the Mailchimp web application. View this list in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/?id={web_id}`.  # noqa: E501

        :param web_id: The web_id of this SubscriberList.  # noqa: E501
        :type: int
        """

        self._web_id = web_id

    @property
    def name(self):
        """Gets the name of this SubscriberList.  # noqa: E501

        The name of the list.  # noqa: E501

        :return: The name of this SubscriberList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubscriberList.

        The name of the list.  # noqa: E501

        :param name: The name of this SubscriberList.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def contact(self):
        """Gets the contact of this SubscriberList.  # noqa: E501


        :return: The contact of this SubscriberList.  # noqa: E501
        :rtype: ListContact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this SubscriberList.


        :param contact: The contact of this SubscriberList.  # noqa: E501
        :type: ListContact
        """

        self._contact = contact

    @property
    def permission_reminder(self):
        """Gets the permission_reminder of this SubscriberList.  # noqa: E501

        The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list.  # noqa: E501

        :return: The permission_reminder of this SubscriberList.  # noqa: E501
        :rtype: str
        """
        return self._permission_reminder

    @permission_reminder.setter
    def permission_reminder(self, permission_reminder):
        """Sets the permission_reminder of this SubscriberList.

        The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list.  # noqa: E501

        :param permission_reminder: The permission_reminder of this SubscriberList.  # noqa: E501
        :type: str
        """

        self._permission_reminder = permission_reminder

    @property
    def use_archive_bar(self):
        """Gets the use_archive_bar of this SubscriberList.  # noqa: E501

        Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default.  # noqa: E501

        :return: The use_archive_bar of this SubscriberList.  # noqa: E501
        :rtype: bool
        """
        return self._use_archive_bar

    @use_archive_bar.setter
    def use_archive_bar(self, use_archive_bar):
        """Sets the use_archive_bar of this SubscriberList.

        Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default.  # noqa: E501

        :param use_archive_bar: The use_archive_bar of this SubscriberList.  # noqa: E501
        :type: bool
        """

        self._use_archive_bar = use_archive_bar

    @property
    def campaign_defaults(self):
        """Gets the campaign_defaults of this SubscriberList.  # noqa: E501


        :return: The campaign_defaults of this SubscriberList.  # noqa: E501
        :rtype: CampaignDefaults
        """
        return self._campaign_defaults

    @campaign_defaults.setter
    def campaign_defaults(self, campaign_defaults):
        """Sets the campaign_defaults of this SubscriberList.


        :param campaign_defaults: The campaign_defaults of this SubscriberList.  # noqa: E501
        :type: CampaignDefaults
        """

        self._campaign_defaults = campaign_defaults

    @property
    def notify_on_subscribe(self):
        """Gets the notify_on_subscribe of this SubscriberList.  # noqa: E501

        The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.  # noqa: E501

        :return: The notify_on_subscribe of this SubscriberList.  # noqa: E501
        :rtype: str
        """
        return self._notify_on_subscribe

    @notify_on_subscribe.setter
    def notify_on_subscribe(self, notify_on_subscribe):
        """Sets the notify_on_subscribe of this SubscriberList.

        The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.  # noqa: E501

        :param notify_on_subscribe: The notify_on_subscribe of this SubscriberList.  # noqa: E501
        :type: str
        """

        self._notify_on_subscribe = notify_on_subscribe

    @property
    def notify_on_unsubscribe(self):
        """Gets the notify_on_unsubscribe of this SubscriberList.  # noqa: E501

        The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.  # noqa: E501

        :return: The notify_on_unsubscribe of this SubscriberList.  # noqa: E501
        :rtype: str
        """
        return self._notify_on_unsubscribe

    @notify_on_unsubscribe.setter
    def notify_on_unsubscribe(self, notify_on_unsubscribe):
        """Sets the notify_on_unsubscribe of this SubscriberList.

        The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.  # noqa: E501

        :param notify_on_unsubscribe: The notify_on_unsubscribe of this SubscriberList.  # noqa: E501
        :type: str
        """

        self._notify_on_unsubscribe = notify_on_unsubscribe

    @property
    def date_created(self):
        """Gets the date_created of this SubscriberList.  # noqa: E501

        The date and time that this list was created in ISO 8601 format.  # noqa: E501

        :return: The date_created of this SubscriberList.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this SubscriberList.

        The date and time that this list was created in ISO 8601 format.  # noqa: E501

        :param date_created: The date_created of this SubscriberList.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def list_rating(self):
        """Gets the list_rating of this SubscriberList.  # noqa: E501

        An auto-generated activity score for the list (0-5).  # noqa: E501

        :return: The list_rating of this SubscriberList.  # noqa: E501
        :rtype: int
        """
        return self._list_rating

    @list_rating.setter
    def list_rating(self, list_rating):
        """Sets the list_rating of this SubscriberList.

        An auto-generated activity score for the list (0-5).  # noqa: E501

        :param list_rating: The list_rating of this SubscriberList.  # noqa: E501
        :type: int
        """

        self._list_rating = list_rating

    @property
    def email_type_option(self):
        """Gets the email_type_option of this SubscriberList.  # noqa: E501

        Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup.  # noqa: E501

        :return: The email_type_option of this SubscriberList.  # noqa: E501
        :rtype: bool
        """
        return self._email_type_option

    @email_type_option.setter
    def email_type_option(self, email_type_option):
        """Sets the email_type_option of this SubscriberList.

        Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup.  # noqa: E501

        :param email_type_option: The email_type_option of this SubscriberList.  # noqa: E501
        :type: bool
        """

        self._email_type_option = email_type_option

    @property
    def subscribe_url_short(self):
        """Gets the subscribe_url_short of this SubscriberList.  # noqa: E501

        Our [url shortened](https://mailchimp.com/help/share-your-signup-form/) version of this list's subscribe form.  # noqa: E501

        :return: The subscribe_url_short of this SubscriberList.  # noqa: E501
        :rtype: str
        """
        return self._subscribe_url_short

    @subscribe_url_short.setter
    def subscribe_url_short(self, subscribe_url_short):
        """Sets the subscribe_url_short of this SubscriberList.

        Our [url shortened](https://mailchimp.com/help/share-your-signup-form/) version of this list's subscribe form.  # noqa: E501

        :param subscribe_url_short: The subscribe_url_short of this SubscriberList.  # noqa: E501
        :type: str
        """

        self._subscribe_url_short = subscribe_url_short

    @property
    def subscribe_url_long(self):
        """Gets the subscribe_url_long of this SubscriberList.  # noqa: E501

        The full version of this list's subscribe form (host will vary).  # noqa: E501

        :return: The subscribe_url_long of this SubscriberList.  # noqa: E501
        :rtype: str
        """
        return self._subscribe_url_long

    @subscribe_url_long.setter
    def subscribe_url_long(self, subscribe_url_long):
        """Sets the subscribe_url_long of this SubscriberList.

        The full version of this list's subscribe form (host will vary).  # noqa: E501

        :param subscribe_url_long: The subscribe_url_long of this SubscriberList.  # noqa: E501
        :type: str
        """

        self._subscribe_url_long = subscribe_url_long

    @property
    def beamer_address(self):
        """Gets the beamer_address of this SubscriberList.  # noqa: E501

        The list's [Email Beamer](https://mailchimp.com/help/use-email-beamer-to-create-a-campaign/) address.  # noqa: E501

        :return: The beamer_address of this SubscriberList.  # noqa: E501
        :rtype: str
        """
        return self._beamer_address

    @beamer_address.setter
    def beamer_address(self, beamer_address):
        """Sets the beamer_address of this SubscriberList.

        The list's [Email Beamer](https://mailchimp.com/help/use-email-beamer-to-create-a-campaign/) address.  # noqa: E501

        :param beamer_address: The beamer_address of this SubscriberList.  # noqa: E501
        :type: str
        """

        self._beamer_address = beamer_address

    @property
    def visibility(self):
        """Gets the visibility of this SubscriberList.  # noqa: E501

        Legacy - visibility settings are no longer used  # noqa: E501

        :return: The visibility of this SubscriberList.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this SubscriberList.

        Legacy - visibility settings are no longer used  # noqa: E501

        :param visibility: The visibility of this SubscriberList.  # noqa: E501
        :type: str
        """
        allowed_values = ["pub", "prv"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"  # noqa: E501
                .format(visibility, allowed_values)
            )

        self._visibility = visibility

    @property
    def double_optin(self):
        """Gets the double_optin of this SubscriberList.  # noqa: E501

        Whether or not to require the subscriber to confirm subscription via email.  # noqa: E501

        :return: The double_optin of this SubscriberList.  # noqa: E501
        :rtype: bool
        """
        return self._double_optin

    @double_optin.setter
    def double_optin(self, double_optin):
        """Sets the double_optin of this SubscriberList.

        Whether or not to require the subscriber to confirm subscription via email.  # noqa: E501

        :param double_optin: The double_optin of this SubscriberList.  # noqa: E501
        :type: bool
        """

        self._double_optin = double_optin

    @property
    def has_welcome(self):
        """Gets the has_welcome of this SubscriberList.  # noqa: E501

        Whether or not this list has a welcome automation connected. Welcome Automations: welcomeSeries, singleWelcome, emailFollowup.  # noqa: E501

        :return: The has_welcome of this SubscriberList.  # noqa: E501
        :rtype: bool
        """
        return self._has_welcome

    @has_welcome.setter
    def has_welcome(self, has_welcome):
        """Sets the has_welcome of this SubscriberList.

        Whether or not this list has a welcome automation connected. Welcome Automations: welcomeSeries, singleWelcome, emailFollowup.  # noqa: E501

        :param has_welcome: The has_welcome of this SubscriberList.  # noqa: E501
        :type: bool
        """

        self._has_welcome = has_welcome

    @property
    def marketing_permissions(self):
        """Gets the marketing_permissions of this SubscriberList.  # noqa: E501

        Whether or not the list has marketing permissions (eg. GDPR) enabled.  # noqa: E501

        :return: The marketing_permissions of this SubscriberList.  # noqa: E501
        :rtype: bool
        """
        return self._marketing_permissions

    @marketing_permissions.setter
    def marketing_permissions(self, marketing_permissions):
        """Sets the marketing_permissions of this SubscriberList.

        Whether or not the list has marketing permissions (eg. GDPR) enabled.  # noqa: E501

        :param marketing_permissions: The marketing_permissions of this SubscriberList.  # noqa: E501
        :type: bool
        """

        self._marketing_permissions = marketing_permissions

    @property
    def modules(self):
        """Gets the modules of this SubscriberList.  # noqa: E501

        Any list-specific modules installed for this list.  # noqa: E501

        :return: The modules of this SubscriberList.  # noqa: E501
        :rtype: list[str]
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this SubscriberList.

        Any list-specific modules installed for this list.  # noqa: E501

        :param modules: The modules of this SubscriberList.  # noqa: E501
        :type: list[str]
        """

        self._modules = modules

    @property
    def stats(self):
        """Gets the stats of this SubscriberList.  # noqa: E501


        :return: The stats of this SubscriberList.  # noqa: E501
        :rtype: Statistics
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this SubscriberList.


        :param stats: The stats of this SubscriberList.  # noqa: E501
        :type: Statistics
        """

        self._stats = stats

    @property
    def links(self):
        """Gets the links of this SubscriberList.  # noqa: E501

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :return: The links of this SubscriberList.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this SubscriberList.

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :param links: The links of this SubscriberList.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriberList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriberList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
