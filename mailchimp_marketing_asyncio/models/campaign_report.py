# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CampaignReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'campaign_title': 'str',
        'type': 'str',
        'list_id': 'str',
        'list_is_active': 'bool',
        'list_name': 'str',
        'subject_line': 'str',
        'preview_text': 'str',
        'emails_sent': 'int',
        'abuse_reports': 'int',
        'unsubscribed': 'int',
        'send_time': 'datetime',
        'rss_last_send': 'datetime',
        'bounces': 'Bounces',
        'forwards': 'Forwards',
        'opens': 'Opens',
        'clicks': 'Clicks',
        'facebook_likes': 'FacebookLikes',
        'industry_stats': 'IndustryStats1',
        'list_stats': 'ListStats',
        'ab_split': 'ABSplitStats',
        'timewarp': 'list[CampaignReports1Timewarp]',
        'timeseries': 'list[CampaignReports1Timeseries]',
        'share_report': 'ShareReport',
        'ecommerce': 'ECommerceReport1',
        'delivery_status': 'CampaignDeliveryStatus',
        'links': 'list[ResourceLink]'
    }

    attribute_map = {
        'id': 'id',
        'campaign_title': 'campaign_title',
        'type': 'type',
        'list_id': 'list_id',
        'list_is_active': 'list_is_active',
        'list_name': 'list_name',
        'subject_line': 'subject_line',
        'preview_text': 'preview_text',
        'emails_sent': 'emails_sent',
        'abuse_reports': 'abuse_reports',
        'unsubscribed': 'unsubscribed',
        'send_time': 'send_time',
        'rss_last_send': 'rss_last_send',
        'bounces': 'bounces',
        'forwards': 'forwards',
        'opens': 'opens',
        'clicks': 'clicks',
        'facebook_likes': 'facebook_likes',
        'industry_stats': 'industry_stats',
        'list_stats': 'list_stats',
        'ab_split': 'ab_split',
        'timewarp': 'timewarp',
        'timeseries': 'timeseries',
        'share_report': 'share_report',
        'ecommerce': 'ecommerce',
        'delivery_status': 'delivery_status',
        'links': '_links'
    }

    def __init__(self, id=None, campaign_title=None, type=None, list_id=None, list_is_active=None, list_name=None, subject_line=None, preview_text=None, emails_sent=None, abuse_reports=None, unsubscribed=None, send_time=None, rss_last_send=None, bounces=None, forwards=None, opens=None, clicks=None, facebook_likes=None, industry_stats=None, list_stats=None, ab_split=None, timewarp=None, timeseries=None, share_report=None, ecommerce=None, delivery_status=None, links=None):  # noqa: E501
        """CampaignReport - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._campaign_title = None
        self._type = None
        self._list_id = None
        self._list_is_active = None
        self._list_name = None
        self._subject_line = None
        self._preview_text = None
        self._emails_sent = None
        self._abuse_reports = None
        self._unsubscribed = None
        self._send_time = None
        self._rss_last_send = None
        self._bounces = None
        self._forwards = None
        self._opens = None
        self._clicks = None
        self._facebook_likes = None
        self._industry_stats = None
        self._list_stats = None
        self._ab_split = None
        self._timewarp = None
        self._timeseries = None
        self._share_report = None
        self._ecommerce = None
        self._delivery_status = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if campaign_title is not None:
            self.campaign_title = campaign_title
        if type is not None:
            self.type = type
        if list_id is not None:
            self.list_id = list_id
        if list_is_active is not None:
            self.list_is_active = list_is_active
        if list_name is not None:
            self.list_name = list_name
        if subject_line is not None:
            self.subject_line = subject_line
        if preview_text is not None:
            self.preview_text = preview_text
        if emails_sent is not None:
            self.emails_sent = emails_sent
        if abuse_reports is not None:
            self.abuse_reports = abuse_reports
        if unsubscribed is not None:
            self.unsubscribed = unsubscribed
        if send_time is not None:
            self.send_time = send_time
        if rss_last_send is not None:
            self.rss_last_send = rss_last_send
        if bounces is not None:
            self.bounces = bounces
        if forwards is not None:
            self.forwards = forwards
        if opens is not None:
            self.opens = opens
        if clicks is not None:
            self.clicks = clicks
        if facebook_likes is not None:
            self.facebook_likes = facebook_likes
        if industry_stats is not None:
            self.industry_stats = industry_stats
        if list_stats is not None:
            self.list_stats = list_stats
        if ab_split is not None:
            self.ab_split = ab_split
        if timewarp is not None:
            self.timewarp = timewarp
        if timeseries is not None:
            self.timeseries = timeseries
        if share_report is not None:
            self.share_report = share_report
        if ecommerce is not None:
            self.ecommerce = ecommerce
        if delivery_status is not None:
            self.delivery_status = delivery_status
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this CampaignReport.  # noqa: E501

        A string that uniquely identifies this campaign.  # noqa: E501

        :return: The id of this CampaignReport.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CampaignReport.

        A string that uniquely identifies this campaign.  # noqa: E501

        :param id: The id of this CampaignReport.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def campaign_title(self):
        """Gets the campaign_title of this CampaignReport.  # noqa: E501

        The title of the campaign.  # noqa: E501

        :return: The campaign_title of this CampaignReport.  # noqa: E501
        :rtype: str
        """
        return self._campaign_title

    @campaign_title.setter
    def campaign_title(self, campaign_title):
        """Sets the campaign_title of this CampaignReport.

        The title of the campaign.  # noqa: E501

        :param campaign_title: The campaign_title of this CampaignReport.  # noqa: E501
        :type: str
        """

        self._campaign_title = campaign_title

    @property
    def type(self):
        """Gets the type of this CampaignReport.  # noqa: E501

        The type of campaign (regular, plain-text, ab_split, rss, automation, variate, or auto).  # noqa: E501

        :return: The type of this CampaignReport.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CampaignReport.

        The type of campaign (regular, plain-text, ab_split, rss, automation, variate, or auto).  # noqa: E501

        :param type: The type of this CampaignReport.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def list_id(self):
        """Gets the list_id of this CampaignReport.  # noqa: E501

        The unique list id.  # noqa: E501

        :return: The list_id of this CampaignReport.  # noqa: E501
        :rtype: str
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this CampaignReport.

        The unique list id.  # noqa: E501

        :param list_id: The list_id of this CampaignReport.  # noqa: E501
        :type: str
        """

        self._list_id = list_id

    @property
    def list_is_active(self):
        """Gets the list_is_active of this CampaignReport.  # noqa: E501

        The status of the list used, namely if it's deleted or disabled.  # noqa: E501

        :return: The list_is_active of this CampaignReport.  # noqa: E501
        :rtype: bool
        """
        return self._list_is_active

    @list_is_active.setter
    def list_is_active(self, list_is_active):
        """Sets the list_is_active of this CampaignReport.

        The status of the list used, namely if it's deleted or disabled.  # noqa: E501

        :param list_is_active: The list_is_active of this CampaignReport.  # noqa: E501
        :type: bool
        """

        self._list_is_active = list_is_active

    @property
    def list_name(self):
        """Gets the list_name of this CampaignReport.  # noqa: E501

        The name of the list.  # noqa: E501

        :return: The list_name of this CampaignReport.  # noqa: E501
        :rtype: str
        """
        return self._list_name

    @list_name.setter
    def list_name(self, list_name):
        """Sets the list_name of this CampaignReport.

        The name of the list.  # noqa: E501

        :param list_name: The list_name of this CampaignReport.  # noqa: E501
        :type: str
        """

        self._list_name = list_name

    @property
    def subject_line(self):
        """Gets the subject_line of this CampaignReport.  # noqa: E501

        The subject line for the campaign.  # noqa: E501

        :return: The subject_line of this CampaignReport.  # noqa: E501
        :rtype: str
        """
        return self._subject_line

    @subject_line.setter
    def subject_line(self, subject_line):
        """Sets the subject_line of this CampaignReport.

        The subject line for the campaign.  # noqa: E501

        :param subject_line: The subject_line of this CampaignReport.  # noqa: E501
        :type: str
        """

        self._subject_line = subject_line

    @property
    def preview_text(self):
        """Gets the preview_text of this CampaignReport.  # noqa: E501

        The preview text for the campaign.  # noqa: E501

        :return: The preview_text of this CampaignReport.  # noqa: E501
        :rtype: str
        """
        return self._preview_text

    @preview_text.setter
    def preview_text(self, preview_text):
        """Sets the preview_text of this CampaignReport.

        The preview text for the campaign.  # noqa: E501

        :param preview_text: The preview_text of this CampaignReport.  # noqa: E501
        :type: str
        """

        self._preview_text = preview_text

    @property
    def emails_sent(self):
        """Gets the emails_sent of this CampaignReport.  # noqa: E501

        The total number of emails sent for this campaign.  # noqa: E501

        :return: The emails_sent of this CampaignReport.  # noqa: E501
        :rtype: int
        """
        return self._emails_sent

    @emails_sent.setter
    def emails_sent(self, emails_sent):
        """Sets the emails_sent of this CampaignReport.

        The total number of emails sent for this campaign.  # noqa: E501

        :param emails_sent: The emails_sent of this CampaignReport.  # noqa: E501
        :type: int
        """

        self._emails_sent = emails_sent

    @property
    def abuse_reports(self):
        """Gets the abuse_reports of this CampaignReport.  # noqa: E501

        The number of abuse reports generated for this campaign.  # noqa: E501

        :return: The abuse_reports of this CampaignReport.  # noqa: E501
        :rtype: int
        """
        return self._abuse_reports

    @abuse_reports.setter
    def abuse_reports(self, abuse_reports):
        """Sets the abuse_reports of this CampaignReport.

        The number of abuse reports generated for this campaign.  # noqa: E501

        :param abuse_reports: The abuse_reports of this CampaignReport.  # noqa: E501
        :type: int
        """

        self._abuse_reports = abuse_reports

    @property
    def unsubscribed(self):
        """Gets the unsubscribed of this CampaignReport.  # noqa: E501

        The total number of unsubscribed members for this campaign.  # noqa: E501

        :return: The unsubscribed of this CampaignReport.  # noqa: E501
        :rtype: int
        """
        return self._unsubscribed

    @unsubscribed.setter
    def unsubscribed(self, unsubscribed):
        """Sets the unsubscribed of this CampaignReport.

        The total number of unsubscribed members for this campaign.  # noqa: E501

        :param unsubscribed: The unsubscribed of this CampaignReport.  # noqa: E501
        :type: int
        """

        self._unsubscribed = unsubscribed

    @property
    def send_time(self):
        """Gets the send_time of this CampaignReport.  # noqa: E501

        The date and time a campaign was sent in ISO 8601 format.  # noqa: E501

        :return: The send_time of this CampaignReport.  # noqa: E501
        :rtype: datetime
        """
        return self._send_time

    @send_time.setter
    def send_time(self, send_time):
        """Sets the send_time of this CampaignReport.

        The date and time a campaign was sent in ISO 8601 format.  # noqa: E501

        :param send_time: The send_time of this CampaignReport.  # noqa: E501
        :type: datetime
        """

        self._send_time = send_time

    @property
    def rss_last_send(self):
        """Gets the rss_last_send of this CampaignReport.  # noqa: E501

        For RSS campaigns, the date and time of the last send in ISO 8601 format.  # noqa: E501

        :return: The rss_last_send of this CampaignReport.  # noqa: E501
        :rtype: datetime
        """
        return self._rss_last_send

    @rss_last_send.setter
    def rss_last_send(self, rss_last_send):
        """Sets the rss_last_send of this CampaignReport.

        For RSS campaigns, the date and time of the last send in ISO 8601 format.  # noqa: E501

        :param rss_last_send: The rss_last_send of this CampaignReport.  # noqa: E501
        :type: datetime
        """

        self._rss_last_send = rss_last_send

    @property
    def bounces(self):
        """Gets the bounces of this CampaignReport.  # noqa: E501


        :return: The bounces of this CampaignReport.  # noqa: E501
        :rtype: Bounces
        """
        return self._bounces

    @bounces.setter
    def bounces(self, bounces):
        """Sets the bounces of this CampaignReport.


        :param bounces: The bounces of this CampaignReport.  # noqa: E501
        :type: Bounces
        """

        self._bounces = bounces

    @property
    def forwards(self):
        """Gets the forwards of this CampaignReport.  # noqa: E501


        :return: The forwards of this CampaignReport.  # noqa: E501
        :rtype: Forwards
        """
        return self._forwards

    @forwards.setter
    def forwards(self, forwards):
        """Sets the forwards of this CampaignReport.


        :param forwards: The forwards of this CampaignReport.  # noqa: E501
        :type: Forwards
        """

        self._forwards = forwards

    @property
    def opens(self):
        """Gets the opens of this CampaignReport.  # noqa: E501


        :return: The opens of this CampaignReport.  # noqa: E501
        :rtype: Opens
        """
        return self._opens

    @opens.setter
    def opens(self, opens):
        """Sets the opens of this CampaignReport.


        :param opens: The opens of this CampaignReport.  # noqa: E501
        :type: Opens
        """

        self._opens = opens

    @property
    def clicks(self):
        """Gets the clicks of this CampaignReport.  # noqa: E501


        :return: The clicks of this CampaignReport.  # noqa: E501
        :rtype: Clicks
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this CampaignReport.


        :param clicks: The clicks of this CampaignReport.  # noqa: E501
        :type: Clicks
        """

        self._clicks = clicks

    @property
    def facebook_likes(self):
        """Gets the facebook_likes of this CampaignReport.  # noqa: E501


        :return: The facebook_likes of this CampaignReport.  # noqa: E501
        :rtype: FacebookLikes
        """
        return self._facebook_likes

    @facebook_likes.setter
    def facebook_likes(self, facebook_likes):
        """Sets the facebook_likes of this CampaignReport.


        :param facebook_likes: The facebook_likes of this CampaignReport.  # noqa: E501
        :type: FacebookLikes
        """

        self._facebook_likes = facebook_likes

    @property
    def industry_stats(self):
        """Gets the industry_stats of this CampaignReport.  # noqa: E501


        :return: The industry_stats of this CampaignReport.  # noqa: E501
        :rtype: IndustryStats1
        """
        return self._industry_stats

    @industry_stats.setter
    def industry_stats(self, industry_stats):
        """Sets the industry_stats of this CampaignReport.


        :param industry_stats: The industry_stats of this CampaignReport.  # noqa: E501
        :type: IndustryStats1
        """

        self._industry_stats = industry_stats

    @property
    def list_stats(self):
        """Gets the list_stats of this CampaignReport.  # noqa: E501


        :return: The list_stats of this CampaignReport.  # noqa: E501
        :rtype: ListStats
        """
        return self._list_stats

    @list_stats.setter
    def list_stats(self, list_stats):
        """Sets the list_stats of this CampaignReport.


        :param list_stats: The list_stats of this CampaignReport.  # noqa: E501
        :type: ListStats
        """

        self._list_stats = list_stats

    @property
    def ab_split(self):
        """Gets the ab_split of this CampaignReport.  # noqa: E501


        :return: The ab_split of this CampaignReport.  # noqa: E501
        :rtype: ABSplitStats
        """
        return self._ab_split

    @ab_split.setter
    def ab_split(self, ab_split):
        """Sets the ab_split of this CampaignReport.


        :param ab_split: The ab_split of this CampaignReport.  # noqa: E501
        :type: ABSplitStats
        """

        self._ab_split = ab_split

    @property
    def timewarp(self):
        """Gets the timewarp of this CampaignReport.  # noqa: E501

        An hourly breakdown of sends, opens, and clicks if a campaign is sent using timewarp.  # noqa: E501

        :return: The timewarp of this CampaignReport.  # noqa: E501
        :rtype: list[CampaignReports1Timewarp]
        """
        return self._timewarp

    @timewarp.setter
    def timewarp(self, timewarp):
        """Sets the timewarp of this CampaignReport.

        An hourly breakdown of sends, opens, and clicks if a campaign is sent using timewarp.  # noqa: E501

        :param timewarp: The timewarp of this CampaignReport.  # noqa: E501
        :type: list[CampaignReports1Timewarp]
        """

        self._timewarp = timewarp

    @property
    def timeseries(self):
        """Gets the timeseries of this CampaignReport.  # noqa: E501

        An hourly breakdown of the performance of the campaign over the first 24 hours.  # noqa: E501

        :return: The timeseries of this CampaignReport.  # noqa: E501
        :rtype: list[CampaignReports1Timeseries]
        """
        return self._timeseries

    @timeseries.setter
    def timeseries(self, timeseries):
        """Sets the timeseries of this CampaignReport.

        An hourly breakdown of the performance of the campaign over the first 24 hours.  # noqa: E501

        :param timeseries: The timeseries of this CampaignReport.  # noqa: E501
        :type: list[CampaignReports1Timeseries]
        """

        self._timeseries = timeseries

    @property
    def share_report(self):
        """Gets the share_report of this CampaignReport.  # noqa: E501


        :return: The share_report of this CampaignReport.  # noqa: E501
        :rtype: ShareReport
        """
        return self._share_report

    @share_report.setter
    def share_report(self, share_report):
        """Sets the share_report of this CampaignReport.


        :param share_report: The share_report of this CampaignReport.  # noqa: E501
        :type: ShareReport
        """

        self._share_report = share_report

    @property
    def ecommerce(self):
        """Gets the ecommerce of this CampaignReport.  # noqa: E501


        :return: The ecommerce of this CampaignReport.  # noqa: E501
        :rtype: ECommerceReport1
        """
        return self._ecommerce

    @ecommerce.setter
    def ecommerce(self, ecommerce):
        """Sets the ecommerce of this CampaignReport.


        :param ecommerce: The ecommerce of this CampaignReport.  # noqa: E501
        :type: ECommerceReport1
        """

        self._ecommerce = ecommerce

    @property
    def delivery_status(self):
        """Gets the delivery_status of this CampaignReport.  # noqa: E501


        :return: The delivery_status of this CampaignReport.  # noqa: E501
        :rtype: CampaignDeliveryStatus
        """
        return self._delivery_status

    @delivery_status.setter
    def delivery_status(self, delivery_status):
        """Sets the delivery_status of this CampaignReport.


        :param delivery_status: The delivery_status of this CampaignReport.  # noqa: E501
        :type: CampaignDeliveryStatus
        """

        self._delivery_status = delivery_status

    @property
    def links(self):
        """Gets the links of this CampaignReport.  # noqa: E501

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :return: The links of this CampaignReport.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CampaignReport.

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :param links: The links of this CampaignReport.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CampaignReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
