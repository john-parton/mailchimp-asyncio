# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2009Budget(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'duration': 'int',
        'total_amount': 'float',
        'currency_code': 'str'
    }

    attribute_map = {
        'duration': 'duration',
        'total_amount': 'total_amount',
        'currency_code': 'currency_code'
    }

    def __init__(self, duration=None, total_amount=None, currency_code=None):  # noqa: E501
        """InlineResponse2009Budget - a model defined in Swagger"""  # noqa: E501

        self._duration = None
        self._total_amount = None
        self._currency_code = None
        self.discriminator = None

        if duration is not None:
            self.duration = duration
        if total_amount is not None:
            self.total_amount = total_amount
        if currency_code is not None:
            self.currency_code = currency_code

    @property
    def duration(self):
        """Gets the duration of this InlineResponse2009Budget.  # noqa: E501

        Duration of the ad in seconds  # noqa: E501

        :return: The duration of this InlineResponse2009Budget.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this InlineResponse2009Budget.

        Duration of the ad in seconds  # noqa: E501

        :param duration: The duration of this InlineResponse2009Budget.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def total_amount(self):
        """Gets the total_amount of this InlineResponse2009Budget.  # noqa: E501

        Total budget of the ad  # noqa: E501

        :return: The total_amount of this InlineResponse2009Budget.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this InlineResponse2009Budget.

        Total budget of the ad  # noqa: E501

        :param total_amount: The total_amount of this InlineResponse2009Budget.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    @property
    def currency_code(self):
        """Gets the currency_code of this InlineResponse2009Budget.  # noqa: E501

        Currency code  # noqa: E501

        :return: The currency_code of this InlineResponse2009Budget.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this InlineResponse2009Budget.

        Currency code  # noqa: E501

        :param currency_code: The currency_code of this InlineResponse2009Budget.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2009Budget, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2009Budget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
