# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ABTestOptions1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'winner_criteria': 'str',
        'wait_time': 'int',
        'test_size': 'int',
        'subject_lines': 'list[str]',
        'send_times': 'list[datetime]',
        'from_names': 'list[str]',
        'reply_to_addresses': 'list[str]'
    }

    attribute_map = {
        'winner_criteria': 'winner_criteria',
        'wait_time': 'wait_time',
        'test_size': 'test_size',
        'subject_lines': 'subject_lines',
        'send_times': 'send_times',
        'from_names': 'from_names',
        'reply_to_addresses': 'reply_to_addresses'
    }

    def __init__(self, winner_criteria=None, wait_time=None, test_size=None, subject_lines=None, send_times=None, from_names=None, reply_to_addresses=None):  # noqa: E501
        """ABTestOptions1 - a model defined in Swagger"""  # noqa: E501

        self._winner_criteria = None
        self._wait_time = None
        self._test_size = None
        self._subject_lines = None
        self._send_times = None
        self._from_names = None
        self._reply_to_addresses = None
        self.discriminator = None

        self.winner_criteria = winner_criteria
        if wait_time is not None:
            self.wait_time = wait_time
        if test_size is not None:
            self.test_size = test_size
        if subject_lines is not None:
            self.subject_lines = subject_lines
        if send_times is not None:
            self.send_times = send_times
        if from_names is not None:
            self.from_names = from_names
        if reply_to_addresses is not None:
            self.reply_to_addresses = reply_to_addresses

    @property
    def winner_criteria(self):
        """Gets the winner_criteria of this ABTestOptions1.  # noqa: E501

        The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.  # noqa: E501

        :return: The winner_criteria of this ABTestOptions1.  # noqa: E501
        :rtype: str
        """
        return self._winner_criteria

    @winner_criteria.setter
    def winner_criteria(self, winner_criteria):
        """Sets the winner_criteria of this ABTestOptions1.

        The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application.  # noqa: E501

        :param winner_criteria: The winner_criteria of this ABTestOptions1.  # noqa: E501
        :type: str
        """
        if winner_criteria is None:
            raise ValueError("Invalid value for `winner_criteria`, must not be `None`")  # noqa: E501
        allowed_values = ["opens", "clicks", "manual", "total_revenue"]  # noqa: E501
        if winner_criteria not in allowed_values:
            raise ValueError(
                "Invalid value for `winner_criteria` ({0}), must be one of {1}"  # noqa: E501
                .format(winner_criteria, allowed_values)
            )

        self._winner_criteria = winner_criteria

    @property
    def wait_time(self):
        """Gets the wait_time of this ABTestOptions1.  # noqa: E501

        The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes.  # noqa: E501

        :return: The wait_time of this ABTestOptions1.  # noqa: E501
        :rtype: int
        """
        return self._wait_time

    @wait_time.setter
    def wait_time(self, wait_time):
        """Sets the wait_time of this ABTestOptions1.

        The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes.  # noqa: E501

        :param wait_time: The wait_time of this ABTestOptions1.  # noqa: E501
        :type: int
        """

        self._wait_time = wait_time

    @property
    def test_size(self):
        """Gets the test_size of this ABTestOptions1.  # noqa: E501

        The percentage of recipients to send the test combinations to, must be a value between 10 and 100.  # noqa: E501

        :return: The test_size of this ABTestOptions1.  # noqa: E501
        :rtype: int
        """
        return self._test_size

    @test_size.setter
    def test_size(self, test_size):
        """Sets the test_size of this ABTestOptions1.

        The percentage of recipients to send the test combinations to, must be a value between 10 and 100.  # noqa: E501

        :param test_size: The test_size of this ABTestOptions1.  # noqa: E501
        :type: int
        """

        self._test_size = test_size

    @property
    def subject_lines(self):
        """Gets the subject_lines of this ABTestOptions1.  # noqa: E501

        The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used.  # noqa: E501

        :return: The subject_lines of this ABTestOptions1.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_lines

    @subject_lines.setter
    def subject_lines(self, subject_lines):
        """Sets the subject_lines of this ABTestOptions1.

        The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used.  # noqa: E501

        :param subject_lines: The subject_lines of this ABTestOptions1.  # noqa: E501
        :type: list[str]
        """

        self._subject_lines = subject_lines

    @property
    def send_times(self):
        """Gets the send_times of this ABTestOptions1.  # noqa: E501

        The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored.  # noqa: E501

        :return: The send_times of this ABTestOptions1.  # noqa: E501
        :rtype: list[datetime]
        """
        return self._send_times

    @send_times.setter
    def send_times(self, send_times):
        """Sets the send_times of this ABTestOptions1.

        The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored.  # noqa: E501

        :param send_times: The send_times of this ABTestOptions1.  # noqa: E501
        :type: list[datetime]
        """

        self._send_times = send_times

    @property
    def from_names(self):
        """Gets the from_names of this ABTestOptions1.  # noqa: E501

        The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used.  # noqa: E501

        :return: The from_names of this ABTestOptions1.  # noqa: E501
        :rtype: list[str]
        """
        return self._from_names

    @from_names.setter
    def from_names(self, from_names):
        """Sets the from_names of this ABTestOptions1.

        The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used.  # noqa: E501

        :param from_names: The from_names of this ABTestOptions1.  # noqa: E501
        :type: list[str]
        """

        self._from_names = from_names

    @property
    def reply_to_addresses(self):
        """Gets the reply_to_addresses of this ABTestOptions1.  # noqa: E501

        The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used.  # noqa: E501

        :return: The reply_to_addresses of this ABTestOptions1.  # noqa: E501
        :rtype: list[str]
        """
        return self._reply_to_addresses

    @reply_to_addresses.setter
    def reply_to_addresses(self, reply_to_addresses):
        """Sets the reply_to_addresses of this ABTestOptions1.

        The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used.  # noqa: E501

        :param reply_to_addresses: The reply_to_addresses of this ABTestOptions1.  # noqa: E501
        :type: list[str]
        """

        self._reply_to_addresses = reply_to_addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ABTestOptions1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ABTestOptions1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
