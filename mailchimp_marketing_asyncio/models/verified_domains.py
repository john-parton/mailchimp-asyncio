# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VerifiedDomains(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain': 'str',
        'verified': 'bool',
        'authenticated': 'bool',
        'verification_email': 'str',
        'verification_sent': 'datetime'
    }

    attribute_map = {
        'domain': 'domain',
        'verified': 'verified',
        'authenticated': 'authenticated',
        'verification_email': 'verification_email',
        'verification_sent': 'verification_sent'
    }

    def __init__(self, domain=None, verified=None, authenticated=None, verification_email=None, verification_sent=None):  # noqa: E501
        """VerifiedDomains - a model defined in Swagger"""  # noqa: E501

        self._domain = None
        self._verified = None
        self._authenticated = None
        self._verification_email = None
        self._verification_sent = None
        self.discriminator = None

        if domain is not None:
            self.domain = domain
        if verified is not None:
            self.verified = verified
        if authenticated is not None:
            self.authenticated = authenticated
        if verification_email is not None:
            self.verification_email = verification_email
        if verification_sent is not None:
            self.verification_sent = verification_sent

    @property
    def domain(self):
        """Gets the domain of this VerifiedDomains.  # noqa: E501

        The name of this domain.  # noqa: E501

        :return: The domain of this VerifiedDomains.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this VerifiedDomains.

        The name of this domain.  # noqa: E501

        :param domain: The domain of this VerifiedDomains.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def verified(self):
        """Gets the verified of this VerifiedDomains.  # noqa: E501

        Whether the domain has been verified for sending.  # noqa: E501

        :return: The verified of this VerifiedDomains.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this VerifiedDomains.

        Whether the domain has been verified for sending.  # noqa: E501

        :param verified: The verified of this VerifiedDomains.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    @property
    def authenticated(self):
        """Gets the authenticated of this VerifiedDomains.  # noqa: E501

        Whether domain authentication is enabled for this domain.  # noqa: E501

        :return: The authenticated of this VerifiedDomains.  # noqa: E501
        :rtype: bool
        """
        return self._authenticated

    @authenticated.setter
    def authenticated(self, authenticated):
        """Sets the authenticated of this VerifiedDomains.

        Whether domain authentication is enabled for this domain.  # noqa: E501

        :param authenticated: The authenticated of this VerifiedDomains.  # noqa: E501
        :type: bool
        """

        self._authenticated = authenticated

    @property
    def verification_email(self):
        """Gets the verification_email of this VerifiedDomains.  # noqa: E501

        The e-mail address receiving the two-factor challenge for this domain.  # noqa: E501

        :return: The verification_email of this VerifiedDomains.  # noqa: E501
        :rtype: str
        """
        return self._verification_email

    @verification_email.setter
    def verification_email(self, verification_email):
        """Sets the verification_email of this VerifiedDomains.

        The e-mail address receiving the two-factor challenge for this domain.  # noqa: E501

        :param verification_email: The verification_email of this VerifiedDomains.  # noqa: E501
        :type: str
        """

        self._verification_email = verification_email

    @property
    def verification_sent(self):
        """Gets the verification_sent of this VerifiedDomains.  # noqa: E501

        The date/time that the two-factor challenge was sent to the verification email.  # noqa: E501

        :return: The verification_sent of this VerifiedDomains.  # noqa: E501
        :rtype: datetime
        """
        return self._verification_sent

    @verification_sent.setter
    def verification_sent(self, verification_sent):
        """Sets the verification_sent of this VerifiedDomains.

        The date/time that the two-factor challenge was sent to the verification email.  # noqa: E501

        :param verification_sent: The verification_sent of this VerifiedDomains.  # noqa: E501
        :type: datetime
        """

        self._verification_sent = verification_sent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VerifiedDomains, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerifiedDomains):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
