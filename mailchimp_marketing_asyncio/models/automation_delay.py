# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AutomationDelay(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'int',
        'type': 'str',
        'direction': 'str',
        'action': 'str',
        'action_description': 'str',
        'full_description': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'type': 'type',
        'direction': 'direction',
        'action': 'action',
        'action_description': 'action_description',
        'full_description': 'full_description'
    }

    def __init__(self, amount=None, type=None, direction=None, action=None, action_description=None, full_description=None):  # noqa: E501
        """AutomationDelay - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._type = None
        self._direction = None
        self._action = None
        self._action_description = None
        self._full_description = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if type is not None:
            self.type = type
        if direction is not None:
            self.direction = direction
        if action is not None:
            self.action = action
        if action_description is not None:
            self.action_description = action_description
        if full_description is not None:
            self.full_description = full_description

    @property
    def amount(self):
        """Gets the amount of this AutomationDelay.  # noqa: E501

        The delay amount for an Automation email.  # noqa: E501

        :return: The amount of this AutomationDelay.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AutomationDelay.

        The delay amount for an Automation email.  # noqa: E501

        :param amount: The amount of this AutomationDelay.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def type(self):
        """Gets the type of this AutomationDelay.  # noqa: E501

        The type of delay for an Automation email.  # noqa: E501

        :return: The type of this AutomationDelay.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AutomationDelay.

        The type of delay for an Automation email.  # noqa: E501

        :param type: The type of this AutomationDelay.  # noqa: E501
        :type: str
        """
        allowed_values = ["now", "day", "hour", "week"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def direction(self):
        """Gets the direction of this AutomationDelay.  # noqa: E501

        Whether the delay settings describe before or after the delay action of an Automation email.  # noqa: E501

        :return: The direction of this AutomationDelay.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this AutomationDelay.

        Whether the delay settings describe before or after the delay action of an Automation email.  # noqa: E501

        :param direction: The direction of this AutomationDelay.  # noqa: E501
        :type: str
        """
        allowed_values = ["before", "after"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def action(self):
        """Gets the action of this AutomationDelay.  # noqa: E501

        The action that triggers the delay of an Automation email.  # noqa: E501

        :return: The action of this AutomationDelay.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AutomationDelay.

        The action that triggers the delay of an Automation email.  # noqa: E501

        :param action: The action of this AutomationDelay.  # noqa: E501
        :type: str
        """
        allowed_values = ["previous_campaign_sent", "previous_campaign_opened", "previous_campaign_not_opened", "previous_campaign_clicked_any", "previous_campaign_not_clicked_any", "previous_campaign_specific_clicked", "ecomm_bought_any", "ecomm_bought_product", "ecomm_bought_category", "ecomm_not_bought_any", "ecomm_abandoned_cart", "campaign_sent", "opened_email", "not_opened_email", "clicked_email", "not_clicked_email", "campaign_specific_clicked", "manual", "signup", "merge_changed", "group_add", "group_remove", "mandrill_sent", "mandrill_opened", "mandrill_clicked", "mandrill_any", "api", "goal", "annual", "birthday", "date", "date_added", "tag_add"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def action_description(self):
        """Gets the action_description of this AutomationDelay.  # noqa: E501

        The user-friendly description of the action that triggers an Automation email.  # noqa: E501

        :return: The action_description of this AutomationDelay.  # noqa: E501
        :rtype: str
        """
        return self._action_description

    @action_description.setter
    def action_description(self, action_description):
        """Sets the action_description of this AutomationDelay.

        The user-friendly description of the action that triggers an Automation email.  # noqa: E501

        :param action_description: The action_description of this AutomationDelay.  # noqa: E501
        :type: str
        """

        self._action_description = action_description

    @property
    def full_description(self):
        """Gets the full_description of this AutomationDelay.  # noqa: E501

        The user-friendly description of the delay and trigger action settings for an Automation email.  # noqa: E501

        :return: The full_description of this AutomationDelay.  # noqa: E501
        :rtype: str
        """
        return self._full_description

    @full_description.setter
    def full_description(self, full_description):
        """Sets the full_description of this AutomationDelay.

        The user-friendly description of the delay and trigger action settings for an Automation email.  # noqa: E501

        :param full_description: The full_description of this AutomationDelay.  # noqa: E501
        :type: str
        """

        self._full_description = full_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutomationDelay, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutomationDelay):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
