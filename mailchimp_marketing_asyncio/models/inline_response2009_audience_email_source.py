# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2009AudienceEmailSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'is_segment': 'bool',
        'segment_type': 'str',
        'list_name': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'is_segment': 'is_segment',
        'segment_type': 'segment_type',
        'list_name': 'list_name'
    }

    def __init__(self, name=None, type=None, is_segment=None, segment_type=None, list_name=None):  # noqa: E501
        """InlineResponse2009AudienceEmailSource - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._type = None
        self._is_segment = None
        self._segment_type = None
        self._list_name = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if is_segment is not None:
            self.is_segment = is_segment
        if segment_type is not None:
            self.segment_type = segment_type
        if list_name is not None:
            self.list_name = list_name

    @property
    def name(self):
        """Gets the name of this InlineResponse2009AudienceEmailSource.  # noqa: E501

        Email source name  # noqa: E501

        :return: The name of this InlineResponse2009AudienceEmailSource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2009AudienceEmailSource.

        Email source name  # noqa: E501

        :param name: The name of this InlineResponse2009AudienceEmailSource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this InlineResponse2009AudienceEmailSource.  # noqa: E501

        Type of the email source  # noqa: E501

        :return: The type of this InlineResponse2009AudienceEmailSource.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse2009AudienceEmailSource.

        Type of the email source  # noqa: E501

        :param type: The type of this InlineResponse2009AudienceEmailSource.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def is_segment(self):
        """Gets the is_segment of this InlineResponse2009AudienceEmailSource.  # noqa: E501

        Is the source reference a segment  # noqa: E501

        :return: The is_segment of this InlineResponse2009AudienceEmailSource.  # noqa: E501
        :rtype: bool
        """
        return self._is_segment

    @is_segment.setter
    def is_segment(self, is_segment):
        """Sets the is_segment of this InlineResponse2009AudienceEmailSource.

        Is the source reference a segment  # noqa: E501

        :param is_segment: The is_segment of this InlineResponse2009AudienceEmailSource.  # noqa: E501
        :type: bool
        """

        self._is_segment = is_segment

    @property
    def segment_type(self):
        """Gets the segment_type of this InlineResponse2009AudienceEmailSource.  # noqa: E501

        Segment type if this source is tied to a segment  # noqa: E501

        :return: The segment_type of this InlineResponse2009AudienceEmailSource.  # noqa: E501
        :rtype: str
        """
        return self._segment_type

    @segment_type.setter
    def segment_type(self, segment_type):
        """Sets the segment_type of this InlineResponse2009AudienceEmailSource.

        Segment type if this source is tied to a segment  # noqa: E501

        :param segment_type: The segment_type of this InlineResponse2009AudienceEmailSource.  # noqa: E501
        :type: str
        """

        self._segment_type = segment_type

    @property
    def list_name(self):
        """Gets the list_name of this InlineResponse2009AudienceEmailSource.  # noqa: E501

        Associated list name to the source  # noqa: E501

        :return: The list_name of this InlineResponse2009AudienceEmailSource.  # noqa: E501
        :rtype: str
        """
        return self._list_name

    @list_name.setter
    def list_name(self, list_name):
        """Sets the list_name of this InlineResponse2009AudienceEmailSource.

        Associated list name to the source  # noqa: E501

        :param list_name: The list_name of this InlineResponse2009AudienceEmailSource.  # noqa: E501
        :type: str
        """

        self._list_name = list_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2009AudienceEmailSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2009AudienceEmailSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
