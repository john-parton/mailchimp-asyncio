# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Campaign1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'recipients': 'List4',
        'settings': 'CampaignSettings3',
        'variate_settings': 'ABTestOptions1',
        'tracking': 'CampaignTrackingOptions1',
        'rss_opts': 'RSSOptions1',
        'social_card': 'CampaignSocialCard',
        'content_type': 'str'
    }

    attribute_map = {
        'type': 'type',
        'recipients': 'recipients',
        'settings': 'settings',
        'variate_settings': 'variate_settings',
        'tracking': 'tracking',
        'rss_opts': 'rss_opts',
        'social_card': 'social_card',
        'content_type': 'content_type'
    }

    def __init__(self, type=None, recipients=None, settings=None, variate_settings=None, tracking=None, rss_opts=None, social_card=None, content_type=None):  # noqa: E501
        """Campaign1 - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._recipients = None
        self._settings = None
        self._variate_settings = None
        self._tracking = None
        self._rss_opts = None
        self._social_card = None
        self._content_type = None
        self.discriminator = None

        self.type = type
        if recipients is not None:
            self.recipients = recipients
        if settings is not None:
            self.settings = settings
        if variate_settings is not None:
            self.variate_settings = variate_settings
        if tracking is not None:
            self.tracking = tracking
        if rss_opts is not None:
            self.rss_opts = rss_opts
        if social_card is not None:
            self.social_card = social_card
        if content_type is not None:
            self.content_type = content_type

    @property
    def type(self):
        """Gets the type of this Campaign1.  # noqa: E501

        There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.  # noqa: E501

        :return: The type of this Campaign1.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Campaign1.

        There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.  # noqa: E501

        :param type: The type of this Campaign1.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["regular", "plaintext", "absplit", "rss", "variate"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def recipients(self):
        """Gets the recipients of this Campaign1.  # noqa: E501


        :return: The recipients of this Campaign1.  # noqa: E501
        :rtype: List4
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this Campaign1.


        :param recipients: The recipients of this Campaign1.  # noqa: E501
        :type: List4
        """

        self._recipients = recipients

    @property
    def settings(self):
        """Gets the settings of this Campaign1.  # noqa: E501


        :return: The settings of this Campaign1.  # noqa: E501
        :rtype: CampaignSettings3
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Campaign1.


        :param settings: The settings of this Campaign1.  # noqa: E501
        :type: CampaignSettings3
        """

        self._settings = settings

    @property
    def variate_settings(self):
        """Gets the variate_settings of this Campaign1.  # noqa: E501


        :return: The variate_settings of this Campaign1.  # noqa: E501
        :rtype: ABTestOptions1
        """
        return self._variate_settings

    @variate_settings.setter
    def variate_settings(self, variate_settings):
        """Sets the variate_settings of this Campaign1.


        :param variate_settings: The variate_settings of this Campaign1.  # noqa: E501
        :type: ABTestOptions1
        """

        self._variate_settings = variate_settings

    @property
    def tracking(self):
        """Gets the tracking of this Campaign1.  # noqa: E501


        :return: The tracking of this Campaign1.  # noqa: E501
        :rtype: CampaignTrackingOptions1
        """
        return self._tracking

    @tracking.setter
    def tracking(self, tracking):
        """Sets the tracking of this Campaign1.


        :param tracking: The tracking of this Campaign1.  # noqa: E501
        :type: CampaignTrackingOptions1
        """

        self._tracking = tracking

    @property
    def rss_opts(self):
        """Gets the rss_opts of this Campaign1.  # noqa: E501


        :return: The rss_opts of this Campaign1.  # noqa: E501
        :rtype: RSSOptions1
        """
        return self._rss_opts

    @rss_opts.setter
    def rss_opts(self, rss_opts):
        """Sets the rss_opts of this Campaign1.


        :param rss_opts: The rss_opts of this Campaign1.  # noqa: E501
        :type: RSSOptions1
        """

        self._rss_opts = rss_opts

    @property
    def social_card(self):
        """Gets the social_card of this Campaign1.  # noqa: E501


        :return: The social_card of this Campaign1.  # noqa: E501
        :rtype: CampaignSocialCard
        """
        return self._social_card

    @social_card.setter
    def social_card(self, social_card):
        """Sets the social_card of this Campaign1.


        :param social_card: The social_card of this Campaign1.  # noqa: E501
        :type: CampaignSocialCard
        """

        self._social_card = social_card

    @property
    def content_type(self):
        """Gets the content_type of this Campaign1.  # noqa: E501

        How the campaign's content is put together. The old drag and drop editor uses 'template' while the new editor uses 'multichannel'. Defaults to template.  # noqa: E501

        :return: The content_type of this Campaign1.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Campaign1.

        How the campaign's content is put together. The old drag and drop editor uses 'template' while the new editor uses 'multichannel'. Defaults to template.  # noqa: E501

        :param content_type: The content_type of this Campaign1.  # noqa: E501
        :type: str
        """
        allowed_values = ["template", "multichannel"]  # noqa: E501
        if content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"  # noqa: E501
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Campaign1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Campaign1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
