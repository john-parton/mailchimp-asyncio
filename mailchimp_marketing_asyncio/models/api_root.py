# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class APIRoot(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'login_id': 'str',
        'account_name': 'str',
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'username': 'str',
        'avatar_url': 'str',
        'role': 'str',
        'member_since': 'datetime',
        'pricing_plan_type': 'str',
        'first_payment': 'datetime',
        'account_timezone': 'str',
        'account_industry': 'str',
        'contact': 'AccountContact',
        'pro_enabled': 'bool',
        'last_login': 'datetime',
        'total_subscribers': 'int',
        'industry_stats': 'IndustryStats',
        'links': 'list[ResourceLink]'
    }

    attribute_map = {
        'account_id': 'account_id',
        'login_id': 'login_id',
        'account_name': 'account_name',
        'email': 'email',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'username': 'username',
        'avatar_url': 'avatar_url',
        'role': 'role',
        'member_since': 'member_since',
        'pricing_plan_type': 'pricing_plan_type',
        'first_payment': 'first_payment',
        'account_timezone': 'account_timezone',
        'account_industry': 'account_industry',
        'contact': 'contact',
        'pro_enabled': 'pro_enabled',
        'last_login': 'last_login',
        'total_subscribers': 'total_subscribers',
        'industry_stats': 'industry_stats',
        'links': '_links'
    }

    def __init__(self, account_id=None, login_id=None, account_name=None, email=None, first_name=None, last_name=None, username=None, avatar_url=None, role=None, member_since=None, pricing_plan_type=None, first_payment=None, account_timezone=None, account_industry=None, contact=None, pro_enabled=None, last_login=None, total_subscribers=None, industry_stats=None, links=None):  # noqa: E501
        """APIRoot - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._login_id = None
        self._account_name = None
        self._email = None
        self._first_name = None
        self._last_name = None
        self._username = None
        self._avatar_url = None
        self._role = None
        self._member_since = None
        self._pricing_plan_type = None
        self._first_payment = None
        self._account_timezone = None
        self._account_industry = None
        self._contact = None
        self._pro_enabled = None
        self._last_login = None
        self._total_subscribers = None
        self._industry_stats = None
        self._links = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if login_id is not None:
            self.login_id = login_id
        if account_name is not None:
            self.account_name = account_name
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if username is not None:
            self.username = username
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if role is not None:
            self.role = role
        if member_since is not None:
            self.member_since = member_since
        if pricing_plan_type is not None:
            self.pricing_plan_type = pricing_plan_type
        if first_payment is not None:
            self.first_payment = first_payment
        if account_timezone is not None:
            self.account_timezone = account_timezone
        if account_industry is not None:
            self.account_industry = account_industry
        if contact is not None:
            self.contact = contact
        if pro_enabled is not None:
            self.pro_enabled = pro_enabled
        if last_login is not None:
            self.last_login = last_login
        if total_subscribers is not None:
            self.total_subscribers = total_subscribers
        if industry_stats is not None:
            self.industry_stats = industry_stats
        if links is not None:
            self.links = links

    @property
    def account_id(self):
        """Gets the account_id of this APIRoot.  # noqa: E501

        The Mailchimp account ID.  # noqa: E501

        :return: The account_id of this APIRoot.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this APIRoot.

        The Mailchimp account ID.  # noqa: E501

        :param account_id: The account_id of this APIRoot.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def login_id(self):
        """Gets the login_id of this APIRoot.  # noqa: E501

        The ID associated with the user who owns this API key. If you can login to multiple accounts, this ID will be the same for each account.  # noqa: E501

        :return: The login_id of this APIRoot.  # noqa: E501
        :rtype: str
        """
        return self._login_id

    @login_id.setter
    def login_id(self, login_id):
        """Sets the login_id of this APIRoot.

        The ID associated with the user who owns this API key. If you can login to multiple accounts, this ID will be the same for each account.  # noqa: E501

        :param login_id: The login_id of this APIRoot.  # noqa: E501
        :type: str
        """

        self._login_id = login_id

    @property
    def account_name(self):
        """Gets the account_name of this APIRoot.  # noqa: E501

        The name of the account.  # noqa: E501

        :return: The account_name of this APIRoot.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this APIRoot.

        The name of the account.  # noqa: E501

        :param account_name: The account_name of this APIRoot.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def email(self):
        """Gets the email of this APIRoot.  # noqa: E501

        The account email address.  # noqa: E501

        :return: The email of this APIRoot.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this APIRoot.

        The account email address.  # noqa: E501

        :param email: The email of this APIRoot.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this APIRoot.  # noqa: E501

        The first name tied to the account.  # noqa: E501

        :return: The first_name of this APIRoot.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this APIRoot.

        The first name tied to the account.  # noqa: E501

        :param first_name: The first_name of this APIRoot.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this APIRoot.  # noqa: E501

        The last name tied to the account.  # noqa: E501

        :return: The last_name of this APIRoot.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this APIRoot.

        The last name tied to the account.  # noqa: E501

        :param last_name: The last_name of this APIRoot.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def username(self):
        """Gets the username of this APIRoot.  # noqa: E501

        The username tied to the account.  # noqa: E501

        :return: The username of this APIRoot.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this APIRoot.

        The username tied to the account.  # noqa: E501

        :param username: The username of this APIRoot.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def avatar_url(self):
        """Gets the avatar_url of this APIRoot.  # noqa: E501

        URL of the avatar for the user.  # noqa: E501

        :return: The avatar_url of this APIRoot.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this APIRoot.

        URL of the avatar for the user.  # noqa: E501

        :param avatar_url: The avatar_url of this APIRoot.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def role(self):
        """Gets the role of this APIRoot.  # noqa: E501

        The [user role](https://mailchimp.com/help/manage-user-levels-in-your-account/) for the account.  # noqa: E501

        :return: The role of this APIRoot.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this APIRoot.

        The [user role](https://mailchimp.com/help/manage-user-levels-in-your-account/) for the account.  # noqa: E501

        :param role: The role of this APIRoot.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def member_since(self):
        """Gets the member_since of this APIRoot.  # noqa: E501

        The date and time that the account was created in ISO 8601 format.  # noqa: E501

        :return: The member_since of this APIRoot.  # noqa: E501
        :rtype: datetime
        """
        return self._member_since

    @member_since.setter
    def member_since(self, member_since):
        """Sets the member_since of this APIRoot.

        The date and time that the account was created in ISO 8601 format.  # noqa: E501

        :param member_since: The member_since of this APIRoot.  # noqa: E501
        :type: datetime
        """

        self._member_since = member_since

    @property
    def pricing_plan_type(self):
        """Gets the pricing_plan_type of this APIRoot.  # noqa: E501

        The type of pricing plan the account is on.  # noqa: E501

        :return: The pricing_plan_type of this APIRoot.  # noqa: E501
        :rtype: str
        """
        return self._pricing_plan_type

    @pricing_plan_type.setter
    def pricing_plan_type(self, pricing_plan_type):
        """Sets the pricing_plan_type of this APIRoot.

        The type of pricing plan the account is on.  # noqa: E501

        :param pricing_plan_type: The pricing_plan_type of this APIRoot.  # noqa: E501
        :type: str
        """
        allowed_values = ["monthly", "pay_as_you_go", "forever_free"]  # noqa: E501
        if pricing_plan_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_plan_type` ({0}), must be one of {1}"  # noqa: E501
                .format(pricing_plan_type, allowed_values)
            )

        self._pricing_plan_type = pricing_plan_type

    @property
    def first_payment(self):
        """Gets the first_payment of this APIRoot.  # noqa: E501

        Date of first payment for monthly plans.  # noqa: E501

        :return: The first_payment of this APIRoot.  # noqa: E501
        :rtype: datetime
        """
        return self._first_payment

    @first_payment.setter
    def first_payment(self, first_payment):
        """Sets the first_payment of this APIRoot.

        Date of first payment for monthly plans.  # noqa: E501

        :param first_payment: The first_payment of this APIRoot.  # noqa: E501
        :type: datetime
        """

        self._first_payment = first_payment

    @property
    def account_timezone(self):
        """Gets the account_timezone of this APIRoot.  # noqa: E501

        The timezone currently set for the account.  # noqa: E501

        :return: The account_timezone of this APIRoot.  # noqa: E501
        :rtype: str
        """
        return self._account_timezone

    @account_timezone.setter
    def account_timezone(self, account_timezone):
        """Sets the account_timezone of this APIRoot.

        The timezone currently set for the account.  # noqa: E501

        :param account_timezone: The account_timezone of this APIRoot.  # noqa: E501
        :type: str
        """

        self._account_timezone = account_timezone

    @property
    def account_industry(self):
        """Gets the account_industry of this APIRoot.  # noqa: E501

        The user-specified industry associated with the account.  # noqa: E501

        :return: The account_industry of this APIRoot.  # noqa: E501
        :rtype: str
        """
        return self._account_industry

    @account_industry.setter
    def account_industry(self, account_industry):
        """Sets the account_industry of this APIRoot.

        The user-specified industry associated with the account.  # noqa: E501

        :param account_industry: The account_industry of this APIRoot.  # noqa: E501
        :type: str
        """

        self._account_industry = account_industry

    @property
    def contact(self):
        """Gets the contact of this APIRoot.  # noqa: E501


        :return: The contact of this APIRoot.  # noqa: E501
        :rtype: AccountContact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this APIRoot.


        :param contact: The contact of this APIRoot.  # noqa: E501
        :type: AccountContact
        """

        self._contact = contact

    @property
    def pro_enabled(self):
        """Gets the pro_enabled of this APIRoot.  # noqa: E501

        Legacy - whether the account includes [Mailchimp Pro](https://mailchimp.com/help/about-mailchimp-pro/).  # noqa: E501

        :return: The pro_enabled of this APIRoot.  # noqa: E501
        :rtype: bool
        """
        return self._pro_enabled

    @pro_enabled.setter
    def pro_enabled(self, pro_enabled):
        """Sets the pro_enabled of this APIRoot.

        Legacy - whether the account includes [Mailchimp Pro](https://mailchimp.com/help/about-mailchimp-pro/).  # noqa: E501

        :param pro_enabled: The pro_enabled of this APIRoot.  # noqa: E501
        :type: bool
        """

        self._pro_enabled = pro_enabled

    @property
    def last_login(self):
        """Gets the last_login of this APIRoot.  # noqa: E501

        The date and time of the last login for this account in ISO 8601 format.  # noqa: E501

        :return: The last_login of this APIRoot.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this APIRoot.

        The date and time of the last login for this account in ISO 8601 format.  # noqa: E501

        :param last_login: The last_login of this APIRoot.  # noqa: E501
        :type: datetime
        """

        self._last_login = last_login

    @property
    def total_subscribers(self):
        """Gets the total_subscribers of this APIRoot.  # noqa: E501

        The total number of subscribers across all lists in the account.  # noqa: E501

        :return: The total_subscribers of this APIRoot.  # noqa: E501
        :rtype: int
        """
        return self._total_subscribers

    @total_subscribers.setter
    def total_subscribers(self, total_subscribers):
        """Sets the total_subscribers of this APIRoot.

        The total number of subscribers across all lists in the account.  # noqa: E501

        :param total_subscribers: The total_subscribers of this APIRoot.  # noqa: E501
        :type: int
        """

        self._total_subscribers = total_subscribers

    @property
    def industry_stats(self):
        """Gets the industry_stats of this APIRoot.  # noqa: E501


        :return: The industry_stats of this APIRoot.  # noqa: E501
        :rtype: IndustryStats
        """
        return self._industry_stats

    @industry_stats.setter
    def industry_stats(self, industry_stats):
        """Sets the industry_stats of this APIRoot.


        :param industry_stats: The industry_stats of this APIRoot.  # noqa: E501
        :type: IndustryStats
        """

        self._industry_stats = industry_stats

    @property
    def links(self):
        """Gets the links of this APIRoot.  # noqa: E501

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :return: The links of this APIRoot.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this APIRoot.

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :param links: The links of this APIRoot.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIRoot, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIRoot):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
