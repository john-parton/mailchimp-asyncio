# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AutomationWorkflow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'create_time': 'datetime',
        'start_time': 'datetime',
        'status': 'str',
        'emails_sent': 'int',
        'recipients': 'List',
        'settings': 'AutomationCampaignSettings',
        'tracking': 'AutomationTrackingOptions',
        'trigger_settings': 'AutomationTrigger',
        'report_summary': 'CampaignReportSummary',
        'links': 'list[ResourceLink]'
    }

    attribute_map = {
        'id': 'id',
        'create_time': 'create_time',
        'start_time': 'start_time',
        'status': 'status',
        'emails_sent': 'emails_sent',
        'recipients': 'recipients',
        'settings': 'settings',
        'tracking': 'tracking',
        'trigger_settings': 'trigger_settings',
        'report_summary': 'report_summary',
        'links': '_links'
    }

    def __init__(self, id=None, create_time=None, start_time=None, status=None, emails_sent=None, recipients=None, settings=None, tracking=None, trigger_settings=None, report_summary=None, links=None):  # noqa: E501
        """AutomationWorkflow - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._create_time = None
        self._start_time = None
        self._status = None
        self._emails_sent = None
        self._recipients = None
        self._settings = None
        self._tracking = None
        self._trigger_settings = None
        self._report_summary = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if create_time is not None:
            self.create_time = create_time
        if start_time is not None:
            self.start_time = start_time
        if status is not None:
            self.status = status
        if emails_sent is not None:
            self.emails_sent = emails_sent
        if recipients is not None:
            self.recipients = recipients
        if settings is not None:
            self.settings = settings
        if tracking is not None:
            self.tracking = tracking
        if trigger_settings is not None:
            self.trigger_settings = trigger_settings
        if report_summary is not None:
            self.report_summary = report_summary
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this AutomationWorkflow.  # noqa: E501

        A string that identifies the Automation.  # noqa: E501

        :return: The id of this AutomationWorkflow.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AutomationWorkflow.

        A string that identifies the Automation.  # noqa: E501

        :param id: The id of this AutomationWorkflow.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def create_time(self):
        """Gets the create_time of this AutomationWorkflow.  # noqa: E501

        The date and time the Automation was created in ISO 8601 format.  # noqa: E501

        :return: The create_time of this AutomationWorkflow.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this AutomationWorkflow.

        The date and time the Automation was created in ISO 8601 format.  # noqa: E501

        :param create_time: The create_time of this AutomationWorkflow.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def start_time(self):
        """Gets the start_time of this AutomationWorkflow.  # noqa: E501

        The date and time the Automation was started in ISO 8601 format.  # noqa: E501

        :return: The start_time of this AutomationWorkflow.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this AutomationWorkflow.

        The date and time the Automation was started in ISO 8601 format.  # noqa: E501

        :param start_time: The start_time of this AutomationWorkflow.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this AutomationWorkflow.  # noqa: E501

        The current status of the Automation.  # noqa: E501

        :return: The status of this AutomationWorkflow.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AutomationWorkflow.

        The current status of the Automation.  # noqa: E501

        :param status: The status of this AutomationWorkflow.  # noqa: E501
        :type: str
        """
        allowed_values = ["save", "paused", "sending"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def emails_sent(self):
        """Gets the emails_sent of this AutomationWorkflow.  # noqa: E501

        The total number of emails sent for the Automation.  # noqa: E501

        :return: The emails_sent of this AutomationWorkflow.  # noqa: E501
        :rtype: int
        """
        return self._emails_sent

    @emails_sent.setter
    def emails_sent(self, emails_sent):
        """Sets the emails_sent of this AutomationWorkflow.

        The total number of emails sent for the Automation.  # noqa: E501

        :param emails_sent: The emails_sent of this AutomationWorkflow.  # noqa: E501
        :type: int
        """

        self._emails_sent = emails_sent

    @property
    def recipients(self):
        """Gets the recipients of this AutomationWorkflow.  # noqa: E501


        :return: The recipients of this AutomationWorkflow.  # noqa: E501
        :rtype: List
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this AutomationWorkflow.


        :param recipients: The recipients of this AutomationWorkflow.  # noqa: E501
        :type: List
        """

        self._recipients = recipients

    @property
    def settings(self):
        """Gets the settings of this AutomationWorkflow.  # noqa: E501


        :return: The settings of this AutomationWorkflow.  # noqa: E501
        :rtype: AutomationCampaignSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this AutomationWorkflow.


        :param settings: The settings of this AutomationWorkflow.  # noqa: E501
        :type: AutomationCampaignSettings
        """

        self._settings = settings

    @property
    def tracking(self):
        """Gets the tracking of this AutomationWorkflow.  # noqa: E501


        :return: The tracking of this AutomationWorkflow.  # noqa: E501
        :rtype: AutomationTrackingOptions
        """
        return self._tracking

    @tracking.setter
    def tracking(self, tracking):
        """Sets the tracking of this AutomationWorkflow.


        :param tracking: The tracking of this AutomationWorkflow.  # noqa: E501
        :type: AutomationTrackingOptions
        """

        self._tracking = tracking

    @property
    def trigger_settings(self):
        """Gets the trigger_settings of this AutomationWorkflow.  # noqa: E501


        :return: The trigger_settings of this AutomationWorkflow.  # noqa: E501
        :rtype: AutomationTrigger
        """
        return self._trigger_settings

    @trigger_settings.setter
    def trigger_settings(self, trigger_settings):
        """Sets the trigger_settings of this AutomationWorkflow.


        :param trigger_settings: The trigger_settings of this AutomationWorkflow.  # noqa: E501
        :type: AutomationTrigger
        """

        self._trigger_settings = trigger_settings

    @property
    def report_summary(self):
        """Gets the report_summary of this AutomationWorkflow.  # noqa: E501


        :return: The report_summary of this AutomationWorkflow.  # noqa: E501
        :rtype: CampaignReportSummary
        """
        return self._report_summary

    @report_summary.setter
    def report_summary(self, report_summary):
        """Sets the report_summary of this AutomationWorkflow.


        :param report_summary: The report_summary of this AutomationWorkflow.  # noqa: E501
        :type: CampaignReportSummary
        """

        self._report_summary = report_summary

    @property
    def links(self):
        """Gets the links of this AutomationWorkflow.  # noqa: E501

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :return: The links of this AutomationWorkflow.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AutomationWorkflow.

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :param links: The links of this AutomationWorkflow.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutomationWorkflow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutomationWorkflow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
