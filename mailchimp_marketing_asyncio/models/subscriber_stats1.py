# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SubscriberStats1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avg_open_rate': 'float',
        'avg_click_rate': 'float',
        'ecommerce_data': 'EcommerceStats'
    }

    attribute_map = {
        'avg_open_rate': 'avg_open_rate',
        'avg_click_rate': 'avg_click_rate',
        'ecommerce_data': 'ecommerce_data'
    }

    def __init__(self, avg_open_rate=None, avg_click_rate=None, ecommerce_data=None):  # noqa: E501
        """SubscriberStats1 - a model defined in Swagger"""  # noqa: E501

        self._avg_open_rate = None
        self._avg_click_rate = None
        self._ecommerce_data = None
        self.discriminator = None

        if avg_open_rate is not None:
            self.avg_open_rate = avg_open_rate
        if avg_click_rate is not None:
            self.avg_click_rate = avg_click_rate
        if ecommerce_data is not None:
            self.ecommerce_data = ecommerce_data

    @property
    def avg_open_rate(self):
        """Gets the avg_open_rate of this SubscriberStats1.  # noqa: E501

        A subscriber's average open rate.  # noqa: E501

        :return: The avg_open_rate of this SubscriberStats1.  # noqa: E501
        :rtype: float
        """
        return self._avg_open_rate

    @avg_open_rate.setter
    def avg_open_rate(self, avg_open_rate):
        """Sets the avg_open_rate of this SubscriberStats1.

        A subscriber's average open rate.  # noqa: E501

        :param avg_open_rate: The avg_open_rate of this SubscriberStats1.  # noqa: E501
        :type: float
        """

        self._avg_open_rate = avg_open_rate

    @property
    def avg_click_rate(self):
        """Gets the avg_click_rate of this SubscriberStats1.  # noqa: E501

        A subscriber's average clickthrough rate.  # noqa: E501

        :return: The avg_click_rate of this SubscriberStats1.  # noqa: E501
        :rtype: float
        """
        return self._avg_click_rate

    @avg_click_rate.setter
    def avg_click_rate(self, avg_click_rate):
        """Sets the avg_click_rate of this SubscriberStats1.

        A subscriber's average clickthrough rate.  # noqa: E501

        :param avg_click_rate: The avg_click_rate of this SubscriberStats1.  # noqa: E501
        :type: float
        """

        self._avg_click_rate = avg_click_rate

    @property
    def ecommerce_data(self):
        """Gets the ecommerce_data of this SubscriberStats1.  # noqa: E501


        :return: The ecommerce_data of this SubscriberStats1.  # noqa: E501
        :rtype: EcommerceStats
        """
        return self._ecommerce_data

    @ecommerce_data.setter
    def ecommerce_data(self, ecommerce_data):
        """Sets the ecommerce_data of this SubscriberStats1.


        :param ecommerce_data: The ecommerce_data of this SubscriberStats1.  # noqa: E501
        :type: EcommerceStats
        """

        self._ecommerce_data = ecommerce_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriberStats1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriberStats1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
