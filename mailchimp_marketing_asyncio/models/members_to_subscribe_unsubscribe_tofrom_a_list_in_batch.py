# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MembersToSubscribeUnsubscribeTofromAListInBatch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'members': 'list[AddListMembers]',
        'sync_tags': 'bool',
        'update_existing': 'bool'
    }

    attribute_map = {
        'members': 'members',
        'sync_tags': 'sync_tags',
        'update_existing': 'update_existing'
    }

    def __init__(self, members=None, sync_tags=None, update_existing=None):  # noqa: E501
        """MembersToSubscribeUnsubscribeTofromAListInBatch - a model defined in Swagger"""  # noqa: E501

        self._members = None
        self._sync_tags = None
        self._update_existing = None
        self.discriminator = None

        self.members = members
        if sync_tags is not None:
            self.sync_tags = sync_tags
        if update_existing is not None:
            self.update_existing = update_existing

    @property
    def members(self):
        """Gets the members of this MembersToSubscribeUnsubscribeTofromAListInBatch.  # noqa: E501

        An array of objects, each representing an email address and the subscription status for a specific list. Up to 500 members may be added or updated with each API call.  # noqa: E501

        :return: The members of this MembersToSubscribeUnsubscribeTofromAListInBatch.  # noqa: E501
        :rtype: list[AddListMembers]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this MembersToSubscribeUnsubscribeTofromAListInBatch.

        An array of objects, each representing an email address and the subscription status for a specific list. Up to 500 members may be added or updated with each API call.  # noqa: E501

        :param members: The members of this MembersToSubscribeUnsubscribeTofromAListInBatch.  # noqa: E501
        :type: list[AddListMembers]
        """
        if members is None:
            raise ValueError("Invalid value for `members`, must not be `None`")  # noqa: E501

        self._members = members

    @property
    def sync_tags(self):
        """Gets the sync_tags of this MembersToSubscribeUnsubscribeTofromAListInBatch.  # noqa: E501

        Whether this batch operation will replace all existing tags with tags in request.  # noqa: E501

        :return: The sync_tags of this MembersToSubscribeUnsubscribeTofromAListInBatch.  # noqa: E501
        :rtype: bool
        """
        return self._sync_tags

    @sync_tags.setter
    def sync_tags(self, sync_tags):
        """Sets the sync_tags of this MembersToSubscribeUnsubscribeTofromAListInBatch.

        Whether this batch operation will replace all existing tags with tags in request.  # noqa: E501

        :param sync_tags: The sync_tags of this MembersToSubscribeUnsubscribeTofromAListInBatch.  # noqa: E501
        :type: bool
        """

        self._sync_tags = sync_tags

    @property
    def update_existing(self):
        """Gets the update_existing of this MembersToSubscribeUnsubscribeTofromAListInBatch.  # noqa: E501

        Whether this batch operation will change existing members' subscription status.  # noqa: E501

        :return: The update_existing of this MembersToSubscribeUnsubscribeTofromAListInBatch.  # noqa: E501
        :rtype: bool
        """
        return self._update_existing

    @update_existing.setter
    def update_existing(self, update_existing):
        """Sets the update_existing of this MembersToSubscribeUnsubscribeTofromAListInBatch.

        Whether this batch operation will change existing members' subscription status.  # noqa: E501

        :param update_existing: The update_existing of this MembersToSubscribeUnsubscribeTofromAListInBatch.  # noqa: E501
        :type: bool
        """

        self._update_existing = update_existing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MembersToSubscribeUnsubscribeTofromAListInBatch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MembersToSubscribeUnsubscribeTofromAListInBatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
