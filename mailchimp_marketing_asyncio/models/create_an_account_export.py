# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreateAnAccountExport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'include_stages': 'list[str]',
        'since_timestamp': 'datetime'
    }

    attribute_map = {
        'include_stages': 'include_stages',
        'since_timestamp': 'since_timestamp'
    }

    def __init__(self, include_stages=None, since_timestamp=None):  # noqa: E501
        """CreateAnAccountExport - a model defined in Swagger"""  # noqa: E501

        self._include_stages = None
        self._since_timestamp = None
        self.discriminator = None

        self.include_stages = include_stages
        if since_timestamp is not None:
            self.since_timestamp = since_timestamp

    @property
    def include_stages(self):
        """Gets the include_stages of this CreateAnAccountExport.  # noqa: E501

        The stages of an account export to include.  # noqa: E501

        :return: The include_stages of this CreateAnAccountExport.  # noqa: E501
        :rtype: list[str]
        """
        return self._include_stages

    @include_stages.setter
    def include_stages(self, include_stages):
        """Sets the include_stages of this CreateAnAccountExport.

        The stages of an account export to include.  # noqa: E501

        :param include_stages: The include_stages of this CreateAnAccountExport.  # noqa: E501
        :type: list[str]
        """
        if include_stages is None:
            raise ValueError("Invalid value for `include_stages`, must not be `None`")  # noqa: E501
        allowed_values = ["audiences", "campaigns", "events", "gallery_files", "reports", "templates"]  # noqa: E501
        if not set(include_stages).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `include_stages` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(include_stages) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._include_stages = include_stages

    @property
    def since_timestamp(self):
        """Gets the since_timestamp of this CreateAnAccountExport.  # noqa: E501

        An ISO 8601 date that will limit the export to only records created after a given time. For instance, the reports stage will contain any campaign sent after the given timestamp. Audiences, however, are excluded from this limit.  # noqa: E501

        :return: The since_timestamp of this CreateAnAccountExport.  # noqa: E501
        :rtype: datetime
        """
        return self._since_timestamp

    @since_timestamp.setter
    def since_timestamp(self, since_timestamp):
        """Sets the since_timestamp of this CreateAnAccountExport.

        An ISO 8601 date that will limit the export to only records created after a given time. For instance, the reports stage will contain any campaign sent after the given timestamp. Audiences, however, are excluded from this limit.  # noqa: E501

        :param since_timestamp: The since_timestamp of this CreateAnAccountExport.  # noqa: E501
        :type: datetime
        """

        self._since_timestamp = since_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateAnAccountExport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAnAccountExport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
