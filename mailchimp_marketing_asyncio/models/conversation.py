# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Conversation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'message_count': 'int',
        'campaign_id': 'str',
        'list_id': 'str',
        'unread_messages': 'int',
        'from_label': 'str',
        'from_email': 'str',
        'subject': 'str',
        'last_message': 'LastMessage',
        'links': 'list[ResourceLink]'
    }

    attribute_map = {
        'id': 'id',
        'message_count': 'message_count',
        'campaign_id': 'campaign_id',
        'list_id': 'list_id',
        'unread_messages': 'unread_messages',
        'from_label': 'from_label',
        'from_email': 'from_email',
        'subject': 'subject',
        'last_message': 'last_message',
        'links': '_links'
    }

    def __init__(self, id=None, message_count=None, campaign_id=None, list_id=None, unread_messages=None, from_label=None, from_email=None, subject=None, last_message=None, links=None):  # noqa: E501
        """Conversation - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._message_count = None
        self._campaign_id = None
        self._list_id = None
        self._unread_messages = None
        self._from_label = None
        self._from_email = None
        self._subject = None
        self._last_message = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if message_count is not None:
            self.message_count = message_count
        if campaign_id is not None:
            self.campaign_id = campaign_id
        if list_id is not None:
            self.list_id = list_id
        if unread_messages is not None:
            self.unread_messages = unread_messages
        if from_label is not None:
            self.from_label = from_label
        if from_email is not None:
            self.from_email = from_email
        if subject is not None:
            self.subject = subject
        if last_message is not None:
            self.last_message = last_message
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this Conversation.  # noqa: E501

        A string that uniquely identifies this conversation.  # noqa: E501

        :return: The id of this Conversation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Conversation.

        A string that uniquely identifies this conversation.  # noqa: E501

        :param id: The id of this Conversation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def message_count(self):
        """Gets the message_count of this Conversation.  # noqa: E501

        The total number of messages in this conversation.  # noqa: E501

        :return: The message_count of this Conversation.  # noqa: E501
        :rtype: int
        """
        return self._message_count

    @message_count.setter
    def message_count(self, message_count):
        """Sets the message_count of this Conversation.

        The total number of messages in this conversation.  # noqa: E501

        :param message_count: The message_count of this Conversation.  # noqa: E501
        :type: int
        """

        self._message_count = message_count

    @property
    def campaign_id(self):
        """Gets the campaign_id of this Conversation.  # noqa: E501

        The unique identifier of the campaign for this conversation.  # noqa: E501

        :return: The campaign_id of this Conversation.  # noqa: E501
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this Conversation.

        The unique identifier of the campaign for this conversation.  # noqa: E501

        :param campaign_id: The campaign_id of this Conversation.  # noqa: E501
        :type: str
        """

        self._campaign_id = campaign_id

    @property
    def list_id(self):
        """Gets the list_id of this Conversation.  # noqa: E501

        The unique identifier of the list for this conversation.  # noqa: E501

        :return: The list_id of this Conversation.  # noqa: E501
        :rtype: str
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this Conversation.

        The unique identifier of the list for this conversation.  # noqa: E501

        :param list_id: The list_id of this Conversation.  # noqa: E501
        :type: str
        """

        self._list_id = list_id

    @property
    def unread_messages(self):
        """Gets the unread_messages of this Conversation.  # noqa: E501

        The number of unread messages in this conversation.  # noqa: E501

        :return: The unread_messages of this Conversation.  # noqa: E501
        :rtype: int
        """
        return self._unread_messages

    @unread_messages.setter
    def unread_messages(self, unread_messages):
        """Sets the unread_messages of this Conversation.

        The number of unread messages in this conversation.  # noqa: E501

        :param unread_messages: The unread_messages of this Conversation.  # noqa: E501
        :type: int
        """

        self._unread_messages = unread_messages

    @property
    def from_label(self):
        """Gets the from_label of this Conversation.  # noqa: E501

        A label representing the sender of this message.  # noqa: E501

        :return: The from_label of this Conversation.  # noqa: E501
        :rtype: str
        """
        return self._from_label

    @from_label.setter
    def from_label(self, from_label):
        """Sets the from_label of this Conversation.

        A label representing the sender of this message.  # noqa: E501

        :param from_label: The from_label of this Conversation.  # noqa: E501
        :type: str
        """

        self._from_label = from_label

    @property
    def from_email(self):
        """Gets the from_email of this Conversation.  # noqa: E501

        A label representing the email of the sender of this message.  # noqa: E501

        :return: The from_email of this Conversation.  # noqa: E501
        :rtype: str
        """
        return self._from_email

    @from_email.setter
    def from_email(self, from_email):
        """Sets the from_email of this Conversation.

        A label representing the email of the sender of this message.  # noqa: E501

        :param from_email: The from_email of this Conversation.  # noqa: E501
        :type: str
        """

        self._from_email = from_email

    @property
    def subject(self):
        """Gets the subject of this Conversation.  # noqa: E501

        The subject of the message.  # noqa: E501

        :return: The subject of this Conversation.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Conversation.

        The subject of the message.  # noqa: E501

        :param subject: The subject of this Conversation.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def last_message(self):
        """Gets the last_message of this Conversation.  # noqa: E501


        :return: The last_message of this Conversation.  # noqa: E501
        :rtype: LastMessage
        """
        return self._last_message

    @last_message.setter
    def last_message(self, last_message):
        """Sets the last_message of this Conversation.


        :param last_message: The last_message of this Conversation.  # noqa: E501
        :type: LastMessage
        """

        self._last_message = last_message

    @property
    def links(self):
        """Gets the links of this Conversation.  # noqa: E501

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :return: The links of this Conversation.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Conversation.

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :param links: The links of this Conversation.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Conversation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Conversation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
