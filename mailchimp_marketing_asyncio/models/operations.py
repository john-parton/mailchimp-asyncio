# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Operations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'method': 'str',
        'path': 'str',
        'params': 'object',
        'body': 'str',
        'operation_id': 'str'
    }

    attribute_map = {
        'method': 'method',
        'path': 'path',
        'params': 'params',
        'body': 'body',
        'operation_id': 'operation_id'
    }

    def __init__(self, method=None, path=None, params=None, body=None, operation_id=None):  # noqa: E501
        """Operations - a model defined in Swagger"""  # noqa: E501

        self._method = None
        self._path = None
        self._params = None
        self._body = None
        self._operation_id = None
        self.discriminator = None

        self.method = method
        self.path = path
        if params is not None:
            self.params = params
        if body is not None:
            self.body = body
        if operation_id is not None:
            self.operation_id = operation_id

    @property
    def method(self):
        """Gets the method of this Operations.  # noqa: E501

        The HTTP method to use for the operation.  # noqa: E501

        :return: The method of this Operations.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Operations.

        The HTTP method to use for the operation.  # noqa: E501

        :param method: The method of this Operations.  # noqa: E501
        :type: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501
        allowed_values = ["GET", "POST", "PUT", "PATCH", "DELETE"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def path(self):
        """Gets the path of this Operations.  # noqa: E501

        The relative path to use for the operation.  # noqa: E501

        :return: The path of this Operations.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Operations.

        The relative path to use for the operation.  # noqa: E501

        :param path: The path of this Operations.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def params(self):
        """Gets the params of this Operations.  # noqa: E501

        Any request query parameters. Example parameters: {\"count\":10, \"offset\":0}  # noqa: E501

        :return: The params of this Operations.  # noqa: E501
        :rtype: object
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Operations.

        Any request query parameters. Example parameters: {\"count\":10, \"offset\":0}  # noqa: E501

        :param params: The params of this Operations.  # noqa: E501
        :type: object
        """

        self._params = params

    @property
    def body(self):
        """Gets the body of this Operations.  # noqa: E501

        A string containing the JSON body to use with the request.  # noqa: E501

        :return: The body of this Operations.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Operations.

        A string containing the JSON body to use with the request.  # noqa: E501

        :param body: The body of this Operations.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def operation_id(self):
        """Gets the operation_id of this Operations.  # noqa: E501

        An optional client-supplied id returned with the operation results.  # noqa: E501

        :return: The operation_id of this Operations.  # noqa: E501
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this Operations.

        An optional client-supplied id returned with the operation results.  # noqa: E501

        :param operation_id: The operation_id of this Operations.  # noqa: E501
        :type: str
        """

        self._operation_id = operation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Operations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Operations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
