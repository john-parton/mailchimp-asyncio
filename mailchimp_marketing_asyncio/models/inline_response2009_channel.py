# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2009Channel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fb_placement_feed': 'bool',
        'fb_placement_audience': 'bool',
        'ig_placement_feed': 'bool'
    }

    attribute_map = {
        'fb_placement_feed': 'fb_placement_feed',
        'fb_placement_audience': 'fb_placement_audience',
        'ig_placement_feed': 'ig_placement_feed'
    }

    def __init__(self, fb_placement_feed=None, fb_placement_audience=None, ig_placement_feed=None):  # noqa: E501
        """InlineResponse2009Channel - a model defined in Swagger"""  # noqa: E501

        self._fb_placement_feed = None
        self._fb_placement_audience = None
        self._ig_placement_feed = None
        self.discriminator = None

        if fb_placement_feed is not None:
            self.fb_placement_feed = fb_placement_feed
        if fb_placement_audience is not None:
            self.fb_placement_audience = fb_placement_audience
        if ig_placement_feed is not None:
            self.ig_placement_feed = ig_placement_feed

    @property
    def fb_placement_feed(self):
        """Gets the fb_placement_feed of this InlineResponse2009Channel.  # noqa: E501

        Is this for facebook feed  # noqa: E501

        :return: The fb_placement_feed of this InlineResponse2009Channel.  # noqa: E501
        :rtype: bool
        """
        return self._fb_placement_feed

    @fb_placement_feed.setter
    def fb_placement_feed(self, fb_placement_feed):
        """Sets the fb_placement_feed of this InlineResponse2009Channel.

        Is this for facebook feed  # noqa: E501

        :param fb_placement_feed: The fb_placement_feed of this InlineResponse2009Channel.  # noqa: E501
        :type: bool
        """

        self._fb_placement_feed = fb_placement_feed

    @property
    def fb_placement_audience(self):
        """Gets the fb_placement_audience of this InlineResponse2009Channel.  # noqa: E501

        Is this for facebook audience  # noqa: E501

        :return: The fb_placement_audience of this InlineResponse2009Channel.  # noqa: E501
        :rtype: bool
        """
        return self._fb_placement_audience

    @fb_placement_audience.setter
    def fb_placement_audience(self, fb_placement_audience):
        """Sets the fb_placement_audience of this InlineResponse2009Channel.

        Is this for facebook audience  # noqa: E501

        :param fb_placement_audience: The fb_placement_audience of this InlineResponse2009Channel.  # noqa: E501
        :type: bool
        """

        self._fb_placement_audience = fb_placement_audience

    @property
    def ig_placement_feed(self):
        """Gets the ig_placement_feed of this InlineResponse2009Channel.  # noqa: E501

        Is this for instagram feed  # noqa: E501

        :return: The ig_placement_feed of this InlineResponse2009Channel.  # noqa: E501
        :rtype: bool
        """
        return self._ig_placement_feed

    @ig_placement_feed.setter
    def ig_placement_feed(self, ig_placement_feed):
        """Sets the ig_placement_feed of this InlineResponse2009Channel.

        Is this for instagram feed  # noqa: E501

        :param ig_placement_feed: The ig_placement_feed of this InlineResponse2009Channel.  # noqa: E501
        :type: bool
        """

        self._ig_placement_feed = ig_placement_feed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2009Channel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2009Channel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
