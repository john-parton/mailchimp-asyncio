# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EcommerceCustomer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'email_address': 'str',
        'opt_in_status': 'bool',
        'company': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'orders_count': 'int',
        'total_spent': 'float',
        'address': 'Address',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'links': 'list[ResourceLink]'
    }

    attribute_map = {
        'id': 'id',
        'email_address': 'email_address',
        'opt_in_status': 'opt_in_status',
        'company': 'company',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'orders_count': 'orders_count',
        'total_spent': 'total_spent',
        'address': 'address',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'links': '_links'
    }

    def __init__(self, id=None, email_address=None, opt_in_status=None, company=None, first_name=None, last_name=None, orders_count=None, total_spent=None, address=None, created_at=None, updated_at=None, links=None):  # noqa: E501
        """EcommerceCustomer - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._email_address = None
        self._opt_in_status = None
        self._company = None
        self._first_name = None
        self._last_name = None
        self._orders_count = None
        self._total_spent = None
        self._address = None
        self._created_at = None
        self._updated_at = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if email_address is not None:
            self.email_address = email_address
        if opt_in_status is not None:
            self.opt_in_status = opt_in_status
        if company is not None:
            self.company = company
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if orders_count is not None:
            self.orders_count = orders_count
        if total_spent is not None:
            self.total_spent = total_spent
        if address is not None:
            self.address = address
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this EcommerceCustomer.  # noqa: E501

        A unique identifier for the customer.  # noqa: E501

        :return: The id of this EcommerceCustomer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EcommerceCustomer.

        A unique identifier for the customer.  # noqa: E501

        :param id: The id of this EcommerceCustomer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def email_address(self):
        """Gets the email_address of this EcommerceCustomer.  # noqa: E501

        The customer's email address.  # noqa: E501

        :return: The email_address of this EcommerceCustomer.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this EcommerceCustomer.

        The customer's email address.  # noqa: E501

        :param email_address: The email_address of this EcommerceCustomer.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def opt_in_status(self):
        """Gets the opt_in_status of this EcommerceCustomer.  # noqa: E501

        The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).  # noqa: E501

        :return: The opt_in_status of this EcommerceCustomer.  # noqa: E501
        :rtype: bool
        """
        return self._opt_in_status

    @opt_in_status.setter
    def opt_in_status(self, opt_in_status):
        """Sets the opt_in_status of this EcommerceCustomer.

        The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers).  # noqa: E501

        :param opt_in_status: The opt_in_status of this EcommerceCustomer.  # noqa: E501
        :type: bool
        """

        self._opt_in_status = opt_in_status

    @property
    def company(self):
        """Gets the company of this EcommerceCustomer.  # noqa: E501

        The customer's company.  # noqa: E501

        :return: The company of this EcommerceCustomer.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this EcommerceCustomer.

        The customer's company.  # noqa: E501

        :param company: The company of this EcommerceCustomer.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def first_name(self):
        """Gets the first_name of this EcommerceCustomer.  # noqa: E501

        The customer's first name.  # noqa: E501

        :return: The first_name of this EcommerceCustomer.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this EcommerceCustomer.

        The customer's first name.  # noqa: E501

        :param first_name: The first_name of this EcommerceCustomer.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this EcommerceCustomer.  # noqa: E501

        The customer's last name.  # noqa: E501

        :return: The last_name of this EcommerceCustomer.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this EcommerceCustomer.

        The customer's last name.  # noqa: E501

        :param last_name: The last_name of this EcommerceCustomer.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def orders_count(self):
        """Gets the orders_count of this EcommerceCustomer.  # noqa: E501

        The customer's total order count.  # noqa: E501

        :return: The orders_count of this EcommerceCustomer.  # noqa: E501
        :rtype: int
        """
        return self._orders_count

    @orders_count.setter
    def orders_count(self, orders_count):
        """Sets the orders_count of this EcommerceCustomer.

        The customer's total order count.  # noqa: E501

        :param orders_count: The orders_count of this EcommerceCustomer.  # noqa: E501
        :type: int
        """

        self._orders_count = orders_count

    @property
    def total_spent(self):
        """Gets the total_spent of this EcommerceCustomer.  # noqa: E501

        The total amount the customer has spent.  # noqa: E501

        :return: The total_spent of this EcommerceCustomer.  # noqa: E501
        :rtype: float
        """
        return self._total_spent

    @total_spent.setter
    def total_spent(self, total_spent):
        """Sets the total_spent of this EcommerceCustomer.

        The total amount the customer has spent.  # noqa: E501

        :param total_spent: The total_spent of this EcommerceCustomer.  # noqa: E501
        :type: float
        """

        self._total_spent = total_spent

    @property
    def address(self):
        """Gets the address of this EcommerceCustomer.  # noqa: E501


        :return: The address of this EcommerceCustomer.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this EcommerceCustomer.


        :param address: The address of this EcommerceCustomer.  # noqa: E501
        :type: Address
        """

        self._address = address

    @property
    def created_at(self):
        """Gets the created_at of this EcommerceCustomer.  # noqa: E501

        The date and time the customer was created in ISO 8601 format.  # noqa: E501

        :return: The created_at of this EcommerceCustomer.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EcommerceCustomer.

        The date and time the customer was created in ISO 8601 format.  # noqa: E501

        :param created_at: The created_at of this EcommerceCustomer.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this EcommerceCustomer.  # noqa: E501

        The date and time the customer was last updated in ISO 8601 format.  # noqa: E501

        :return: The updated_at of this EcommerceCustomer.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EcommerceCustomer.

        The date and time the customer was last updated in ISO 8601 format.  # noqa: E501

        :param updated_at: The updated_at of this EcommerceCustomer.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def links(self):
        """Gets the links of this EcommerceCustomer.  # noqa: E501

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :return: The links of this EcommerceCustomer.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this EcommerceCustomer.

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :param links: The links of this EcommerceCustomer.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EcommerceCustomer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EcommerceCustomer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
