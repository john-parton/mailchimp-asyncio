# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LandingPageReportTimeseries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'daily_stats': 'DailyClicksAndVisitsData',
        'weekly_stats': 'WeeklyClicksAndVisitsData'
    }

    attribute_map = {
        'daily_stats': 'daily_stats',
        'weekly_stats': 'weekly_stats'
    }

    def __init__(self, daily_stats=None, weekly_stats=None):  # noqa: E501
        """LandingPageReportTimeseries - a model defined in Swagger"""  # noqa: E501

        self._daily_stats = None
        self._weekly_stats = None
        self.discriminator = None

        if daily_stats is not None:
            self.daily_stats = daily_stats
        if weekly_stats is not None:
            self.weekly_stats = weekly_stats

    @property
    def daily_stats(self):
        """Gets the daily_stats of this LandingPageReportTimeseries.  # noqa: E501


        :return: The daily_stats of this LandingPageReportTimeseries.  # noqa: E501
        :rtype: DailyClicksAndVisitsData
        """
        return self._daily_stats

    @daily_stats.setter
    def daily_stats(self, daily_stats):
        """Sets the daily_stats of this LandingPageReportTimeseries.


        :param daily_stats: The daily_stats of this LandingPageReportTimeseries.  # noqa: E501
        :type: DailyClicksAndVisitsData
        """

        self._daily_stats = daily_stats

    @property
    def weekly_stats(self):
        """Gets the weekly_stats of this LandingPageReportTimeseries.  # noqa: E501


        :return: The weekly_stats of this LandingPageReportTimeseries.  # noqa: E501
        :rtype: WeeklyClicksAndVisitsData
        """
        return self._weekly_stats

    @weekly_stats.setter
    def weekly_stats(self, weekly_stats):
        """Sets the weekly_stats of this LandingPageReportTimeseries.


        :param weekly_stats: The weekly_stats of this LandingPageReportTimeseries.  # noqa: E501
        :type: WeeklyClicksAndVisitsData
        """

        self._weekly_stats = weekly_stats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LandingPageReportTimeseries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LandingPageReportTimeseries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
