# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Batch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'status': 'str',
        'total_operations': 'int',
        'finished_operations': 'int',
        'errored_operations': 'int',
        'submitted_at': 'datetime',
        'completed_at': 'datetime',
        'response_body_url': 'str',
        'links': 'list[ResourceLink]'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'total_operations': 'total_operations',
        'finished_operations': 'finished_operations',
        'errored_operations': 'errored_operations',
        'submitted_at': 'submitted_at',
        'completed_at': 'completed_at',
        'response_body_url': 'response_body_url',
        'links': '_links'
    }

    def __init__(self, id=None, status=None, total_operations=None, finished_operations=None, errored_operations=None, submitted_at=None, completed_at=None, response_body_url=None, links=None):  # noqa: E501
        """Batch - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._status = None
        self._total_operations = None
        self._finished_operations = None
        self._errored_operations = None
        self._submitted_at = None
        self._completed_at = None
        self._response_body_url = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if total_operations is not None:
            self.total_operations = total_operations
        if finished_operations is not None:
            self.finished_operations = finished_operations
        if errored_operations is not None:
            self.errored_operations = errored_operations
        if submitted_at is not None:
            self.submitted_at = submitted_at
        if completed_at is not None:
            self.completed_at = completed_at
        if response_body_url is not None:
            self.response_body_url = response_body_url
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this Batch.  # noqa: E501

        A string that uniquely identifies this batch request.  # noqa: E501

        :return: The id of this Batch.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Batch.

        A string that uniquely identifies this batch request.  # noqa: E501

        :param id: The id of this Batch.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this Batch.  # noqa: E501

        The status of the batch call. [Learn more](https://mailchimp.com/developer/marketing/guides/run-async-requests-batch-endpoint/#check-the-status-of-a-batch-operation) about the batch operation status.  # noqa: E501

        :return: The status of this Batch.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Batch.

        The status of the batch call. [Learn more](https://mailchimp.com/developer/marketing/guides/run-async-requests-batch-endpoint/#check-the-status-of-a-batch-operation) about the batch operation status.  # noqa: E501

        :param status: The status of this Batch.  # noqa: E501
        :type: str
        """
        allowed_values = ["pending", "preprocessing", "started", "finalizing", "finished"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def total_operations(self):
        """Gets the total_operations of this Batch.  # noqa: E501

        The total number of operations to complete as part of this batch request. For GET requests requiring pagination, each page counts as a separate operation.  # noqa: E501

        :return: The total_operations of this Batch.  # noqa: E501
        :rtype: int
        """
        return self._total_operations

    @total_operations.setter
    def total_operations(self, total_operations):
        """Sets the total_operations of this Batch.

        The total number of operations to complete as part of this batch request. For GET requests requiring pagination, each page counts as a separate operation.  # noqa: E501

        :param total_operations: The total_operations of this Batch.  # noqa: E501
        :type: int
        """

        self._total_operations = total_operations

    @property
    def finished_operations(self):
        """Gets the finished_operations of this Batch.  # noqa: E501

        The number of completed operations. This includes operations that returned an error.  # noqa: E501

        :return: The finished_operations of this Batch.  # noqa: E501
        :rtype: int
        """
        return self._finished_operations

    @finished_operations.setter
    def finished_operations(self, finished_operations):
        """Sets the finished_operations of this Batch.

        The number of completed operations. This includes operations that returned an error.  # noqa: E501

        :param finished_operations: The finished_operations of this Batch.  # noqa: E501
        :type: int
        """

        self._finished_operations = finished_operations

    @property
    def errored_operations(self):
        """Gets the errored_operations of this Batch.  # noqa: E501

        The number of completed operations that returned an error.  # noqa: E501

        :return: The errored_operations of this Batch.  # noqa: E501
        :rtype: int
        """
        return self._errored_operations

    @errored_operations.setter
    def errored_operations(self, errored_operations):
        """Sets the errored_operations of this Batch.

        The number of completed operations that returned an error.  # noqa: E501

        :param errored_operations: The errored_operations of this Batch.  # noqa: E501
        :type: int
        """

        self._errored_operations = errored_operations

    @property
    def submitted_at(self):
        """Gets the submitted_at of this Batch.  # noqa: E501

        The date and time when the server received the batch request in ISO 8601 format.  # noqa: E501

        :return: The submitted_at of this Batch.  # noqa: E501
        :rtype: datetime
        """
        return self._submitted_at

    @submitted_at.setter
    def submitted_at(self, submitted_at):
        """Sets the submitted_at of this Batch.

        The date and time when the server received the batch request in ISO 8601 format.  # noqa: E501

        :param submitted_at: The submitted_at of this Batch.  # noqa: E501
        :type: datetime
        """

        self._submitted_at = submitted_at

    @property
    def completed_at(self):
        """Gets the completed_at of this Batch.  # noqa: E501

        The date and time when all operations in the batch request completed in ISO 8601 format.  # noqa: E501

        :return: The completed_at of this Batch.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this Batch.

        The date and time when all operations in the batch request completed in ISO 8601 format.  # noqa: E501

        :param completed_at: The completed_at of this Batch.  # noqa: E501
        :type: datetime
        """

        self._completed_at = completed_at

    @property
    def response_body_url(self):
        """Gets the response_body_url of this Batch.  # noqa: E501

        The URL of the gzipped archive of the results of all the operations.  # noqa: E501

        :return: The response_body_url of this Batch.  # noqa: E501
        :rtype: str
        """
        return self._response_body_url

    @response_body_url.setter
    def response_body_url(self, response_body_url):
        """Sets the response_body_url of this Batch.

        The URL of the gzipped archive of the results of all the operations.  # noqa: E501

        :param response_body_url: The response_body_url of this Batch.  # noqa: E501
        :type: str
        """

        self._response_body_url = response_body_url

    @property
    def links(self):
        """Gets the links of this Batch.  # noqa: E501

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :return: The links of this Batch.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Batch.

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :param links: The links of this Batch.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Batch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Batch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
