# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GroupA(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_clicks_a': 'int',
        'click_percentage_a': 'float',
        'unique_clicks_a': 'int',
        'unique_click_percentage_a': 'float'
    }

    attribute_map = {
        'total_clicks_a': 'total_clicks_a',
        'click_percentage_a': 'click_percentage_a',
        'unique_clicks_a': 'unique_clicks_a',
        'unique_click_percentage_a': 'unique_click_percentage_a'
    }

    def __init__(self, total_clicks_a=None, click_percentage_a=None, unique_clicks_a=None, unique_click_percentage_a=None):  # noqa: E501
        """GroupA - a model defined in Swagger"""  # noqa: E501

        self._total_clicks_a = None
        self._click_percentage_a = None
        self._unique_clicks_a = None
        self._unique_click_percentage_a = None
        self.discriminator = None

        if total_clicks_a is not None:
            self.total_clicks_a = total_clicks_a
        if click_percentage_a is not None:
            self.click_percentage_a = click_percentage_a
        if unique_clicks_a is not None:
            self.unique_clicks_a = unique_clicks_a
        if unique_click_percentage_a is not None:
            self.unique_click_percentage_a = unique_click_percentage_a

    @property
    def total_clicks_a(self):
        """Gets the total_clicks_a of this GroupA.  # noqa: E501

        The total number of clicks for Group A.  # noqa: E501

        :return: The total_clicks_a of this GroupA.  # noqa: E501
        :rtype: int
        """
        return self._total_clicks_a

    @total_clicks_a.setter
    def total_clicks_a(self, total_clicks_a):
        """Sets the total_clicks_a of this GroupA.

        The total number of clicks for Group A.  # noqa: E501

        :param total_clicks_a: The total_clicks_a of this GroupA.  # noqa: E501
        :type: int
        """

        self._total_clicks_a = total_clicks_a

    @property
    def click_percentage_a(self):
        """Gets the click_percentage_a of this GroupA.  # noqa: E501

        The percentage of total clicks for Group A.  # noqa: E501

        :return: The click_percentage_a of this GroupA.  # noqa: E501
        :rtype: float
        """
        return self._click_percentage_a

    @click_percentage_a.setter
    def click_percentage_a(self, click_percentage_a):
        """Sets the click_percentage_a of this GroupA.

        The percentage of total clicks for Group A.  # noqa: E501

        :param click_percentage_a: The click_percentage_a of this GroupA.  # noqa: E501
        :type: float
        """

        self._click_percentage_a = click_percentage_a

    @property
    def unique_clicks_a(self):
        """Gets the unique_clicks_a of this GroupA.  # noqa: E501

        The number of unique clicks for Group A.  # noqa: E501

        :return: The unique_clicks_a of this GroupA.  # noqa: E501
        :rtype: int
        """
        return self._unique_clicks_a

    @unique_clicks_a.setter
    def unique_clicks_a(self, unique_clicks_a):
        """Sets the unique_clicks_a of this GroupA.

        The number of unique clicks for Group A.  # noqa: E501

        :param unique_clicks_a: The unique_clicks_a of this GroupA.  # noqa: E501
        :type: int
        """

        self._unique_clicks_a = unique_clicks_a

    @property
    def unique_click_percentage_a(self):
        """Gets the unique_click_percentage_a of this GroupA.  # noqa: E501

        The percentage of unique clicks for Group A.  # noqa: E501

        :return: The unique_click_percentage_a of this GroupA.  # noqa: E501
        :rtype: float
        """
        return self._unique_click_percentage_a

    @unique_click_percentage_a.setter
    def unique_click_percentage_a(self, unique_click_percentage_a):
        """Sets the unique_click_percentage_a of this GroupA.

        The percentage of unique clicks for Group A.  # noqa: E501

        :param unique_click_percentage_a: The unique_click_percentage_a of this GroupA.  # noqa: E501
        :type: float
        """

        self._unique_click_percentage_a = unique_click_percentage_a

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupA, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupA):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
