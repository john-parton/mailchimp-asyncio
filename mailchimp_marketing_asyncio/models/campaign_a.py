# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CampaignA(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bounces': 'int',
        'abuse_reports': 'int',
        'unsubs': 'int',
        'recipient_clicks': 'int',
        'forwards': 'int',
        'forwards_opens': 'int',
        'opens': 'int',
        'last_open': 'str',
        'unique_opens': 'int'
    }

    attribute_map = {
        'bounces': 'bounces',
        'abuse_reports': 'abuse_reports',
        'unsubs': 'unsubs',
        'recipient_clicks': 'recipient_clicks',
        'forwards': 'forwards',
        'forwards_opens': 'forwards_opens',
        'opens': 'opens',
        'last_open': 'last_open',
        'unique_opens': 'unique_opens'
    }

    def __init__(self, bounces=None, abuse_reports=None, unsubs=None, recipient_clicks=None, forwards=None, forwards_opens=None, opens=None, last_open=None, unique_opens=None):  # noqa: E501
        """CampaignA - a model defined in Swagger"""  # noqa: E501

        self._bounces = None
        self._abuse_reports = None
        self._unsubs = None
        self._recipient_clicks = None
        self._forwards = None
        self._forwards_opens = None
        self._opens = None
        self._last_open = None
        self._unique_opens = None
        self.discriminator = None

        if bounces is not None:
            self.bounces = bounces
        if abuse_reports is not None:
            self.abuse_reports = abuse_reports
        if unsubs is not None:
            self.unsubs = unsubs
        if recipient_clicks is not None:
            self.recipient_clicks = recipient_clicks
        if forwards is not None:
            self.forwards = forwards
        if forwards_opens is not None:
            self.forwards_opens = forwards_opens
        if opens is not None:
            self.opens = opens
        if last_open is not None:
            self.last_open = last_open
        if unique_opens is not None:
            self.unique_opens = unique_opens

    @property
    def bounces(self):
        """Gets the bounces of this CampaignA.  # noqa: E501

        Bounces for Campaign A.  # noqa: E501

        :return: The bounces of this CampaignA.  # noqa: E501
        :rtype: int
        """
        return self._bounces

    @bounces.setter
    def bounces(self, bounces):
        """Sets the bounces of this CampaignA.

        Bounces for Campaign A.  # noqa: E501

        :param bounces: The bounces of this CampaignA.  # noqa: E501
        :type: int
        """

        self._bounces = bounces

    @property
    def abuse_reports(self):
        """Gets the abuse_reports of this CampaignA.  # noqa: E501

        Abuse reports for Campaign A.  # noqa: E501

        :return: The abuse_reports of this CampaignA.  # noqa: E501
        :rtype: int
        """
        return self._abuse_reports

    @abuse_reports.setter
    def abuse_reports(self, abuse_reports):
        """Sets the abuse_reports of this CampaignA.

        Abuse reports for Campaign A.  # noqa: E501

        :param abuse_reports: The abuse_reports of this CampaignA.  # noqa: E501
        :type: int
        """

        self._abuse_reports = abuse_reports

    @property
    def unsubs(self):
        """Gets the unsubs of this CampaignA.  # noqa: E501

        Unsubscribes for Campaign A.  # noqa: E501

        :return: The unsubs of this CampaignA.  # noqa: E501
        :rtype: int
        """
        return self._unsubs

    @unsubs.setter
    def unsubs(self, unsubs):
        """Sets the unsubs of this CampaignA.

        Unsubscribes for Campaign A.  # noqa: E501

        :param unsubs: The unsubs of this CampaignA.  # noqa: E501
        :type: int
        """

        self._unsubs = unsubs

    @property
    def recipient_clicks(self):
        """Gets the recipient_clicks of this CampaignA.  # noqa: E501

        Recipient Clicks for Campaign A.  # noqa: E501

        :return: The recipient_clicks of this CampaignA.  # noqa: E501
        :rtype: int
        """
        return self._recipient_clicks

    @recipient_clicks.setter
    def recipient_clicks(self, recipient_clicks):
        """Sets the recipient_clicks of this CampaignA.

        Recipient Clicks for Campaign A.  # noqa: E501

        :param recipient_clicks: The recipient_clicks of this CampaignA.  # noqa: E501
        :type: int
        """

        self._recipient_clicks = recipient_clicks

    @property
    def forwards(self):
        """Gets the forwards of this CampaignA.  # noqa: E501

        Forwards for Campaign A.  # noqa: E501

        :return: The forwards of this CampaignA.  # noqa: E501
        :rtype: int
        """
        return self._forwards

    @forwards.setter
    def forwards(self, forwards):
        """Sets the forwards of this CampaignA.

        Forwards for Campaign A.  # noqa: E501

        :param forwards: The forwards of this CampaignA.  # noqa: E501
        :type: int
        """

        self._forwards = forwards

    @property
    def forwards_opens(self):
        """Gets the forwards_opens of this CampaignA.  # noqa: E501

        Opens from forwards for Campaign A.  # noqa: E501

        :return: The forwards_opens of this CampaignA.  # noqa: E501
        :rtype: int
        """
        return self._forwards_opens

    @forwards_opens.setter
    def forwards_opens(self, forwards_opens):
        """Sets the forwards_opens of this CampaignA.

        Opens from forwards for Campaign A.  # noqa: E501

        :param forwards_opens: The forwards_opens of this CampaignA.  # noqa: E501
        :type: int
        """

        self._forwards_opens = forwards_opens

    @property
    def opens(self):
        """Gets the opens of this CampaignA.  # noqa: E501

        Opens for Campaign A.  # noqa: E501

        :return: The opens of this CampaignA.  # noqa: E501
        :rtype: int
        """
        return self._opens

    @opens.setter
    def opens(self, opens):
        """Sets the opens of this CampaignA.

        Opens for Campaign A.  # noqa: E501

        :param opens: The opens of this CampaignA.  # noqa: E501
        :type: int
        """

        self._opens = opens

    @property
    def last_open(self):
        """Gets the last_open of this CampaignA.  # noqa: E501

        The last open for Campaign A.  # noqa: E501

        :return: The last_open of this CampaignA.  # noqa: E501
        :rtype: str
        """
        return self._last_open

    @last_open.setter
    def last_open(self, last_open):
        """Sets the last_open of this CampaignA.

        The last open for Campaign A.  # noqa: E501

        :param last_open: The last_open of this CampaignA.  # noqa: E501
        :type: str
        """

        self._last_open = last_open

    @property
    def unique_opens(self):
        """Gets the unique_opens of this CampaignA.  # noqa: E501

        Unique opens for Campaign A.  # noqa: E501

        :return: The unique_opens of this CampaignA.  # noqa: E501
        :rtype: int
        """
        return self._unique_opens

    @unique_opens.setter
    def unique_opens(self, unique_opens):
        """Sets the unique_opens of this CampaignA.

        Unique opens for Campaign A.  # noqa: E501

        :param unique_opens: The unique_opens of this CampaignA.  # noqa: E501
        :type: int
        """

        self._unique_opens = unique_opens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CampaignA, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignA):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
