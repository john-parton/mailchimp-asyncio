# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConnectedSite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'foreign_id': 'str',
        'store_id': 'str',
        'platform': 'str',
        'domain': 'str',
        'site_script': 'Script',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'links': 'list[ResourceLink]'
    }

    attribute_map = {
        'foreign_id': 'foreign_id',
        'store_id': 'store_id',
        'platform': 'platform',
        'domain': 'domain',
        'site_script': 'site_script',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'links': '_links'
    }

    def __init__(self, foreign_id=None, store_id=None, platform=None, domain=None, site_script=None, created_at=None, updated_at=None, links=None):  # noqa: E501
        """ConnectedSite - a model defined in Swagger"""  # noqa: E501

        self._foreign_id = None
        self._store_id = None
        self._platform = None
        self._domain = None
        self._site_script = None
        self._created_at = None
        self._updated_at = None
        self._links = None
        self.discriminator = None

        if foreign_id is not None:
            self.foreign_id = foreign_id
        if store_id is not None:
            self.store_id = store_id
        if platform is not None:
            self.platform = platform
        if domain is not None:
            self.domain = domain
        if site_script is not None:
            self.site_script = site_script
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if links is not None:
            self.links = links

    @property
    def foreign_id(self):
        """Gets the foreign_id of this ConnectedSite.  # noqa: E501

        The unique identifier for the site.  # noqa: E501

        :return: The foreign_id of this ConnectedSite.  # noqa: E501
        :rtype: str
        """
        return self._foreign_id

    @foreign_id.setter
    def foreign_id(self, foreign_id):
        """Sets the foreign_id of this ConnectedSite.

        The unique identifier for the site.  # noqa: E501

        :param foreign_id: The foreign_id of this ConnectedSite.  # noqa: E501
        :type: str
        """

        self._foreign_id = foreign_id

    @property
    def store_id(self):
        """Gets the store_id of this ConnectedSite.  # noqa: E501

        The unique identifier for the ecommerce store that's associated with the connected site (if any). The store_id for a specific connected site can't change.  # noqa: E501

        :return: The store_id of this ConnectedSite.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this ConnectedSite.

        The unique identifier for the ecommerce store that's associated with the connected site (if any). The store_id for a specific connected site can't change.  # noqa: E501

        :param store_id: The store_id of this ConnectedSite.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    @property
    def platform(self):
        """Gets the platform of this ConnectedSite.  # noqa: E501

        The platform of the connected site.  # noqa: E501

        :return: The platform of this ConnectedSite.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ConnectedSite.

        The platform of the connected site.  # noqa: E501

        :param platform: The platform of this ConnectedSite.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def domain(self):
        """Gets the domain of this ConnectedSite.  # noqa: E501

        The connected site domain.  # noqa: E501

        :return: The domain of this ConnectedSite.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ConnectedSite.

        The connected site domain.  # noqa: E501

        :param domain: The domain of this ConnectedSite.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def site_script(self):
        """Gets the site_script of this ConnectedSite.  # noqa: E501


        :return: The site_script of this ConnectedSite.  # noqa: E501
        :rtype: Script
        """
        return self._site_script

    @site_script.setter
    def site_script(self, site_script):
        """Sets the site_script of this ConnectedSite.


        :param site_script: The site_script of this ConnectedSite.  # noqa: E501
        :type: Script
        """

        self._site_script = site_script

    @property
    def created_at(self):
        """Gets the created_at of this ConnectedSite.  # noqa: E501

        The date and time the connected site was created in ISO 8601 format.  # noqa: E501

        :return: The created_at of this ConnectedSite.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ConnectedSite.

        The date and time the connected site was created in ISO 8601 format.  # noqa: E501

        :param created_at: The created_at of this ConnectedSite.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ConnectedSite.  # noqa: E501

        The date and time the connected site was last updated in ISO 8601 format.  # noqa: E501

        :return: The updated_at of this ConnectedSite.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ConnectedSite.

        The date and time the connected site was last updated in ISO 8601 format.  # noqa: E501

        :param updated_at: The updated_at of this ConnectedSite.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def links(self):
        """Gets the links of this ConnectedSite.  # noqa: E501

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :return: The links of this ConnectedSite.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ConnectedSite.

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :param links: The links of this ConnectedSite.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectedSite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectedSite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
