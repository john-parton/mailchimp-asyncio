# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CampaignReports1Timewarp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gmt_offset': 'int',
        'opens': 'int',
        'last_open': 'datetime',
        'unique_opens': 'int',
        'clicks': 'int',
        'last_click': 'datetime',
        'unique_clicks': 'int',
        'bounces': 'int'
    }

    attribute_map = {
        'gmt_offset': 'gmt_offset',
        'opens': 'opens',
        'last_open': 'last_open',
        'unique_opens': 'unique_opens',
        'clicks': 'clicks',
        'last_click': 'last_click',
        'unique_clicks': 'unique_clicks',
        'bounces': 'bounces'
    }

    def __init__(self, gmt_offset=None, opens=None, last_open=None, unique_opens=None, clicks=None, last_click=None, unique_clicks=None, bounces=None):  # noqa: E501
        """CampaignReports1Timewarp - a model defined in Swagger"""  # noqa: E501

        self._gmt_offset = None
        self._opens = None
        self._last_open = None
        self._unique_opens = None
        self._clicks = None
        self._last_click = None
        self._unique_clicks = None
        self._bounces = None
        self.discriminator = None

        if gmt_offset is not None:
            self.gmt_offset = gmt_offset
        if opens is not None:
            self.opens = opens
        if last_open is not None:
            self.last_open = last_open
        if unique_opens is not None:
            self.unique_opens = unique_opens
        if clicks is not None:
            self.clicks = clicks
        if last_click is not None:
            self.last_click = last_click
        if unique_clicks is not None:
            self.unique_clicks = unique_clicks
        if bounces is not None:
            self.bounces = bounces

    @property
    def gmt_offset(self):
        """Gets the gmt_offset of this CampaignReports1Timewarp.  # noqa: E501

        For campaigns sent with timewarp, the time zone group the member is apart of.  # noqa: E501

        :return: The gmt_offset of this CampaignReports1Timewarp.  # noqa: E501
        :rtype: int
        """
        return self._gmt_offset

    @gmt_offset.setter
    def gmt_offset(self, gmt_offset):
        """Sets the gmt_offset of this CampaignReports1Timewarp.

        For campaigns sent with timewarp, the time zone group the member is apart of.  # noqa: E501

        :param gmt_offset: The gmt_offset of this CampaignReports1Timewarp.  # noqa: E501
        :type: int
        """

        self._gmt_offset = gmt_offset

    @property
    def opens(self):
        """Gets the opens of this CampaignReports1Timewarp.  # noqa: E501

        The number of opens.  # noqa: E501

        :return: The opens of this CampaignReports1Timewarp.  # noqa: E501
        :rtype: int
        """
        return self._opens

    @opens.setter
    def opens(self, opens):
        """Sets the opens of this CampaignReports1Timewarp.

        The number of opens.  # noqa: E501

        :param opens: The opens of this CampaignReports1Timewarp.  # noqa: E501
        :type: int
        """

        self._opens = opens

    @property
    def last_open(self):
        """Gets the last_open of this CampaignReports1Timewarp.  # noqa: E501

        The date and time of the last open in ISO 8601 format.  # noqa: E501

        :return: The last_open of this CampaignReports1Timewarp.  # noqa: E501
        :rtype: datetime
        """
        return self._last_open

    @last_open.setter
    def last_open(self, last_open):
        """Sets the last_open of this CampaignReports1Timewarp.

        The date and time of the last open in ISO 8601 format.  # noqa: E501

        :param last_open: The last_open of this CampaignReports1Timewarp.  # noqa: E501
        :type: datetime
        """

        self._last_open = last_open

    @property
    def unique_opens(self):
        """Gets the unique_opens of this CampaignReports1Timewarp.  # noqa: E501

        The number of unique opens.  # noqa: E501

        :return: The unique_opens of this CampaignReports1Timewarp.  # noqa: E501
        :rtype: int
        """
        return self._unique_opens

    @unique_opens.setter
    def unique_opens(self, unique_opens):
        """Sets the unique_opens of this CampaignReports1Timewarp.

        The number of unique opens.  # noqa: E501

        :param unique_opens: The unique_opens of this CampaignReports1Timewarp.  # noqa: E501
        :type: int
        """

        self._unique_opens = unique_opens

    @property
    def clicks(self):
        """Gets the clicks of this CampaignReports1Timewarp.  # noqa: E501

        The number of clicks.  # noqa: E501

        :return: The clicks of this CampaignReports1Timewarp.  # noqa: E501
        :rtype: int
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this CampaignReports1Timewarp.

        The number of clicks.  # noqa: E501

        :param clicks: The clicks of this CampaignReports1Timewarp.  # noqa: E501
        :type: int
        """

        self._clicks = clicks

    @property
    def last_click(self):
        """Gets the last_click of this CampaignReports1Timewarp.  # noqa: E501

        The date and time of the last click in ISO 8601 format.  # noqa: E501

        :return: The last_click of this CampaignReports1Timewarp.  # noqa: E501
        :rtype: datetime
        """
        return self._last_click

    @last_click.setter
    def last_click(self, last_click):
        """Sets the last_click of this CampaignReports1Timewarp.

        The date and time of the last click in ISO 8601 format.  # noqa: E501

        :param last_click: The last_click of this CampaignReports1Timewarp.  # noqa: E501
        :type: datetime
        """

        self._last_click = last_click

    @property
    def unique_clicks(self):
        """Gets the unique_clicks of this CampaignReports1Timewarp.  # noqa: E501

        The number of unique clicks.  # noqa: E501

        :return: The unique_clicks of this CampaignReports1Timewarp.  # noqa: E501
        :rtype: int
        """
        return self._unique_clicks

    @unique_clicks.setter
    def unique_clicks(self, unique_clicks):
        """Sets the unique_clicks of this CampaignReports1Timewarp.

        The number of unique clicks.  # noqa: E501

        :param unique_clicks: The unique_clicks of this CampaignReports1Timewarp.  # noqa: E501
        :type: int
        """

        self._unique_clicks = unique_clicks

    @property
    def bounces(self):
        """Gets the bounces of this CampaignReports1Timewarp.  # noqa: E501

        The number of bounces.  # noqa: E501

        :return: The bounces of this CampaignReports1Timewarp.  # noqa: E501
        :rtype: int
        """
        return self._bounces

    @bounces.setter
    def bounces(self, bounces):
        """Sets the bounces of this CampaignReports1Timewarp.

        The number of bounces.  # noqa: E501

        :param bounces: The bounces of this CampaignReports1Timewarp.  # noqa: E501
        :type: int
        """

        self._bounces = bounces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CampaignReports1Timewarp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignReports1Timewarp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
