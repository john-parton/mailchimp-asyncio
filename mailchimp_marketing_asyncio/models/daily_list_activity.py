# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DailyListActivity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'day': 'str',
        'emails_sent': 'int',
        'unique_opens': 'int',
        'recipient_clicks': 'int',
        'hard_bounce': 'int',
        'soft_bounce': 'int',
        'subs': 'int',
        'unsubs': 'int',
        'other_adds': 'int',
        'other_removes': 'int',
        'links': 'list[ResourceLink]'
    }

    attribute_map = {
        'day': 'day',
        'emails_sent': 'emails_sent',
        'unique_opens': 'unique_opens',
        'recipient_clicks': 'recipient_clicks',
        'hard_bounce': 'hard_bounce',
        'soft_bounce': 'soft_bounce',
        'subs': 'subs',
        'unsubs': 'unsubs',
        'other_adds': 'other_adds',
        'other_removes': 'other_removes',
        'links': '_links'
    }

    def __init__(self, day=None, emails_sent=None, unique_opens=None, recipient_clicks=None, hard_bounce=None, soft_bounce=None, subs=None, unsubs=None, other_adds=None, other_removes=None, links=None):  # noqa: E501
        """DailyListActivity - a model defined in Swagger"""  # noqa: E501

        self._day = None
        self._emails_sent = None
        self._unique_opens = None
        self._recipient_clicks = None
        self._hard_bounce = None
        self._soft_bounce = None
        self._subs = None
        self._unsubs = None
        self._other_adds = None
        self._other_removes = None
        self._links = None
        self.discriminator = None

        if day is not None:
            self.day = day
        if emails_sent is not None:
            self.emails_sent = emails_sent
        if unique_opens is not None:
            self.unique_opens = unique_opens
        if recipient_clicks is not None:
            self.recipient_clicks = recipient_clicks
        if hard_bounce is not None:
            self.hard_bounce = hard_bounce
        if soft_bounce is not None:
            self.soft_bounce = soft_bounce
        if subs is not None:
            self.subs = subs
        if unsubs is not None:
            self.unsubs = unsubs
        if other_adds is not None:
            self.other_adds = other_adds
        if other_removes is not None:
            self.other_removes = other_removes
        if links is not None:
            self.links = links

    @property
    def day(self):
        """Gets the day of this DailyListActivity.  # noqa: E501

        The date for the activity summary.  # noqa: E501

        :return: The day of this DailyListActivity.  # noqa: E501
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this DailyListActivity.

        The date for the activity summary.  # noqa: E501

        :param day: The day of this DailyListActivity.  # noqa: E501
        :type: str
        """

        self._day = day

    @property
    def emails_sent(self):
        """Gets the emails_sent of this DailyListActivity.  # noqa: E501

        The total number of emails sent on the date for the activity summary.  # noqa: E501

        :return: The emails_sent of this DailyListActivity.  # noqa: E501
        :rtype: int
        """
        return self._emails_sent

    @emails_sent.setter
    def emails_sent(self, emails_sent):
        """Sets the emails_sent of this DailyListActivity.

        The total number of emails sent on the date for the activity summary.  # noqa: E501

        :param emails_sent: The emails_sent of this DailyListActivity.  # noqa: E501
        :type: int
        """

        self._emails_sent = emails_sent

    @property
    def unique_opens(self):
        """Gets the unique_opens of this DailyListActivity.  # noqa: E501

        The number of unique opens.  # noqa: E501

        :return: The unique_opens of this DailyListActivity.  # noqa: E501
        :rtype: int
        """
        return self._unique_opens

    @unique_opens.setter
    def unique_opens(self, unique_opens):
        """Sets the unique_opens of this DailyListActivity.

        The number of unique opens.  # noqa: E501

        :param unique_opens: The unique_opens of this DailyListActivity.  # noqa: E501
        :type: int
        """

        self._unique_opens = unique_opens

    @property
    def recipient_clicks(self):
        """Gets the recipient_clicks of this DailyListActivity.  # noqa: E501

        The number of clicks.  # noqa: E501

        :return: The recipient_clicks of this DailyListActivity.  # noqa: E501
        :rtype: int
        """
        return self._recipient_clicks

    @recipient_clicks.setter
    def recipient_clicks(self, recipient_clicks):
        """Sets the recipient_clicks of this DailyListActivity.

        The number of clicks.  # noqa: E501

        :param recipient_clicks: The recipient_clicks of this DailyListActivity.  # noqa: E501
        :type: int
        """

        self._recipient_clicks = recipient_clicks

    @property
    def hard_bounce(self):
        """Gets the hard_bounce of this DailyListActivity.  # noqa: E501

        The number of hard bounces.  # noqa: E501

        :return: The hard_bounce of this DailyListActivity.  # noqa: E501
        :rtype: int
        """
        return self._hard_bounce

    @hard_bounce.setter
    def hard_bounce(self, hard_bounce):
        """Sets the hard_bounce of this DailyListActivity.

        The number of hard bounces.  # noqa: E501

        :param hard_bounce: The hard_bounce of this DailyListActivity.  # noqa: E501
        :type: int
        """

        self._hard_bounce = hard_bounce

    @property
    def soft_bounce(self):
        """Gets the soft_bounce of this DailyListActivity.  # noqa: E501

        The number of soft bounces  # noqa: E501

        :return: The soft_bounce of this DailyListActivity.  # noqa: E501
        :rtype: int
        """
        return self._soft_bounce

    @soft_bounce.setter
    def soft_bounce(self, soft_bounce):
        """Sets the soft_bounce of this DailyListActivity.

        The number of soft bounces  # noqa: E501

        :param soft_bounce: The soft_bounce of this DailyListActivity.  # noqa: E501
        :type: int
        """

        self._soft_bounce = soft_bounce

    @property
    def subs(self):
        """Gets the subs of this DailyListActivity.  # noqa: E501

        The number of subscribes.  # noqa: E501

        :return: The subs of this DailyListActivity.  # noqa: E501
        :rtype: int
        """
        return self._subs

    @subs.setter
    def subs(self, subs):
        """Sets the subs of this DailyListActivity.

        The number of subscribes.  # noqa: E501

        :param subs: The subs of this DailyListActivity.  # noqa: E501
        :type: int
        """

        self._subs = subs

    @property
    def unsubs(self):
        """Gets the unsubs of this DailyListActivity.  # noqa: E501

        The number of unsubscribes.  # noqa: E501

        :return: The unsubs of this DailyListActivity.  # noqa: E501
        :rtype: int
        """
        return self._unsubs

    @unsubs.setter
    def unsubs(self, unsubs):
        """Sets the unsubs of this DailyListActivity.

        The number of unsubscribes.  # noqa: E501

        :param unsubs: The unsubs of this DailyListActivity.  # noqa: E501
        :type: int
        """

        self._unsubs = unsubs

    @property
    def other_adds(self):
        """Gets the other_adds of this DailyListActivity.  # noqa: E501

        The number of subscribers who may have been added outside of the [double opt-in process](https://mailchimp.com/help/about-double-opt-in/), such as imports or API activity.  # noqa: E501

        :return: The other_adds of this DailyListActivity.  # noqa: E501
        :rtype: int
        """
        return self._other_adds

    @other_adds.setter
    def other_adds(self, other_adds):
        """Sets the other_adds of this DailyListActivity.

        The number of subscribers who may have been added outside of the [double opt-in process](https://mailchimp.com/help/about-double-opt-in/), such as imports or API activity.  # noqa: E501

        :param other_adds: The other_adds of this DailyListActivity.  # noqa: E501
        :type: int
        """

        self._other_adds = other_adds

    @property
    def other_removes(self):
        """Gets the other_removes of this DailyListActivity.  # noqa: E501

        The number of subscribers who may have been removed outside of unsubscribing or reporting an email as spam (for example, deleted subscribers).  # noqa: E501

        :return: The other_removes of this DailyListActivity.  # noqa: E501
        :rtype: int
        """
        return self._other_removes

    @other_removes.setter
    def other_removes(self, other_removes):
        """Sets the other_removes of this DailyListActivity.

        The number of subscribers who may have been removed outside of unsubscribing or reporting an email as spam (for example, deleted subscribers).  # noqa: E501

        :param other_removes: The other_removes of this DailyListActivity.  # noqa: E501
        :type: int
        """

        self._other_removes = other_removes

    @property
    def links(self):
        """Gets the links of this DailyListActivity.  # noqa: E501

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :return: The links of this DailyListActivity.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DailyListActivity.

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :param links: The links of this DailyListActivity.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DailyListActivity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DailyListActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
