# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ShippingAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'address1': 'str',
        'address2': 'str',
        'city': 'str',
        'province': 'str',
        'province_code': 'str',
        'postal_code': 'str',
        'country': 'str',
        'country_code': 'str',
        'longitude': 'float',
        'latitude': 'float',
        'phone': 'str',
        'company': 'str'
    }

    attribute_map = {
        'name': 'name',
        'address1': 'address1',
        'address2': 'address2',
        'city': 'city',
        'province': 'province',
        'province_code': 'province_code',
        'postal_code': 'postal_code',
        'country': 'country',
        'country_code': 'country_code',
        'longitude': 'longitude',
        'latitude': 'latitude',
        'phone': 'phone',
        'company': 'company'
    }

    def __init__(self, name=None, address1=None, address2=None, city=None, province=None, province_code=None, postal_code=None, country=None, country_code=None, longitude=None, latitude=None, phone=None, company=None):  # noqa: E501
        """ShippingAddress - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._address1 = None
        self._address2 = None
        self._city = None
        self._province = None
        self._province_code = None
        self._postal_code = None
        self._country = None
        self._country_code = None
        self._longitude = None
        self._latitude = None
        self._phone = None
        self._company = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if address1 is not None:
            self.address1 = address1
        if address2 is not None:
            self.address2 = address2
        if city is not None:
            self.city = city
        if province is not None:
            self.province = province
        if province_code is not None:
            self.province_code = province_code
        if postal_code is not None:
            self.postal_code = postal_code
        if country is not None:
            self.country = country
        if country_code is not None:
            self.country_code = country_code
        if longitude is not None:
            self.longitude = longitude
        if latitude is not None:
            self.latitude = latitude
        if phone is not None:
            self.phone = phone
        if company is not None:
            self.company = company

    @property
    def name(self):
        """Gets the name of this ShippingAddress.  # noqa: E501

        The name associated with an order's shipping address.  # noqa: E501

        :return: The name of this ShippingAddress.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ShippingAddress.

        The name associated with an order's shipping address.  # noqa: E501

        :param name: The name of this ShippingAddress.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def address1(self):
        """Gets the address1 of this ShippingAddress.  # noqa: E501

        The shipping address for the order.  # noqa: E501

        :return: The address1 of this ShippingAddress.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this ShippingAddress.

        The shipping address for the order.  # noqa: E501

        :param address1: The address1 of this ShippingAddress.  # noqa: E501
        :type: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this ShippingAddress.  # noqa: E501

        An additional field for the shipping address.  # noqa: E501

        :return: The address2 of this ShippingAddress.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this ShippingAddress.

        An additional field for the shipping address.  # noqa: E501

        :param address2: The address2 of this ShippingAddress.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this ShippingAddress.  # noqa: E501

        The city in the order's shipping address.  # noqa: E501

        :return: The city of this ShippingAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ShippingAddress.

        The city in the order's shipping address.  # noqa: E501

        :param city: The city of this ShippingAddress.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def province(self):
        """Gets the province of this ShippingAddress.  # noqa: E501

        The state or normalized province in the order's shipping address.  # noqa: E501

        :return: The province of this ShippingAddress.  # noqa: E501
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this ShippingAddress.

        The state or normalized province in the order's shipping address.  # noqa: E501

        :param province: The province of this ShippingAddress.  # noqa: E501
        :type: str
        """

        self._province = province

    @property
    def province_code(self):
        """Gets the province_code of this ShippingAddress.  # noqa: E501

        The two-letter code for the province or state the order's shipping address is located in.  # noqa: E501

        :return: The province_code of this ShippingAddress.  # noqa: E501
        :rtype: str
        """
        return self._province_code

    @province_code.setter
    def province_code(self, province_code):
        """Sets the province_code of this ShippingAddress.

        The two-letter code for the province or state the order's shipping address is located in.  # noqa: E501

        :param province_code: The province_code of this ShippingAddress.  # noqa: E501
        :type: str
        """

        self._province_code = province_code

    @property
    def postal_code(self):
        """Gets the postal_code of this ShippingAddress.  # noqa: E501

        The postal or zip code in the order's shipping address.  # noqa: E501

        :return: The postal_code of this ShippingAddress.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ShippingAddress.

        The postal or zip code in the order's shipping address.  # noqa: E501

        :param postal_code: The postal_code of this ShippingAddress.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country(self):
        """Gets the country of this ShippingAddress.  # noqa: E501

        The country in the order's shipping address.  # noqa: E501

        :return: The country of this ShippingAddress.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ShippingAddress.

        The country in the order's shipping address.  # noqa: E501

        :param country: The country of this ShippingAddress.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this ShippingAddress.  # noqa: E501

        The two-letter code for the country in the shipping address.  # noqa: E501

        :return: The country_code of this ShippingAddress.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this ShippingAddress.

        The two-letter code for the country in the shipping address.  # noqa: E501

        :param country_code: The country_code of this ShippingAddress.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def longitude(self):
        """Gets the longitude of this ShippingAddress.  # noqa: E501

        The longitude for the shipping address location.  # noqa: E501

        :return: The longitude of this ShippingAddress.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this ShippingAddress.

        The longitude for the shipping address location.  # noqa: E501

        :param longitude: The longitude of this ShippingAddress.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def latitude(self):
        """Gets the latitude of this ShippingAddress.  # noqa: E501

        The latitude for the shipping address location.  # noqa: E501

        :return: The latitude of this ShippingAddress.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this ShippingAddress.

        The latitude for the shipping address location.  # noqa: E501

        :param latitude: The latitude of this ShippingAddress.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def phone(self):
        """Gets the phone of this ShippingAddress.  # noqa: E501

        The phone number for the order's shipping address  # noqa: E501

        :return: The phone of this ShippingAddress.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ShippingAddress.

        The phone number for the order's shipping address  # noqa: E501

        :param phone: The phone of this ShippingAddress.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def company(self):
        """Gets the company of this ShippingAddress.  # noqa: E501

        The company associated with an order's shipping address.  # noqa: E501

        :return: The company of this ShippingAddress.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this ShippingAddress.

        The company associated with an order's shipping address.  # noqa: E501

        :param company: The company of this ShippingAddress.  # noqa: E501
        :type: str
        """

        self._company = company

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShippingAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShippingAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
