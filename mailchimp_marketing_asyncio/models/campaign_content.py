# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CampaignContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'variate_contents': 'list[CampaignContentVariateContents]',
        'plain_text': 'str',
        'html': 'str',
        'archive_html': 'str',
        'links': 'list[ResourceLink]'
    }

    attribute_map = {
        'variate_contents': 'variate_contents',
        'plain_text': 'plain_text',
        'html': 'html',
        'archive_html': 'archive_html',
        'links': '_links'
    }

    def __init__(self, variate_contents=None, plain_text=None, html=None, archive_html=None, links=None):  # noqa: E501
        """CampaignContent - a model defined in Swagger"""  # noqa: E501

        self._variate_contents = None
        self._plain_text = None
        self._html = None
        self._archive_html = None
        self._links = None
        self.discriminator = None

        if variate_contents is not None:
            self.variate_contents = variate_contents
        if plain_text is not None:
            self.plain_text = plain_text
        if html is not None:
            self.html = html
        if archive_html is not None:
            self.archive_html = archive_html
        if links is not None:
            self.links = links

    @property
    def variate_contents(self):
        """Gets the variate_contents of this CampaignContent.  # noqa: E501

        Content options for multivariate campaigns.  # noqa: E501

        :return: The variate_contents of this CampaignContent.  # noqa: E501
        :rtype: list[CampaignContentVariateContents]
        """
        return self._variate_contents

    @variate_contents.setter
    def variate_contents(self, variate_contents):
        """Sets the variate_contents of this CampaignContent.

        Content options for multivariate campaigns.  # noqa: E501

        :param variate_contents: The variate_contents of this CampaignContent.  # noqa: E501
        :type: list[CampaignContentVariateContents]
        """

        self._variate_contents = variate_contents

    @property
    def plain_text(self):
        """Gets the plain_text of this CampaignContent.  # noqa: E501

        The plain-text portion of the campaign. If left unspecified, we'll generate this automatically.  # noqa: E501

        :return: The plain_text of this CampaignContent.  # noqa: E501
        :rtype: str
        """
        return self._plain_text

    @plain_text.setter
    def plain_text(self, plain_text):
        """Sets the plain_text of this CampaignContent.

        The plain-text portion of the campaign. If left unspecified, we'll generate this automatically.  # noqa: E501

        :param plain_text: The plain_text of this CampaignContent.  # noqa: E501
        :type: str
        """

        self._plain_text = plain_text

    @property
    def html(self):
        """Gets the html of this CampaignContent.  # noqa: E501

        The raw HTML for the campaign.  # noqa: E501

        :return: The html of this CampaignContent.  # noqa: E501
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this CampaignContent.

        The raw HTML for the campaign.  # noqa: E501

        :param html: The html of this CampaignContent.  # noqa: E501
        :type: str
        """

        self._html = html

    @property
    def archive_html(self):
        """Gets the archive_html of this CampaignContent.  # noqa: E501

        The Archive HTML for the campaign.  # noqa: E501

        :return: The archive_html of this CampaignContent.  # noqa: E501
        :rtype: str
        """
        return self._archive_html

    @archive_html.setter
    def archive_html(self, archive_html):
        """Sets the archive_html of this CampaignContent.

        The Archive HTML for the campaign.  # noqa: E501

        :param archive_html: The archive_html of this CampaignContent.  # noqa: E501
        :type: str
        """

        self._archive_html = archive_html

    @property
    def links(self):
        """Gets the links of this CampaignContent.  # noqa: E501

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :return: The links of this CampaignContent.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CampaignContent.

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :param links: The links of this CampaignContent.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CampaignContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
