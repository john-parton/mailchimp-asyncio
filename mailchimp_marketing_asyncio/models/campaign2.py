# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Campaign2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'recipients': 'List5',
        'settings': 'CampaignSettings4',
        'variate_settings': 'ABTestOptions1',
        'tracking': 'CampaignTrackingOptions1',
        'rss_opts': 'RSSOptions2',
        'social_card': 'CampaignSocialCard'
    }

    attribute_map = {
        'recipients': 'recipients',
        'settings': 'settings',
        'variate_settings': 'variate_settings',
        'tracking': 'tracking',
        'rss_opts': 'rss_opts',
        'social_card': 'social_card'
    }

    def __init__(self, recipients=None, settings=None, variate_settings=None, tracking=None, rss_opts=None, social_card=None):  # noqa: E501
        """Campaign2 - a model defined in Swagger"""  # noqa: E501

        self._recipients = None
        self._settings = None
        self._variate_settings = None
        self._tracking = None
        self._rss_opts = None
        self._social_card = None
        self.discriminator = None

        if recipients is not None:
            self.recipients = recipients
        self.settings = settings
        if variate_settings is not None:
            self.variate_settings = variate_settings
        if tracking is not None:
            self.tracking = tracking
        if rss_opts is not None:
            self.rss_opts = rss_opts
        if social_card is not None:
            self.social_card = social_card

    @property
    def recipients(self):
        """Gets the recipients of this Campaign2.  # noqa: E501


        :return: The recipients of this Campaign2.  # noqa: E501
        :rtype: List5
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this Campaign2.


        :param recipients: The recipients of this Campaign2.  # noqa: E501
        :type: List5
        """

        self._recipients = recipients

    @property
    def settings(self):
        """Gets the settings of this Campaign2.  # noqa: E501


        :return: The settings of this Campaign2.  # noqa: E501
        :rtype: CampaignSettings4
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Campaign2.


        :param settings: The settings of this Campaign2.  # noqa: E501
        :type: CampaignSettings4
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")  # noqa: E501

        self._settings = settings

    @property
    def variate_settings(self):
        """Gets the variate_settings of this Campaign2.  # noqa: E501


        :return: The variate_settings of this Campaign2.  # noqa: E501
        :rtype: ABTestOptions1
        """
        return self._variate_settings

    @variate_settings.setter
    def variate_settings(self, variate_settings):
        """Sets the variate_settings of this Campaign2.


        :param variate_settings: The variate_settings of this Campaign2.  # noqa: E501
        :type: ABTestOptions1
        """

        self._variate_settings = variate_settings

    @property
    def tracking(self):
        """Gets the tracking of this Campaign2.  # noqa: E501


        :return: The tracking of this Campaign2.  # noqa: E501
        :rtype: CampaignTrackingOptions1
        """
        return self._tracking

    @tracking.setter
    def tracking(self, tracking):
        """Sets the tracking of this Campaign2.


        :param tracking: The tracking of this Campaign2.  # noqa: E501
        :type: CampaignTrackingOptions1
        """

        self._tracking = tracking

    @property
    def rss_opts(self):
        """Gets the rss_opts of this Campaign2.  # noqa: E501


        :return: The rss_opts of this Campaign2.  # noqa: E501
        :rtype: RSSOptions2
        """
        return self._rss_opts

    @rss_opts.setter
    def rss_opts(self, rss_opts):
        """Sets the rss_opts of this Campaign2.


        :param rss_opts: The rss_opts of this Campaign2.  # noqa: E501
        :type: RSSOptions2
        """

        self._rss_opts = rss_opts

    @property
    def social_card(self):
        """Gets the social_card of this Campaign2.  # noqa: E501


        :return: The social_card of this Campaign2.  # noqa: E501
        :rtype: CampaignSocialCard
        """
        return self._social_card

    @social_card.setter
    def social_card(self, social_card):
        """Sets the social_card of this Campaign2.


        :param social_card: The social_card of this Campaign2.  # noqa: E501
        :type: CampaignSocialCard
        """

        self._social_card = social_card

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Campaign2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Campaign2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
