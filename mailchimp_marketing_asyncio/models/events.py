# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Events(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'properties': 'dict(str, str)',
        'is_syncing': 'bool',
        'occurred_at': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'properties': 'properties',
        'is_syncing': 'is_syncing',
        'occurred_at': 'occurred_at'
    }

    def __init__(self, name=None, properties=None, is_syncing=None, occurred_at=None):  # noqa: E501
        """Events - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._properties = None
        self._is_syncing = None
        self._occurred_at = None
        self.discriminator = None

        self.name = name
        if properties is not None:
            self.properties = properties
        if is_syncing is not None:
            self.is_syncing = is_syncing
        if occurred_at is not None:
            self.occurred_at = occurred_at

    @property
    def name(self):
        """Gets the name of this Events.  # noqa: E501

        The name for this type of event ('purchased', 'visited', etc). Must be 2-30 characters in length  # noqa: E501

        :return: The name of this Events.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Events.

        The name for this type of event ('purchased', 'visited', etc). Must be 2-30 characters in length  # noqa: E501

        :param name: The name of this Events.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def properties(self):
        """Gets the properties of this Events.  # noqa: E501

        An optional list of properties  # noqa: E501

        :return: The properties of this Events.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Events.

        An optional list of properties  # noqa: E501

        :param properties: The properties of this Events.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    @property
    def is_syncing(self):
        """Gets the is_syncing of this Events.  # noqa: E501

        Events created with the is_syncing value set to `true` will not trigger automations.  # noqa: E501

        :return: The is_syncing of this Events.  # noqa: E501
        :rtype: bool
        """
        return self._is_syncing

    @is_syncing.setter
    def is_syncing(self, is_syncing):
        """Sets the is_syncing of this Events.

        Events created with the is_syncing value set to `true` will not trigger automations.  # noqa: E501

        :param is_syncing: The is_syncing of this Events.  # noqa: E501
        :type: bool
        """

        self._is_syncing = is_syncing

    @property
    def occurred_at(self):
        """Gets the occurred_at of this Events.  # noqa: E501

        The date and time the event occurred in ISO 8601 format.  # noqa: E501

        :return: The occurred_at of this Events.  # noqa: E501
        :rtype: datetime
        """
        return self._occurred_at

    @occurred_at.setter
    def occurred_at(self, occurred_at):
        """Sets the occurred_at of this Events.

        The date and time the event occurred in ISO 8601 format.  # noqa: E501

        :param occurred_at: The occurred_at of this Events.  # noqa: E501
        :type: datetime
        """

        self._occurred_at = occurred_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Events, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Events):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
