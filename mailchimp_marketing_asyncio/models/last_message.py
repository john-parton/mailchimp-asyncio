# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LastMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_label': 'str',
        'from_email': 'str',
        'subject': 'str',
        'message': 'str',
        'read': 'bool',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'from_label': 'from_label',
        'from_email': 'from_email',
        'subject': 'subject',
        'message': 'message',
        'read': 'read',
        'timestamp': 'timestamp'
    }

    def __init__(self, from_label=None, from_email=None, subject=None, message=None, read=None, timestamp=None):  # noqa: E501
        """LastMessage - a model defined in Swagger"""  # noqa: E501

        self._from_label = None
        self._from_email = None
        self._subject = None
        self._message = None
        self._read = None
        self._timestamp = None
        self.discriminator = None

        if from_label is not None:
            self.from_label = from_label
        if from_email is not None:
            self.from_email = from_email
        if subject is not None:
            self.subject = subject
        if message is not None:
            self.message = message
        if read is not None:
            self.read = read
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def from_label(self):
        """Gets the from_label of this LastMessage.  # noqa: E501

        A label representing the sender of this message.  # noqa: E501

        :return: The from_label of this LastMessage.  # noqa: E501
        :rtype: str
        """
        return self._from_label

    @from_label.setter
    def from_label(self, from_label):
        """Sets the from_label of this LastMessage.

        A label representing the sender of this message.  # noqa: E501

        :param from_label: The from_label of this LastMessage.  # noqa: E501
        :type: str
        """

        self._from_label = from_label

    @property
    def from_email(self):
        """Gets the from_email of this LastMessage.  # noqa: E501

        A label representing the email of the sender of this message.  # noqa: E501

        :return: The from_email of this LastMessage.  # noqa: E501
        :rtype: str
        """
        return self._from_email

    @from_email.setter
    def from_email(self, from_email):
        """Sets the from_email of this LastMessage.

        A label representing the email of the sender of this message.  # noqa: E501

        :param from_email: The from_email of this LastMessage.  # noqa: E501
        :type: str
        """

        self._from_email = from_email

    @property
    def subject(self):
        """Gets the subject of this LastMessage.  # noqa: E501

        The subject of this message.  # noqa: E501

        :return: The subject of this LastMessage.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this LastMessage.

        The subject of this message.  # noqa: E501

        :param subject: The subject of this LastMessage.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def message(self):
        """Gets the message of this LastMessage.  # noqa: E501

        The plain-text content of the message.  # noqa: E501

        :return: The message of this LastMessage.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this LastMessage.

        The plain-text content of the message.  # noqa: E501

        :param message: The message of this LastMessage.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def read(self):
        """Gets the read of this LastMessage.  # noqa: E501

        Whether this message has been marked as read.  # noqa: E501

        :return: The read of this LastMessage.  # noqa: E501
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this LastMessage.

        Whether this message has been marked as read.  # noqa: E501

        :param read: The read of this LastMessage.  # noqa: E501
        :type: bool
        """

        self._read = read

    @property
    def timestamp(self):
        """Gets the timestamp of this LastMessage.  # noqa: E501

        The date and time the message was either sent or received in ISO 8601 format.  # noqa: E501

        :return: The timestamp of this LastMessage.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this LastMessage.

        The date and time the message was either sent or received in ISO 8601 format.  # noqa: E501

        :param timestamp: The timestamp of this LastMessage.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LastMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LastMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
