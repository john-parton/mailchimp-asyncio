# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BatchUpdateListMembers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'new_members': 'list[ListMembers]',
        'updated_members': 'list[ListMembers]',
        'errors': 'list[BatchUpdateListMembersErrors]',
        'total_created': 'int',
        'total_updated': 'int',
        'error_count': 'int',
        'links': 'list[ResourceLink]'
    }

    attribute_map = {
        'new_members': 'new_members',
        'updated_members': 'updated_members',
        'errors': 'errors',
        'total_created': 'total_created',
        'total_updated': 'total_updated',
        'error_count': 'error_count',
        'links': '_links'
    }

    def __init__(self, new_members=None, updated_members=None, errors=None, total_created=None, total_updated=None, error_count=None, links=None):  # noqa: E501
        """BatchUpdateListMembers - a model defined in Swagger"""  # noqa: E501

        self._new_members = None
        self._updated_members = None
        self._errors = None
        self._total_created = None
        self._total_updated = None
        self._error_count = None
        self._links = None
        self.discriminator = None

        if new_members is not None:
            self.new_members = new_members
        if updated_members is not None:
            self.updated_members = updated_members
        if errors is not None:
            self.errors = errors
        if total_created is not None:
            self.total_created = total_created
        if total_updated is not None:
            self.total_updated = total_updated
        if error_count is not None:
            self.error_count = error_count
        if links is not None:
            self.links = links

    @property
    def new_members(self):
        """Gets the new_members of this BatchUpdateListMembers.  # noqa: E501

        An array of objects, each representing a new member that was added to the list.  # noqa: E501

        :return: The new_members of this BatchUpdateListMembers.  # noqa: E501
        :rtype: list[ListMembers]
        """
        return self._new_members

    @new_members.setter
    def new_members(self, new_members):
        """Sets the new_members of this BatchUpdateListMembers.

        An array of objects, each representing a new member that was added to the list.  # noqa: E501

        :param new_members: The new_members of this BatchUpdateListMembers.  # noqa: E501
        :type: list[ListMembers]
        """

        self._new_members = new_members

    @property
    def updated_members(self):
        """Gets the updated_members of this BatchUpdateListMembers.  # noqa: E501

        An array of objects, each representing an existing list member whose subscription status was updated.  # noqa: E501

        :return: The updated_members of this BatchUpdateListMembers.  # noqa: E501
        :rtype: list[ListMembers]
        """
        return self._updated_members

    @updated_members.setter
    def updated_members(self, updated_members):
        """Sets the updated_members of this BatchUpdateListMembers.

        An array of objects, each representing an existing list member whose subscription status was updated.  # noqa: E501

        :param updated_members: The updated_members of this BatchUpdateListMembers.  # noqa: E501
        :type: list[ListMembers]
        """

        self._updated_members = updated_members

    @property
    def errors(self):
        """Gets the errors of this BatchUpdateListMembers.  # noqa: E501

        An array of objects, each representing an email address that could not be added to the list or updated and an error message providing more details.  # noqa: E501

        :return: The errors of this BatchUpdateListMembers.  # noqa: E501
        :rtype: list[BatchUpdateListMembersErrors]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this BatchUpdateListMembers.

        An array of objects, each representing an email address that could not be added to the list or updated and an error message providing more details.  # noqa: E501

        :param errors: The errors of this BatchUpdateListMembers.  # noqa: E501
        :type: list[BatchUpdateListMembersErrors]
        """

        self._errors = errors

    @property
    def total_created(self):
        """Gets the total_created of this BatchUpdateListMembers.  # noqa: E501

        The total number of items matching the query, irrespective of pagination.  # noqa: E501

        :return: The total_created of this BatchUpdateListMembers.  # noqa: E501
        :rtype: int
        """
        return self._total_created

    @total_created.setter
    def total_created(self, total_created):
        """Sets the total_created of this BatchUpdateListMembers.

        The total number of items matching the query, irrespective of pagination.  # noqa: E501

        :param total_created: The total_created of this BatchUpdateListMembers.  # noqa: E501
        :type: int
        """

        self._total_created = total_created

    @property
    def total_updated(self):
        """Gets the total_updated of this BatchUpdateListMembers.  # noqa: E501

        The total number of items matching the query, irrespective of pagination.  # noqa: E501

        :return: The total_updated of this BatchUpdateListMembers.  # noqa: E501
        :rtype: int
        """
        return self._total_updated

    @total_updated.setter
    def total_updated(self, total_updated):
        """Sets the total_updated of this BatchUpdateListMembers.

        The total number of items matching the query, irrespective of pagination.  # noqa: E501

        :param total_updated: The total_updated of this BatchUpdateListMembers.  # noqa: E501
        :type: int
        """

        self._total_updated = total_updated

    @property
    def error_count(self):
        """Gets the error_count of this BatchUpdateListMembers.  # noqa: E501

        The total number of items matching the query, irrespective of pagination.  # noqa: E501

        :return: The error_count of this BatchUpdateListMembers.  # noqa: E501
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this BatchUpdateListMembers.

        The total number of items matching the query, irrespective of pagination.  # noqa: E501

        :param error_count: The error_count of this BatchUpdateListMembers.  # noqa: E501
        :type: int
        """

        self._error_count = error_count

    @property
    def links(self):
        """Gets the links of this BatchUpdateListMembers.  # noqa: E501

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :return: The links of this BatchUpdateListMembers.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this BatchUpdateListMembers.

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :param links: The links of this BatchUpdateListMembers.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchUpdateListMembers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchUpdateListMembers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
