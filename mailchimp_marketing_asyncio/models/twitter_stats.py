# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TwitterStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tweets': 'int',
        'first_tweet': 'str',
        'last_tweet': 'str',
        'retweets': 'int',
        'statuses': 'list[TwitterStatus]'
    }

    attribute_map = {
        'tweets': 'tweets',
        'first_tweet': 'first_tweet',
        'last_tweet': 'last_tweet',
        'retweets': 'retweets',
        'statuses': 'statuses'
    }

    def __init__(self, tweets=None, first_tweet=None, last_tweet=None, retweets=None, statuses=None):  # noqa: E501
        """TwitterStats - a model defined in Swagger"""  # noqa: E501

        self._tweets = None
        self._first_tweet = None
        self._last_tweet = None
        self._retweets = None
        self._statuses = None
        self.discriminator = None

        if tweets is not None:
            self.tweets = tweets
        if first_tweet is not None:
            self.first_tweet = first_tweet
        if last_tweet is not None:
            self.last_tweet = last_tweet
        if retweets is not None:
            self.retweets = retweets
        if statuses is not None:
            self.statuses = statuses

    @property
    def tweets(self):
        """Gets the tweets of this TwitterStats.  # noqa: E501

        The number of tweets including a link to the campaign.  # noqa: E501

        :return: The tweets of this TwitterStats.  # noqa: E501
        :rtype: int
        """
        return self._tweets

    @tweets.setter
    def tweets(self, tweets):
        """Sets the tweets of this TwitterStats.

        The number of tweets including a link to the campaign.  # noqa: E501

        :param tweets: The tweets of this TwitterStats.  # noqa: E501
        :type: int
        """

        self._tweets = tweets

    @property
    def first_tweet(self):
        """Gets the first_tweet of this TwitterStats.  # noqa: E501

        The day and time of the first recorded tweet with a link to the campaign.  # noqa: E501

        :return: The first_tweet of this TwitterStats.  # noqa: E501
        :rtype: str
        """
        return self._first_tweet

    @first_tweet.setter
    def first_tweet(self, first_tweet):
        """Sets the first_tweet of this TwitterStats.

        The day and time of the first recorded tweet with a link to the campaign.  # noqa: E501

        :param first_tweet: The first_tweet of this TwitterStats.  # noqa: E501
        :type: str
        """

        self._first_tweet = first_tweet

    @property
    def last_tweet(self):
        """Gets the last_tweet of this TwitterStats.  # noqa: E501

        The day and time of the last recorded tweet with a link to the campaign.  # noqa: E501

        :return: The last_tweet of this TwitterStats.  # noqa: E501
        :rtype: str
        """
        return self._last_tweet

    @last_tweet.setter
    def last_tweet(self, last_tweet):
        """Sets the last_tweet of this TwitterStats.

        The day and time of the last recorded tweet with a link to the campaign.  # noqa: E501

        :param last_tweet: The last_tweet of this TwitterStats.  # noqa: E501
        :type: str
        """

        self._last_tweet = last_tweet

    @property
    def retweets(self):
        """Gets the retweets of this TwitterStats.  # noqa: E501

        The number of retweets that include a link to the campaign.  # noqa: E501

        :return: The retweets of this TwitterStats.  # noqa: E501
        :rtype: int
        """
        return self._retweets

    @retweets.setter
    def retweets(self, retweets):
        """Sets the retweets of this TwitterStats.

        The number of retweets that include a link to the campaign.  # noqa: E501

        :param retweets: The retweets of this TwitterStats.  # noqa: E501
        :type: int
        """

        self._retweets = retweets

    @property
    def statuses(self):
        """Gets the statuses of this TwitterStats.  # noqa: E501

        A summary of tweets that include a link to the campaign.  # noqa: E501

        :return: The statuses of this TwitterStats.  # noqa: E501
        :rtype: list[TwitterStatus]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this TwitterStats.

        A summary of tweets that include a link to the campaign.  # noqa: E501

        :param statuses: The statuses of this TwitterStats.  # noqa: E501
        :type: list[TwitterStatus]
        """

        self._statuses = statuses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TwitterStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TwitterStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
