# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2009ReportSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'opens': 'int',
        'unique_opens': 'int',
        'open_rate': 'float',
        'clicks': 'int',
        'subscriber_clicks': 'int',
        'click_rate': 'float',
        'visits': 'int',
        'unique_visits': 'int',
        'conversion_rate': 'float',
        'subscribes': 'int',
        'ecommerce': 'InlineResponse2009ReportSummaryEcommerce',
        'impressions': 'float',
        'reach': 'int',
        'engagements': 'int',
        'total_sent': 'int'
    }

    attribute_map = {
        'opens': 'opens',
        'unique_opens': 'unique_opens',
        'open_rate': 'open_rate',
        'clicks': 'clicks',
        'subscriber_clicks': 'subscriber_clicks',
        'click_rate': 'click_rate',
        'visits': 'visits',
        'unique_visits': 'unique_visits',
        'conversion_rate': 'conversion_rate',
        'subscribes': 'subscribes',
        'ecommerce': 'ecommerce',
        'impressions': 'impressions',
        'reach': 'reach',
        'engagements': 'engagements',
        'total_sent': 'total_sent'
    }

    def __init__(self, opens=None, unique_opens=None, open_rate=None, clicks=None, subscriber_clicks=None, click_rate=None, visits=None, unique_visits=None, conversion_rate=None, subscribes=None, ecommerce=None, impressions=None, reach=None, engagements=None, total_sent=None):  # noqa: E501
        """InlineResponse2009ReportSummary - a model defined in Swagger"""  # noqa: E501

        self._opens = None
        self._unique_opens = None
        self._open_rate = None
        self._clicks = None
        self._subscriber_clicks = None
        self._click_rate = None
        self._visits = None
        self._unique_visits = None
        self._conversion_rate = None
        self._subscribes = None
        self._ecommerce = None
        self._impressions = None
        self._reach = None
        self._engagements = None
        self._total_sent = None
        self.discriminator = None

        if opens is not None:
            self.opens = opens
        if unique_opens is not None:
            self.unique_opens = unique_opens
        if open_rate is not None:
            self.open_rate = open_rate
        if clicks is not None:
            self.clicks = clicks
        if subscriber_clicks is not None:
            self.subscriber_clicks = subscriber_clicks
        if click_rate is not None:
            self.click_rate = click_rate
        if visits is not None:
            self.visits = visits
        if unique_visits is not None:
            self.unique_visits = unique_visits
        if conversion_rate is not None:
            self.conversion_rate = conversion_rate
        if subscribes is not None:
            self.subscribes = subscribes
        if ecommerce is not None:
            self.ecommerce = ecommerce
        if impressions is not None:
            self.impressions = impressions
        if reach is not None:
            self.reach = reach
        if engagements is not None:
            self.engagements = engagements
        if total_sent is not None:
            self.total_sent = total_sent

    @property
    def opens(self):
        """Gets the opens of this InlineResponse2009ReportSummary.  # noqa: E501


        :return: The opens of this InlineResponse2009ReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._opens

    @opens.setter
    def opens(self, opens):
        """Sets the opens of this InlineResponse2009ReportSummary.


        :param opens: The opens of this InlineResponse2009ReportSummary.  # noqa: E501
        :type: int
        """

        self._opens = opens

    @property
    def unique_opens(self):
        """Gets the unique_opens of this InlineResponse2009ReportSummary.  # noqa: E501


        :return: The unique_opens of this InlineResponse2009ReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._unique_opens

    @unique_opens.setter
    def unique_opens(self, unique_opens):
        """Sets the unique_opens of this InlineResponse2009ReportSummary.


        :param unique_opens: The unique_opens of this InlineResponse2009ReportSummary.  # noqa: E501
        :type: int
        """

        self._unique_opens = unique_opens

    @property
    def open_rate(self):
        """Gets the open_rate of this InlineResponse2009ReportSummary.  # noqa: E501


        :return: The open_rate of this InlineResponse2009ReportSummary.  # noqa: E501
        :rtype: float
        """
        return self._open_rate

    @open_rate.setter
    def open_rate(self, open_rate):
        """Sets the open_rate of this InlineResponse2009ReportSummary.


        :param open_rate: The open_rate of this InlineResponse2009ReportSummary.  # noqa: E501
        :type: float
        """

        self._open_rate = open_rate

    @property
    def clicks(self):
        """Gets the clicks of this InlineResponse2009ReportSummary.  # noqa: E501


        :return: The clicks of this InlineResponse2009ReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this InlineResponse2009ReportSummary.


        :param clicks: The clicks of this InlineResponse2009ReportSummary.  # noqa: E501
        :type: int
        """

        self._clicks = clicks

    @property
    def subscriber_clicks(self):
        """Gets the subscriber_clicks of this InlineResponse2009ReportSummary.  # noqa: E501


        :return: The subscriber_clicks of this InlineResponse2009ReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._subscriber_clicks

    @subscriber_clicks.setter
    def subscriber_clicks(self, subscriber_clicks):
        """Sets the subscriber_clicks of this InlineResponse2009ReportSummary.


        :param subscriber_clicks: The subscriber_clicks of this InlineResponse2009ReportSummary.  # noqa: E501
        :type: int
        """

        self._subscriber_clicks = subscriber_clicks

    @property
    def click_rate(self):
        """Gets the click_rate of this InlineResponse2009ReportSummary.  # noqa: E501


        :return: The click_rate of this InlineResponse2009ReportSummary.  # noqa: E501
        :rtype: float
        """
        return self._click_rate

    @click_rate.setter
    def click_rate(self, click_rate):
        """Sets the click_rate of this InlineResponse2009ReportSummary.


        :param click_rate: The click_rate of this InlineResponse2009ReportSummary.  # noqa: E501
        :type: float
        """

        self._click_rate = click_rate

    @property
    def visits(self):
        """Gets the visits of this InlineResponse2009ReportSummary.  # noqa: E501


        :return: The visits of this InlineResponse2009ReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._visits

    @visits.setter
    def visits(self, visits):
        """Sets the visits of this InlineResponse2009ReportSummary.


        :param visits: The visits of this InlineResponse2009ReportSummary.  # noqa: E501
        :type: int
        """

        self._visits = visits

    @property
    def unique_visits(self):
        """Gets the unique_visits of this InlineResponse2009ReportSummary.  # noqa: E501


        :return: The unique_visits of this InlineResponse2009ReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._unique_visits

    @unique_visits.setter
    def unique_visits(self, unique_visits):
        """Sets the unique_visits of this InlineResponse2009ReportSummary.


        :param unique_visits: The unique_visits of this InlineResponse2009ReportSummary.  # noqa: E501
        :type: int
        """

        self._unique_visits = unique_visits

    @property
    def conversion_rate(self):
        """Gets the conversion_rate of this InlineResponse2009ReportSummary.  # noqa: E501


        :return: The conversion_rate of this InlineResponse2009ReportSummary.  # noqa: E501
        :rtype: float
        """
        return self._conversion_rate

    @conversion_rate.setter
    def conversion_rate(self, conversion_rate):
        """Sets the conversion_rate of this InlineResponse2009ReportSummary.


        :param conversion_rate: The conversion_rate of this InlineResponse2009ReportSummary.  # noqa: E501
        :type: float
        """

        self._conversion_rate = conversion_rate

    @property
    def subscribes(self):
        """Gets the subscribes of this InlineResponse2009ReportSummary.  # noqa: E501


        :return: The subscribes of this InlineResponse2009ReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._subscribes

    @subscribes.setter
    def subscribes(self, subscribes):
        """Sets the subscribes of this InlineResponse2009ReportSummary.


        :param subscribes: The subscribes of this InlineResponse2009ReportSummary.  # noqa: E501
        :type: int
        """

        self._subscribes = subscribes

    @property
    def ecommerce(self):
        """Gets the ecommerce of this InlineResponse2009ReportSummary.  # noqa: E501


        :return: The ecommerce of this InlineResponse2009ReportSummary.  # noqa: E501
        :rtype: InlineResponse2009ReportSummaryEcommerce
        """
        return self._ecommerce

    @ecommerce.setter
    def ecommerce(self, ecommerce):
        """Sets the ecommerce of this InlineResponse2009ReportSummary.


        :param ecommerce: The ecommerce of this InlineResponse2009ReportSummary.  # noqa: E501
        :type: InlineResponse2009ReportSummaryEcommerce
        """

        self._ecommerce = ecommerce

    @property
    def impressions(self):
        """Gets the impressions of this InlineResponse2009ReportSummary.  # noqa: E501


        :return: The impressions of this InlineResponse2009ReportSummary.  # noqa: E501
        :rtype: float
        """
        return self._impressions

    @impressions.setter
    def impressions(self, impressions):
        """Sets the impressions of this InlineResponse2009ReportSummary.


        :param impressions: The impressions of this InlineResponse2009ReportSummary.  # noqa: E501
        :type: float
        """

        self._impressions = impressions

    @property
    def reach(self):
        """Gets the reach of this InlineResponse2009ReportSummary.  # noqa: E501


        :return: The reach of this InlineResponse2009ReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._reach

    @reach.setter
    def reach(self, reach):
        """Sets the reach of this InlineResponse2009ReportSummary.


        :param reach: The reach of this InlineResponse2009ReportSummary.  # noqa: E501
        :type: int
        """

        self._reach = reach

    @property
    def engagements(self):
        """Gets the engagements of this InlineResponse2009ReportSummary.  # noqa: E501


        :return: The engagements of this InlineResponse2009ReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._engagements

    @engagements.setter
    def engagements(self, engagements):
        """Sets the engagements of this InlineResponse2009ReportSummary.


        :param engagements: The engagements of this InlineResponse2009ReportSummary.  # noqa: E501
        :type: int
        """

        self._engagements = engagements

    @property
    def total_sent(self):
        """Gets the total_sent of this InlineResponse2009ReportSummary.  # noqa: E501


        :return: The total_sent of this InlineResponse2009ReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_sent

    @total_sent.setter
    def total_sent(self, total_sent):
        """Sets the total_sent of this InlineResponse2009ReportSummary.


        :param total_sent: The total_sent of this InlineResponse2009ReportSummary.  # noqa: E501
        :type: int
        """

        self._total_sent = total_sent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2009ReportSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2009ReportSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
