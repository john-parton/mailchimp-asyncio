# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Goal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'goal_id': 'int',
        'event': 'str',
        'last_visited_at': 'datetime',
        'data': 'str'
    }

    attribute_map = {
        'goal_id': 'goal_id',
        'event': 'event',
        'last_visited_at': 'last_visited_at',
        'data': 'data'
    }

    def __init__(self, goal_id=None, event=None, last_visited_at=None, data=None):  # noqa: E501
        """Goal - a model defined in Swagger"""  # noqa: E501

        self._goal_id = None
        self._event = None
        self._last_visited_at = None
        self._data = None
        self.discriminator = None

        if goal_id is not None:
            self.goal_id = goal_id
        if event is not None:
            self.event = event
        if last_visited_at is not None:
            self.last_visited_at = last_visited_at
        if data is not None:
            self.data = data

    @property
    def goal_id(self):
        """Gets the goal_id of this Goal.  # noqa: E501

        The id for a Goal event.  # noqa: E501

        :return: The goal_id of this Goal.  # noqa: E501
        :rtype: int
        """
        return self._goal_id

    @goal_id.setter
    def goal_id(self, goal_id):
        """Sets the goal_id of this Goal.

        The id for a Goal event.  # noqa: E501

        :param goal_id: The goal_id of this Goal.  # noqa: E501
        :type: int
        """

        self._goal_id = goal_id

    @property
    def event(self):
        """Gets the event of this Goal.  # noqa: E501

        The name/type of Goal event triggered.  # noqa: E501

        :return: The event of this Goal.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Goal.

        The name/type of Goal event triggered.  # noqa: E501

        :param event: The event of this Goal.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def last_visited_at(self):
        """Gets the last_visited_at of this Goal.  # noqa: E501

        The date and time the user last triggered the Goal event in ISO 8601 format.  # noqa: E501

        :return: The last_visited_at of this Goal.  # noqa: E501
        :rtype: datetime
        """
        return self._last_visited_at

    @last_visited_at.setter
    def last_visited_at(self, last_visited_at):
        """Sets the last_visited_at of this Goal.

        The date and time the user last triggered the Goal event in ISO 8601 format.  # noqa: E501

        :param last_visited_at: The last_visited_at of this Goal.  # noqa: E501
        :type: datetime
        """

        self._last_visited_at = last_visited_at

    @property
    def data(self):
        """Gets the data of this Goal.  # noqa: E501

        Any extra data passed with the Goal event.  # noqa: E501

        :return: The data of this Goal.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Goal.

        Any extra data passed with the Goal event.  # noqa: E501

        :param data: The data of this Goal.  # noqa: E501
        :type: str
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Goal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Goal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
