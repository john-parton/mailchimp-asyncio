# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SendingSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hour': 'int',
        'daily_send': 'DailySendingDays',
        'weekly_send_day': 'str',
        'monthly_send_date': 'float'
    }

    attribute_map = {
        'hour': 'hour',
        'daily_send': 'daily_send',
        'weekly_send_day': 'weekly_send_day',
        'monthly_send_date': 'monthly_send_date'
    }

    def __init__(self, hour=None, daily_send=None, weekly_send_day=None, monthly_send_date=None):  # noqa: E501
        """SendingSchedule - a model defined in Swagger"""  # noqa: E501

        self._hour = None
        self._daily_send = None
        self._weekly_send_day = None
        self._monthly_send_date = None
        self.discriminator = None

        if hour is not None:
            self.hour = hour
        if daily_send is not None:
            self.daily_send = daily_send
        if weekly_send_day is not None:
            self.weekly_send_day = weekly_send_day
        if monthly_send_date is not None:
            self.monthly_send_date = monthly_send_date

    @property
    def hour(self):
        """Gets the hour of this SendingSchedule.  # noqa: E501

        The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).  # noqa: E501

        :return: The hour of this SendingSchedule.  # noqa: E501
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this SendingSchedule.

        The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/).  # noqa: E501

        :param hour: The hour of this SendingSchedule.  # noqa: E501
        :type: int
        """
        if hour is not None and hour > 23:  # noqa: E501
            raise ValueError("Invalid value for `hour`, must be a value less than or equal to `23`")  # noqa: E501
        if hour is not None and hour < 0:  # noqa: E501
            raise ValueError("Invalid value for `hour`, must be a value greater than or equal to `0`")  # noqa: E501

        self._hour = hour

    @property
    def daily_send(self):
        """Gets the daily_send of this SendingSchedule.  # noqa: E501


        :return: The daily_send of this SendingSchedule.  # noqa: E501
        :rtype: DailySendingDays
        """
        return self._daily_send

    @daily_send.setter
    def daily_send(self, daily_send):
        """Sets the daily_send of this SendingSchedule.


        :param daily_send: The daily_send of this SendingSchedule.  # noqa: E501
        :type: DailySendingDays
        """

        self._daily_send = daily_send

    @property
    def weekly_send_day(self):
        """Gets the weekly_send_day of this SendingSchedule.  # noqa: E501

        The day of the week to send a weekly RSS Campaign.  # noqa: E501

        :return: The weekly_send_day of this SendingSchedule.  # noqa: E501
        :rtype: str
        """
        return self._weekly_send_day

    @weekly_send_day.setter
    def weekly_send_day(self, weekly_send_day):
        """Sets the weekly_send_day of this SendingSchedule.

        The day of the week to send a weekly RSS Campaign.  # noqa: E501

        :param weekly_send_day: The weekly_send_day of this SendingSchedule.  # noqa: E501
        :type: str
        """
        allowed_values = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]  # noqa: E501
        if weekly_send_day not in allowed_values:
            raise ValueError(
                "Invalid value for `weekly_send_day` ({0}), must be one of {1}"  # noqa: E501
                .format(weekly_send_day, allowed_values)
            )

        self._weekly_send_day = weekly_send_day

    @property
    def monthly_send_date(self):
        """Gets the monthly_send_date of this SendingSchedule.  # noqa: E501

        The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.  # noqa: E501

        :return: The monthly_send_date of this SendingSchedule.  # noqa: E501
        :rtype: float
        """
        return self._monthly_send_date

    @monthly_send_date.setter
    def monthly_send_date(self, monthly_send_date):
        """Sets the monthly_send_date of this SendingSchedule.

        The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February.  # noqa: E501

        :param monthly_send_date: The monthly_send_date of this SendingSchedule.  # noqa: E501
        :type: float
        """
        if monthly_send_date is not None and monthly_send_date > 31:  # noqa: E501
            raise ValueError("Invalid value for `monthly_send_date`, must be a value less than or equal to `31`")  # noqa: E501
        if monthly_send_date is not None and monthly_send_date < 0:  # noqa: E501
            raise ValueError("Invalid value for `monthly_send_date`, must be a value greater than or equal to `0`")  # noqa: E501

        self._monthly_send_date = monthly_send_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SendingSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendingSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
