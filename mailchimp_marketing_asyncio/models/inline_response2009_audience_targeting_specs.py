# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2009AudienceTargetingSpecs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gender': 'int',
        'min_age': 'int',
        'max_age': 'int',
        'locations': 'InlineResponse2009AudienceTargetingSpecsLocations',
        'interests': 'list[InlineResponse2009AudienceTargetingSpecsInterests]'
    }

    attribute_map = {
        'gender': 'gender',
        'min_age': 'min_age',
        'max_age': 'max_age',
        'locations': 'locations',
        'interests': 'interests'
    }

    def __init__(self, gender=None, min_age=None, max_age=None, locations=None, interests=None):  # noqa: E501
        """InlineResponse2009AudienceTargetingSpecs - a model defined in Swagger"""  # noqa: E501

        self._gender = None
        self._min_age = None
        self._max_age = None
        self._locations = None
        self._interests = None
        self.discriminator = None

        if gender is not None:
            self.gender = gender
        if min_age is not None:
            self.min_age = min_age
        if max_age is not None:
            self.max_age = max_age
        if locations is not None:
            self.locations = locations
        if interests is not None:
            self.interests = interests

    @property
    def gender(self):
        """Gets the gender of this InlineResponse2009AudienceTargetingSpecs.  # noqa: E501


        :return: The gender of this InlineResponse2009AudienceTargetingSpecs.  # noqa: E501
        :rtype: int
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this InlineResponse2009AudienceTargetingSpecs.


        :param gender: The gender of this InlineResponse2009AudienceTargetingSpecs.  # noqa: E501
        :type: int
        """

        self._gender = gender

    @property
    def min_age(self):
        """Gets the min_age of this InlineResponse2009AudienceTargetingSpecs.  # noqa: E501


        :return: The min_age of this InlineResponse2009AudienceTargetingSpecs.  # noqa: E501
        :rtype: int
        """
        return self._min_age

    @min_age.setter
    def min_age(self, min_age):
        """Sets the min_age of this InlineResponse2009AudienceTargetingSpecs.


        :param min_age: The min_age of this InlineResponse2009AudienceTargetingSpecs.  # noqa: E501
        :type: int
        """

        self._min_age = min_age

    @property
    def max_age(self):
        """Gets the max_age of this InlineResponse2009AudienceTargetingSpecs.  # noqa: E501


        :return: The max_age of this InlineResponse2009AudienceTargetingSpecs.  # noqa: E501
        :rtype: int
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age):
        """Sets the max_age of this InlineResponse2009AudienceTargetingSpecs.


        :param max_age: The max_age of this InlineResponse2009AudienceTargetingSpecs.  # noqa: E501
        :type: int
        """

        self._max_age = max_age

    @property
    def locations(self):
        """Gets the locations of this InlineResponse2009AudienceTargetingSpecs.  # noqa: E501


        :return: The locations of this InlineResponse2009AudienceTargetingSpecs.  # noqa: E501
        :rtype: InlineResponse2009AudienceTargetingSpecsLocations
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this InlineResponse2009AudienceTargetingSpecs.


        :param locations: The locations of this InlineResponse2009AudienceTargetingSpecs.  # noqa: E501
        :type: InlineResponse2009AudienceTargetingSpecsLocations
        """

        self._locations = locations

    @property
    def interests(self):
        """Gets the interests of this InlineResponse2009AudienceTargetingSpecs.  # noqa: E501


        :return: The interests of this InlineResponse2009AudienceTargetingSpecs.  # noqa: E501
        :rtype: list[InlineResponse2009AudienceTargetingSpecsInterests]
        """
        return self._interests

    @interests.setter
    def interests(self, interests):
        """Sets the interests of this InlineResponse2009AudienceTargetingSpecs.


        :param interests: The interests of this InlineResponse2009AudienceTargetingSpecs.  # noqa: E501
        :type: list[InlineResponse2009AudienceTargetingSpecsInterests]
        """

        self._interests = interests

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2009AudienceTargetingSpecs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2009AudienceTargetingSpecs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
