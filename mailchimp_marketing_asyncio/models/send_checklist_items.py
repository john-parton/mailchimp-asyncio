# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SendChecklistItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'int',
        'heading': 'str',
        'details': 'str'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'heading': 'heading',
        'details': 'details'
    }

    def __init__(self, type=None, id=None, heading=None, details=None):  # noqa: E501
        """SendChecklistItems - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._id = None
        self._heading = None
        self._details = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if id is not None:
            self.id = id
        if heading is not None:
            self.heading = heading
        if details is not None:
            self.details = details

    @property
    def type(self):
        """Gets the type of this SendChecklistItems.  # noqa: E501

        The item type.  # noqa: E501

        :return: The type of this SendChecklistItems.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SendChecklistItems.

        The item type.  # noqa: E501

        :param type: The type of this SendChecklistItems.  # noqa: E501
        :type: str
        """
        allowed_values = ["success", "warning", "error"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this SendChecklistItems.  # noqa: E501

        The ID for the specific item.  # noqa: E501

        :return: The id of this SendChecklistItems.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SendChecklistItems.

        The ID for the specific item.  # noqa: E501

        :param id: The id of this SendChecklistItems.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def heading(self):
        """Gets the heading of this SendChecklistItems.  # noqa: E501

        The heading for the specific item.  # noqa: E501

        :return: The heading of this SendChecklistItems.  # noqa: E501
        :rtype: str
        """
        return self._heading

    @heading.setter
    def heading(self, heading):
        """Sets the heading of this SendChecklistItems.

        The heading for the specific item.  # noqa: E501

        :param heading: The heading of this SendChecklistItems.  # noqa: E501
        :type: str
        """

        self._heading = heading

    @property
    def details(self):
        """Gets the details of this SendChecklistItems.  # noqa: E501

        Details about the specific feedback item.  # noqa: E501

        :return: The details of this SendChecklistItems.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this SendChecklistItems.

        Details about the specific feedback item.  # noqa: E501

        :param details: The details of this SendChecklistItems.  # noqa: E501
        :type: str
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SendChecklistItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendChecklistItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
