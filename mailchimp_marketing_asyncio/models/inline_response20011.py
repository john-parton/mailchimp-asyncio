# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20011(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'list[ResourceLink]',
        'audience': 'InlineResponse2009Audience',
        'audience_activity': 'InlineResponse20011AudienceActivity',
        'budget': 'InlineResponse2009Budget',
        'canceled_at': 'datetime',
        'channel': 'InlineResponse2009Channel',
        'create_time': 'datetime',
        'email_source_name': 'str',
        'end_time': 'datetime',
        'has_segment': 'bool',
        'id': 'str',
        'name': 'str',
        'needs_attention': 'bool',
        'paused_at': 'datetime',
        'published_time': 'datetime',
        'recipients': 'List10',
        'report_summary': 'InlineResponse20011ReportSummary',
        'show_report': 'bool',
        'start_time': 'datetime',
        'status': 'str',
        'thumbnail': 'str',
        'type': 'str',
        'updated_at': 'datetime',
        'was_canceled_by_facebook': 'bool',
        'web_id': 'int'
    }

    attribute_map = {
        'links': '_links',
        'audience': 'audience',
        'audience_activity': 'audience_activity',
        'budget': 'budget',
        'canceled_at': 'canceled_at',
        'channel': 'channel',
        'create_time': 'create_time',
        'email_source_name': 'email_source_name',
        'end_time': 'end_time',
        'has_segment': 'has_segment',
        'id': 'id',
        'name': 'name',
        'needs_attention': 'needs_attention',
        'paused_at': 'paused_at',
        'published_time': 'published_time',
        'recipients': 'recipients',
        'report_summary': 'report_summary',
        'show_report': 'show_report',
        'start_time': 'start_time',
        'status': 'status',
        'thumbnail': 'thumbnail',
        'type': 'type',
        'updated_at': 'updated_at',
        'was_canceled_by_facebook': 'was_canceled_by_facebook',
        'web_id': 'web_id'
    }

    def __init__(self, links=None, audience=None, audience_activity=None, budget=None, canceled_at=None, channel=None, create_time=None, email_source_name=None, end_time=None, has_segment=None, id=None, name=None, needs_attention=None, paused_at=None, published_time=None, recipients=None, report_summary=None, show_report=None, start_time=None, status=None, thumbnail=None, type=None, updated_at=None, was_canceled_by_facebook=None, web_id=None):  # noqa: E501
        """InlineResponse20011 - a model defined in Swagger"""  # noqa: E501

        self._links = None
        self._audience = None
        self._audience_activity = None
        self._budget = None
        self._canceled_at = None
        self._channel = None
        self._create_time = None
        self._email_source_name = None
        self._end_time = None
        self._has_segment = None
        self._id = None
        self._name = None
        self._needs_attention = None
        self._paused_at = None
        self._published_time = None
        self._recipients = None
        self._report_summary = None
        self._show_report = None
        self._start_time = None
        self._status = None
        self._thumbnail = None
        self._type = None
        self._updated_at = None
        self._was_canceled_by_facebook = None
        self._web_id = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if audience is not None:
            self.audience = audience
        if audience_activity is not None:
            self.audience_activity = audience_activity
        if budget is not None:
            self.budget = budget
        if canceled_at is not None:
            self.canceled_at = canceled_at
        if channel is not None:
            self.channel = channel
        if create_time is not None:
            self.create_time = create_time
        if email_source_name is not None:
            self.email_source_name = email_source_name
        if end_time is not None:
            self.end_time = end_time
        if has_segment is not None:
            self.has_segment = has_segment
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if needs_attention is not None:
            self.needs_attention = needs_attention
        if paused_at is not None:
            self.paused_at = paused_at
        if published_time is not None:
            self.published_time = published_time
        if recipients is not None:
            self.recipients = recipients
        if report_summary is not None:
            self.report_summary = report_summary
        if show_report is not None:
            self.show_report = show_report
        if start_time is not None:
            self.start_time = start_time
        if status is not None:
            self.status = status
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if type is not None:
            self.type = type
        if updated_at is not None:
            self.updated_at = updated_at
        if was_canceled_by_facebook is not None:
            self.was_canceled_by_facebook = was_canceled_by_facebook
        if web_id is not None:
            self.web_id = web_id

    @property
    def links(self):
        """Gets the links of this InlineResponse20011.  # noqa: E501

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :return: The links of this InlineResponse20011.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this InlineResponse20011.

        A list of link types and descriptions for the API schema documents.  # noqa: E501

        :param links: The links of this InlineResponse20011.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    @property
    def audience(self):
        """Gets the audience of this InlineResponse20011.  # noqa: E501


        :return: The audience of this InlineResponse20011.  # noqa: E501
        :rtype: InlineResponse2009Audience
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this InlineResponse20011.


        :param audience: The audience of this InlineResponse20011.  # noqa: E501
        :type: InlineResponse2009Audience
        """

        self._audience = audience

    @property
    def audience_activity(self):
        """Gets the audience_activity of this InlineResponse20011.  # noqa: E501


        :return: The audience_activity of this InlineResponse20011.  # noqa: E501
        :rtype: InlineResponse20011AudienceActivity
        """
        return self._audience_activity

    @audience_activity.setter
    def audience_activity(self, audience_activity):
        """Sets the audience_activity of this InlineResponse20011.


        :param audience_activity: The audience_activity of this InlineResponse20011.  # noqa: E501
        :type: InlineResponse20011AudienceActivity
        """

        self._audience_activity = audience_activity

    @property
    def budget(self):
        """Gets the budget of this InlineResponse20011.  # noqa: E501


        :return: The budget of this InlineResponse20011.  # noqa: E501
        :rtype: InlineResponse2009Budget
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this InlineResponse20011.


        :param budget: The budget of this InlineResponse20011.  # noqa: E501
        :type: InlineResponse2009Budget
        """

        self._budget = budget

    @property
    def canceled_at(self):
        """Gets the canceled_at of this InlineResponse20011.  # noqa: E501


        :return: The canceled_at of this InlineResponse20011.  # noqa: E501
        :rtype: datetime
        """
        return self._canceled_at

    @canceled_at.setter
    def canceled_at(self, canceled_at):
        """Sets the canceled_at of this InlineResponse20011.


        :param canceled_at: The canceled_at of this InlineResponse20011.  # noqa: E501
        :type: datetime
        """

        self._canceled_at = canceled_at

    @property
    def channel(self):
        """Gets the channel of this InlineResponse20011.  # noqa: E501


        :return: The channel of this InlineResponse20011.  # noqa: E501
        :rtype: InlineResponse2009Channel
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this InlineResponse20011.


        :param channel: The channel of this InlineResponse20011.  # noqa: E501
        :type: InlineResponse2009Channel
        """

        self._channel = channel

    @property
    def create_time(self):
        """Gets the create_time of this InlineResponse20011.  # noqa: E501


        :return: The create_time of this InlineResponse20011.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this InlineResponse20011.


        :param create_time: The create_time of this InlineResponse20011.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def email_source_name(self):
        """Gets the email_source_name of this InlineResponse20011.  # noqa: E501


        :return: The email_source_name of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._email_source_name

    @email_source_name.setter
    def email_source_name(self, email_source_name):
        """Sets the email_source_name of this InlineResponse20011.


        :param email_source_name: The email_source_name of this InlineResponse20011.  # noqa: E501
        :type: str
        """

        self._email_source_name = email_source_name

    @property
    def end_time(self):
        """Gets the end_time of this InlineResponse20011.  # noqa: E501


        :return: The end_time of this InlineResponse20011.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this InlineResponse20011.


        :param end_time: The end_time of this InlineResponse20011.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def has_segment(self):
        """Gets the has_segment of this InlineResponse20011.  # noqa: E501


        :return: The has_segment of this InlineResponse20011.  # noqa: E501
        :rtype: bool
        """
        return self._has_segment

    @has_segment.setter
    def has_segment(self, has_segment):
        """Sets the has_segment of this InlineResponse20011.


        :param has_segment: The has_segment of this InlineResponse20011.  # noqa: E501
        :type: bool
        """

        self._has_segment = has_segment

    @property
    def id(self):
        """Gets the id of this InlineResponse20011.  # noqa: E501

        Unique ID of an Outreach  # noqa: E501

        :return: The id of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20011.

        Unique ID of an Outreach  # noqa: E501

        :param id: The id of this InlineResponse20011.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse20011.  # noqa: E501

        Title or name of an Outreach  # noqa: E501

        :return: The name of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20011.

        Title or name of an Outreach  # noqa: E501

        :param name: The name of this InlineResponse20011.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def needs_attention(self):
        """Gets the needs_attention of this InlineResponse20011.  # noqa: E501


        :return: The needs_attention of this InlineResponse20011.  # noqa: E501
        :rtype: bool
        """
        return self._needs_attention

    @needs_attention.setter
    def needs_attention(self, needs_attention):
        """Sets the needs_attention of this InlineResponse20011.


        :param needs_attention: The needs_attention of this InlineResponse20011.  # noqa: E501
        :type: bool
        """

        self._needs_attention = needs_attention

    @property
    def paused_at(self):
        """Gets the paused_at of this InlineResponse20011.  # noqa: E501


        :return: The paused_at of this InlineResponse20011.  # noqa: E501
        :rtype: datetime
        """
        return self._paused_at

    @paused_at.setter
    def paused_at(self, paused_at):
        """Sets the paused_at of this InlineResponse20011.


        :param paused_at: The paused_at of this InlineResponse20011.  # noqa: E501
        :type: datetime
        """

        self._paused_at = paused_at

    @property
    def published_time(self):
        """Gets the published_time of this InlineResponse20011.  # noqa: E501


        :return: The published_time of this InlineResponse20011.  # noqa: E501
        :rtype: datetime
        """
        return self._published_time

    @published_time.setter
    def published_time(self, published_time):
        """Sets the published_time of this InlineResponse20011.


        :param published_time: The published_time of this InlineResponse20011.  # noqa: E501
        :type: datetime
        """

        self._published_time = published_time

    @property
    def recipients(self):
        """Gets the recipients of this InlineResponse20011.  # noqa: E501


        :return: The recipients of this InlineResponse20011.  # noqa: E501
        :rtype: List10
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this InlineResponse20011.


        :param recipients: The recipients of this InlineResponse20011.  # noqa: E501
        :type: List10
        """

        self._recipients = recipients

    @property
    def report_summary(self):
        """Gets the report_summary of this InlineResponse20011.  # noqa: E501


        :return: The report_summary of this InlineResponse20011.  # noqa: E501
        :rtype: InlineResponse20011ReportSummary
        """
        return self._report_summary

    @report_summary.setter
    def report_summary(self, report_summary):
        """Sets the report_summary of this InlineResponse20011.


        :param report_summary: The report_summary of this InlineResponse20011.  # noqa: E501
        :type: InlineResponse20011ReportSummary
        """

        self._report_summary = report_summary

    @property
    def show_report(self):
        """Gets the show_report of this InlineResponse20011.  # noqa: E501

        Outreach report availability  # noqa: E501

        :return: The show_report of this InlineResponse20011.  # noqa: E501
        :rtype: bool
        """
        return self._show_report

    @show_report.setter
    def show_report(self, show_report):
        """Sets the show_report of this InlineResponse20011.

        Outreach report availability  # noqa: E501

        :param show_report: The show_report of this InlineResponse20011.  # noqa: E501
        :type: bool
        """

        self._show_report = show_report

    @property
    def start_time(self):
        """Gets the start_time of this InlineResponse20011.  # noqa: E501


        :return: The start_time of this InlineResponse20011.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this InlineResponse20011.


        :param start_time: The start_time of this InlineResponse20011.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this InlineResponse20011.  # noqa: E501

        Campaign, Ad, or Page status  # noqa: E501

        :return: The status of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20011.

        Campaign, Ad, or Page status  # noqa: E501

        :param status: The status of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        allowed_values = ["save", "paused", "schedule", "sending", "sent", "canceled", "canceling", "active", "disconnected", "somepaused", "draft", "completed", "partialRejected", "pending", "rejected", "published", "unpublished"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def thumbnail(self):
        """Gets the thumbnail of this InlineResponse20011.  # noqa: E501

        The URL of the thumbnail for this outreach  # noqa: E501

        :return: The thumbnail of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this InlineResponse20011.

        The URL of the thumbnail for this outreach  # noqa: E501

        :param thumbnail: The thumbnail of this InlineResponse20011.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def type(self):
        """Gets the type of this InlineResponse20011.  # noqa: E501

        Supported Campaign, Ad, Page type  # noqa: E501

        :return: The type of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20011.

        Supported Campaign, Ad, Page type  # noqa: E501

        :param type: The type of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        allowed_values = ["regular", "plaintext", "rss", "reconfirm", "variate", "absplit", "automation", "facebook", "google", "autoresponder", "transactional", "page", "website", "survey"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this InlineResponse20011.  # noqa: E501


        :return: The updated_at of this InlineResponse20011.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InlineResponse20011.


        :param updated_at: The updated_at of this InlineResponse20011.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def was_canceled_by_facebook(self):
        """Gets the was_canceled_by_facebook of this InlineResponse20011.  # noqa: E501


        :return: The was_canceled_by_facebook of this InlineResponse20011.  # noqa: E501
        :rtype: bool
        """
        return self._was_canceled_by_facebook

    @was_canceled_by_facebook.setter
    def was_canceled_by_facebook(self, was_canceled_by_facebook):
        """Sets the was_canceled_by_facebook of this InlineResponse20011.


        :param was_canceled_by_facebook: The was_canceled_by_facebook of this InlineResponse20011.  # noqa: E501
        :type: bool
        """

        self._was_canceled_by_facebook = was_canceled_by_facebook

    @property
    def web_id(self):
        """Gets the web_id of this InlineResponse20011.  # noqa: E501

        Web ID  # noqa: E501

        :return: The web_id of this InlineResponse20011.  # noqa: E501
        :rtype: int
        """
        return self._web_id

    @web_id.setter
    def web_id(self, web_id):
        """Sets the web_id of this InlineResponse20011.

        Web ID  # noqa: E501

        :param web_id: The web_id of this InlineResponse20011.  # noqa: E501
        :type: int
        """

        self._web_id = web_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20011, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20011):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
