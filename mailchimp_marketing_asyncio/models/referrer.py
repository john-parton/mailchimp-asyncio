# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Referrer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'referrer': 'str',
        'clicks': 'int',
        'first_click': 'datetime',
        'last_click': 'datetime'
    }

    attribute_map = {
        'referrer': 'referrer',
        'clicks': 'clicks',
        'first_click': 'first_click',
        'last_click': 'last_click'
    }

    def __init__(self, referrer=None, clicks=None, first_click=None, last_click=None):  # noqa: E501
        """Referrer - a model defined in Swagger"""  # noqa: E501

        self._referrer = None
        self._clicks = None
        self._first_click = None
        self._last_click = None
        self.discriminator = None

        if referrer is not None:
            self.referrer = referrer
        if clicks is not None:
            self.clicks = clicks
        if first_click is not None:
            self.first_click = first_click
        if last_click is not None:
            self.last_click = last_click

    @property
    def referrer(self):
        """Gets the referrer of this Referrer.  # noqa: E501

        A referrer (truncated to 100 bytes).  # noqa: E501

        :return: The referrer of this Referrer.  # noqa: E501
        :rtype: str
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """Sets the referrer of this Referrer.

        A referrer (truncated to 100 bytes).  # noqa: E501

        :param referrer: The referrer of this Referrer.  # noqa: E501
        :type: str
        """

        self._referrer = referrer

    @property
    def clicks(self):
        """Gets the clicks of this Referrer.  # noqa: E501

        The number of clicks a single referrer generated.  # noqa: E501

        :return: The clicks of this Referrer.  # noqa: E501
        :rtype: int
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this Referrer.

        The number of clicks a single referrer generated.  # noqa: E501

        :param clicks: The clicks of this Referrer.  # noqa: E501
        :type: int
        """

        self._clicks = clicks

    @property
    def first_click(self):
        """Gets the first_click of this Referrer.  # noqa: E501

        The timestamp for the first click from this referrer.  # noqa: E501

        :return: The first_click of this Referrer.  # noqa: E501
        :rtype: datetime
        """
        return self._first_click

    @first_click.setter
    def first_click(self, first_click):
        """Sets the first_click of this Referrer.

        The timestamp for the first click from this referrer.  # noqa: E501

        :param first_click: The first_click of this Referrer.  # noqa: E501
        :type: datetime
        """

        self._first_click = first_click

    @property
    def last_click(self):
        """Gets the last_click of this Referrer.  # noqa: E501

        The timestamp for the last click from this referrer.  # noqa: E501

        :return: The last_click of this Referrer.  # noqa: E501
        :rtype: datetime
        """
        return self._last_click

    @last_click.setter
    def last_click(self, last_click):
        """Sets the last_click of this Referrer.

        The timestamp for the last click from this referrer.  # noqa: E501

        :param last_click: The last_click of this Referrer.  # noqa: E501
        :type: datetime
        """

        self._last_click = last_click

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Referrer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Referrer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
