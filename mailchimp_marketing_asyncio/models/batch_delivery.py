# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BatchDelivery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_delay': 'int',
        'batch_count': 'int'
    }

    attribute_map = {
        'batch_delay': 'batch_delay',
        'batch_count': 'batch_count'
    }

    def __init__(self, batch_delay=None, batch_count=None):  # noqa: E501
        """BatchDelivery - a model defined in Swagger"""  # noqa: E501

        self._batch_delay = None
        self._batch_count = None
        self.discriminator = None

        self.batch_delay = batch_delay
        self.batch_count = batch_count

    @property
    def batch_delay(self):
        """Gets the batch_delay of this BatchDelivery.  # noqa: E501

        The delay, in minutes, between batches.  # noqa: E501

        :return: The batch_delay of this BatchDelivery.  # noqa: E501
        :rtype: int
        """
        return self._batch_delay

    @batch_delay.setter
    def batch_delay(self, batch_delay):
        """Sets the batch_delay of this BatchDelivery.

        The delay, in minutes, between batches.  # noqa: E501

        :param batch_delay: The batch_delay of this BatchDelivery.  # noqa: E501
        :type: int
        """
        if batch_delay is None:
            raise ValueError("Invalid value for `batch_delay`, must not be `None`")  # noqa: E501

        self._batch_delay = batch_delay

    @property
    def batch_count(self):
        """Gets the batch_count of this BatchDelivery.  # noqa: E501

        The number of batches for the campaign send.  # noqa: E501

        :return: The batch_count of this BatchDelivery.  # noqa: E501
        :rtype: int
        """
        return self._batch_count

    @batch_count.setter
    def batch_count(self, batch_count):
        """Sets the batch_count of this BatchDelivery.

        The number of batches for the campaign send.  # noqa: E501

        :param batch_count: The batch_count of this BatchDelivery.  # noqa: E501
        :type: int
        """
        if batch_count is None:
            raise ValueError("Invalid value for `batch_count`, must not be `None`")  # noqa: E501

        self._batch_count = batch_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchDelivery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchDelivery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
