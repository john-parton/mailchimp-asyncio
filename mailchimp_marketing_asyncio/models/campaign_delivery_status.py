# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.74
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CampaignDeliveryStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'can_cancel': 'bool',
        'status': 'str',
        'emails_sent': 'int',
        'emails_canceled': 'int'
    }

    attribute_map = {
        'enabled': 'enabled',
        'can_cancel': 'can_cancel',
        'status': 'status',
        'emails_sent': 'emails_sent',
        'emails_canceled': 'emails_canceled'
    }

    def __init__(self, enabled=None, can_cancel=None, status=None, emails_sent=None, emails_canceled=None):  # noqa: E501
        """CampaignDeliveryStatus - a model defined in Swagger"""  # noqa: E501

        self._enabled = None
        self._can_cancel = None
        self._status = None
        self._emails_sent = None
        self._emails_canceled = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if can_cancel is not None:
            self.can_cancel = can_cancel
        if status is not None:
            self.status = status
        if emails_sent is not None:
            self.emails_sent = emails_sent
        if emails_canceled is not None:
            self.emails_canceled = emails_canceled

    @property
    def enabled(self):
        """Gets the enabled of this CampaignDeliveryStatus.  # noqa: E501

        Whether Campaign Delivery Status is enabled for this account and campaign.  # noqa: E501

        :return: The enabled of this CampaignDeliveryStatus.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CampaignDeliveryStatus.

        Whether Campaign Delivery Status is enabled for this account and campaign.  # noqa: E501

        :param enabled: The enabled of this CampaignDeliveryStatus.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def can_cancel(self):
        """Gets the can_cancel of this CampaignDeliveryStatus.  # noqa: E501

        Whether a campaign send can be canceled.  # noqa: E501

        :return: The can_cancel of this CampaignDeliveryStatus.  # noqa: E501
        :rtype: bool
        """
        return self._can_cancel

    @can_cancel.setter
    def can_cancel(self, can_cancel):
        """Sets the can_cancel of this CampaignDeliveryStatus.

        Whether a campaign send can be canceled.  # noqa: E501

        :param can_cancel: The can_cancel of this CampaignDeliveryStatus.  # noqa: E501
        :type: bool
        """

        self._can_cancel = can_cancel

    @property
    def status(self):
        """Gets the status of this CampaignDeliveryStatus.  # noqa: E501

        The current state of a campaign delivery.  # noqa: E501

        :return: The status of this CampaignDeliveryStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CampaignDeliveryStatus.

        The current state of a campaign delivery.  # noqa: E501

        :param status: The status of this CampaignDeliveryStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["delivering", "delivered", "canceling", "canceled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def emails_sent(self):
        """Gets the emails_sent of this CampaignDeliveryStatus.  # noqa: E501

        The total number of emails confirmed sent for this campaign so far.  # noqa: E501

        :return: The emails_sent of this CampaignDeliveryStatus.  # noqa: E501
        :rtype: int
        """
        return self._emails_sent

    @emails_sent.setter
    def emails_sent(self, emails_sent):
        """Sets the emails_sent of this CampaignDeliveryStatus.

        The total number of emails confirmed sent for this campaign so far.  # noqa: E501

        :param emails_sent: The emails_sent of this CampaignDeliveryStatus.  # noqa: E501
        :type: int
        """

        self._emails_sent = emails_sent

    @property
    def emails_canceled(self):
        """Gets the emails_canceled of this CampaignDeliveryStatus.  # noqa: E501

        The total number of emails canceled for this campaign.  # noqa: E501

        :return: The emails_canceled of this CampaignDeliveryStatus.  # noqa: E501
        :rtype: int
        """
        return self._emails_canceled

    @emails_canceled.setter
    def emails_canceled(self, emails_canceled):
        """Sets the emails_canceled of this CampaignDeliveryStatus.

        The total number of emails canceled for this campaign.  # noqa: E501

        :param emails_canceled: The emails_canceled of this CampaignDeliveryStatus.  # noqa: E501
        :type: int
        """

        self._emails_canceled = emails_canceled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CampaignDeliveryStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignDeliveryStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
